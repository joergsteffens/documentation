////
; Copyright (c) uib gmbh (www.uib.de)
; This documentation is owned by uib
; and published under the german creative commons by-sa license
; see:
; https://creativecommons.org/licenses/by-sa/3.0/de/
; https://creativecommons.org/licenses/by-sa/3.0/de/legalcode
; english:
; https://creativecommons.org/licenses/by-sa/3.0/
; https://creativecommons.org/licenses/by-sa/3.0/legalcode
;
; credits: http://www.opsi.org/credits/
////

:Author:    uib gmbh
:Email:     info@uib.de
:Revision:  1
:toclevels: 6
:toc:
:numbered:
:doctype:   book

[[opsi-manual-dircon]]
=== opsi directory connector


[[opsi-manual-dircon-introduction]]
==== Introduction

The opsi directory connector is a tool to transfer data from a directory service to an opsi installation.
This avoids the need of maintaining data in different systems.


[[opsi-manual-dircon-preconditions]]
==== Prerequisites

This module is currently a link:https://www.opsi.org/product/extensions-of-opsi/[co-funded opsi extension]. +
There are a number of prerequisites for using this module. This means that you need an activation file. You will receive this activation when you buy the extension. For evaluation purposes, we also provide you with a temporary activation free of charge (mail to info@uib.de). +

ifdef::manual[]
More details can be found in <<opsi-manual-modules>>.
endif::manual[]


[[opsi-manual-dircon-preconditions-general]]
===== General Requirements

The source directory service must implement the LDAP protocol.

The target opsi server should run at least opsi 4.0.7. Older versions may work, but have not been tested.

The machine running the connector must have access to the directory and opsi server via the network.
It is possible to run all components on the same machine, but it is assumed that separate machines are used for each component.


[[opsi-manual-dircon-requirements-hardware]]
===== Hardware Requirements

These requirements are intended for basic use in a small environment with up to 500 clients.
These requirements may be greater in large environments, which is why adjustments may be necessary.

* 256 MB of free memory
* Network connections


[[opsi-manual-dircon-requirements-software]]
===== Software Requirements

The installation and operation is only supported on Linux.
Support for Windows is not planned.

The connector uses Python 3, which must be at least version 3.2.

By using standardized protocols for communication, no additional opsi- or directory service-specific components are required.


[[opsi-manual-dircon-installation]]
==== Installation

To install the connector please add the opsi repository as described in the `Getting Started` document.

Then use the package manager of the operating system to install the package `opsi-directory-connector`.

On a Debian-based machine the installation can be done as follows:

[source,prompt]
----
apt-get install opsi-directory-connector
----

NOTE: CentOS and RedHat version 6 and 7 do not provide Python 3 as part of their core repositories, which is why we can not support the installation on these operating systems.


[[opsi-manual-dircon-configuration]]
==== Configuration

The connector uses a number of configuration options and can be adapted to a wide variety of environments.

The configuration is done via a configuration file in JSON format, which must contain valid JSON.
To specify Boolean values, please use `true` or `false`.
Text has to be entered with double quotation marks, for example `"this is text"`.

An example configuration is provided as `/etc/opsi/opsidirectoryconnector.example.conf`
This file can be used as a template for your own configuration.

[source,prompt]
----
cp /etc/opsi/opsidirectoryconnector.example.conf /etc/opsi/opsidirectoryconnector-custom.conf
----

[[opsi-manual-dircon-conf-dir]]
===== Directory settings

These settings are required to establish a connection to the directory service and to limit the search scope to specific areas and objects.

[source,json]
----
{
    "directory": {
        "address": "ldap://192.168.12.34",
        "user": "DOMAIN\\opsiconnector",
        "password": "insertpasswordhere",
        "passwordFile": "",
        "search_base": "dc=testcompany,dc=local",
        "search_query_computers": "(objectClass=computer)",
        "identifying_attribute": "dn",
        "connection_options": {
            "start_tls": true,
            "paged_search_limit": 768
        }
    },
    …
}
----

Under `address` you have to specify at which address the server can be contacted.
`User` and `password` are used for authentication to the directory.
If a value is given for `passwordFile`, this is interpreted as the path to a file that contains the password.
The content of this file will be used as the password.
This means that the password does not have to be stored in plain text in the configuration file.
This will override the value set for `password`, if the file can be read.

TIP: We recommend using a dedicated user account.

NOTE: Depending on the directory software used and its configuration, the format for the username can be different. +
Besides _Down-Level Logon Name_ in the style of `DOMAIN\\username`, the format can also be _User Principal Name_ in the style of `user@domain`, or a _Distinguished Name_ (DN) like `uid=opsiconnect,cn=users,dc=test,dc=intranet`.

With `search_base` you specify from which point the connector looks for matching entries.
The filter used to search for clients can be configured via `search_query_computers`.

Through the optional parameter `identifying_attribute` it is possible to set which attribute should be used for the unique identification of a client. This is possible since version 23.
The standard used here is `dn`.
A common alternative to `dn` is the value `distinguishedName`, this variant is often used in Microsoft Active Directory.

The `connection_options` parameter contains additional options for configuration of the connection.
With `start_tls` you can control whether a secure connection should be used.

If the optional parameter `paged_search_limit` is present and if its value is an integer, multiple queries are used to read the elements from the directory. The maximum number of elements an answer contains is controlled by this value.
This behavior has been supported since version 20.

NOTE: Additional connection options will be implemented on request.

Since version 14 it is possible to test the connection to the directory via the parameter `--check-directory`, without establishing a connection to the opsi server.


[[opsi-manual-dircon-conf-dir-ucs]]
===== Connection to Univention Corporate Server

A complete _Distinguished Name_ must be used as the user name for a connection to Univention Corporate Server (UCS).
This has the form `uid=<username>,cn=users,dc=company,dc=mydomain`.

On UCS, LDAP can be reached via ports 7389 (unsecured) or 7636 (SSL-secured).
If Samba is also installed on the server and set up as an AD-compatible domain controller, it listens on ports 389 (unsecured) or 636 (SSL-secured).
To use the SSL-secured ports, the connection option `start_tls` must be set to `true`.

These two possible connections also differ in the type of login name. With LDAP, `uid=…` is used, whereas with Samba, `dn=…` is used.

Generally, you will search for computer objects in the `computers` container.
The following command outputs the appropriate value for `search_base`:
[source,prompt]
----
echo "cn=computers,$(ucr get ldap/base)"
----

To search for Windows clients you can set `search_query_computers` to `(objectClass=univentionWindows)`.

How to create a user with read-only access can be found in the Univention Wiki: link:https://wiki.univention.de/index.php?title=Cool_Solution_-_LDAP_search_user[Cool Solution - LDAP search user]


[[opsi-manual-dircon-conf-work]]
===== Behaviour settings

These settings control the behaviour of the connector.

[source,json]
----
{
    …
    "behaviour": {
        "write_changes_to_opsi": true,
        "root_dir_in_opsi": "clientdirectory",
        "update_existing_clients": true,
        "prefer_location_from_directory": true
    },
    …
}
----

If `write_changes_to_opsi` is set to `false`, no data will be written to opsi.
This setting can be used to check the settings before they are applied.

`root_dir_in_opsi` specifies which group should be used as the root group in opsi.
You have to ensure that this group exists.

NOTE: The group _clientdirectory_ is shown in configed as _DIRECTORY_.
So if clients or groups should appear directly in _DIRECTORY_, the value `clientdirectory` must be entered as the value for `root_dir_in_opsi`.

If `update_existing_clients` is set to `false`, clients already existing in opsi will not be changed.
If this is set to `true`, any manually entered data will be overwritten with the values ​​from the directory.

If `prefer_location_from_directory` is set to `true`, clients in opsi are moved to the position they have in the directory.
To deactivate this behavior, this value must be set to `false`.

Since version 31, group handling can be controlled via the optional key `group_handling`.
The default is `cn`. Groups are derived from the DN of a computer and created accordingly as part of the opsi directory. A client can only be member of one group.

If the group handling is set to `ucsatschool`, the behavior is adapted for use in link:https://www.univention.de/produkte/ucsschool/[UCS@School] environments.
The opsi-directory-connector will automatically search for schools and find their rooms, which are then synchronized to opsi.
For every school a group will be created in opsi.
In UCS@School a computer can be a member of multiple rooms. To follow this behaviour, the groups are not created as a group within the opsi directory, but as a normal group, so that a client can also be found in multiple groups.


[[opsi-manual-dircon-conf-mapping]]
===== Attribute-Mappings

With a system as flexible as a directory service the connector must
be given information about what attributes in the directory match these
of the corresponding opsi objects.

[source,json]
----
{
    …
    "mapping": {
        "client": {
            "id": "name",
            "description": "description",
            "notes": "",
            "hardwareAddress": "",
            "ipAddress": "",
            "inventoryNumber": "",
            "oneTimePassword": ""
        }
    },
    …
}
----

There is a mapping for client attributes.
The key of the mapping is the attribute in opsi and the value is the attribute from the directory. If the value (in the mapping) is empty no mapping will be done.

NOTE: If the value read from the directory for the client ID does not seem to be an FQDN an FQDN will be created. The domain part for this will be created from the DC of the read element.

TIP: On UCS the value for `hardwareAddress` can be set to `macAddress` if the connection is made through LDAP (ports 7389 or 7636).


[[opsi-manual-dircon-conf-mapping-groupnames]]
===== Manual assignment of group names

Group names are usually used without any major adjustments.
But this may lead to cases where names should be used that are invalid in opsi.

For this special cases a manual assignment of group names can be helpful.

To configure this an entry `group_name` has to be created in `mapping`.
This holds the mapping from the directory to opsi.
Names that are not present in this mapping aren't changed.
The group names are always processed in lowercase.
This can be configured since version 23.

The following example handles the group `_server` originating from the directory as `server` in opsi.

[source,json]
----
{
    ...
    "mapping": {
        "client": {
            ...
        },
        "group_name": {
            "_server": "server"
        }
    },
    ...
}
----

WARNING: Please be careful with this feature as it may introduce undesired side effects. It should only be used for special cases!


[[opsi-manual-dircon-conf-conect]]
===== opsi connection settings

This specifies how the connector accesses opsi.

[source,json]
----
{
    …
    "opsi": {
        "address": "https://localhost:4447",
        "username": "syncuser",
        "password": "secret",
        "exit_on_error": false,
        "passwordFile": "",
        "connection_options": {
            "verify_certificate": true
        }
    }
}
----

Set `address` to the address of your opsi server. Please include the
port.

NOTE: To use a proxy for the connection use the environment variable 'HTTPS_PROXY'.

`username` and `password` should be set accordingly to authenticate
at the opsi server.
If `passwordFile` is set the value will be interpreted as path to a file that contains the password.
The content of the file will be used as password.
This allows for not having the password written in plaintext in the file.
This will override the value set for `password` if the file can be read.

TIP: We recommended setting up a dedicated user for this task. Refer to the document _Getting Started_ on how to do this.

If the parameter `exit_on_error` is `true` then any problem that appears when updating data in opsi opsi - this could be triggered by submitting values that are invalid in opsi - results in a break.
If this is `false` then problems will be logged but the run will not be stopped.

With `connection_options` the options for connecting to opsi can be set.
`verify_certificate` configures the verification of the server certificate.
For selfsigned certificates this can be set to `false`.

Since version 14 it is possible to test the connection to the opsi server through the paramter `--check-opsi` without connecting to the directory.


[[opsi-manual-dircon-run]]
==== Running the connector

After installation a binary called `opsidirectoryconnector` will
be present on the system.

It is required to pass an argument `--config` together with the path to
the configuration.

[source,prompt]
----
opsidirectoryconnector --config /etc/opsi/opsidirectoryconnector-custom.conf
----

NOTE: The user running the binary does not require any access to opsi as this is all specified in the configuration.

[[opsi-manual-dircon-run-systemd]]
===== Example: recurring runs with systemd

The connector currently does one synchronisation run when executed but
the chances are good that you want to have a constant synchronisation of data.

It is easy to automate the execution of the connector to have recurring runs.

We will use systemd for this.
In contrast to cronjobs systemd will avoid overlapping runs and is therefore
a good choice.

The following example will set up the connector so that it is run five minutes after the machine was booted and from then on every hour.

In the directory `/etc/systemd/system/`, this is the directory for user-defined units, you need to place the two following files.
One for the timer that makes the job recurring and one for the job itself.

Please put this inside `opsi-directory-connector.timer`:

[source,configfile]
----
[Unit]
Description=Start the opsi-directory-connector in regular intervals

[Timer]
OnBootSec=5min
OnUnitActiveSec=1hour

[Install]
WantedBy=timers.target
----

And this is the content of `opsi-directory-connector.service`:

[source,configfile]
----
[Unit]
Description=Sync clients from AD to opsi.
Wants=network.target

[Service]
Type=oneshot
ExecStart=/usr/bin/opsidirectoryconnector --config /etc/opsi/opsidirectoryconnector-custom.conf
----

To enable the timer and start it right away use the following commands:

[source,prompt]
----
systemctl enable opsi-directory-connector.timer
systemctl start opsi-directory-connector.timer
----

If the timer does not get started it will be first run after the next reboot of the machine.


[[opsi-manual-dircon-run-cronjob]]
===== Example: recurring runs as cronjob

It is easy to automate recurring runs through a cronjob.

Please be aware that overlapping runs may happen with cron and therefore the interval should be higher.
To avoid this problem it is recommended to use *systemd* instead of *cron*

The cronjob file can usually be edited through `crontab -e`.
For an synchronisation that happens every hour there can be used the following:

[source,prompt]
----
0 * * * * /usr/bin/opsidirectoryconnector --config /etc/opsi/opsidirectoryconnector-custom.conf
----
