////
; Copyright (c) uib gmbh (www.uib.de)
; This documentation is owned by uib
; and published under the german creative commons by-sa license
; see:
; https://creativecommons.org/licenses/by-sa/3.0/de/
; https://creativecommons.org/licenses/by-sa/3.0/de/legalcode
; english:
; https://creativecommons.org/licenses/by-sa/3.0/
; https://creativecommons.org/licenses/by-sa/3.0/legalcode
;
; credits: http://www.opsi.org/credits/
////

:Author:    uib gmbh
:Email:     info@uib.de
:Date:      20.1.2015
:Revision:  4.0.6
:toclevels: 6


include::../common/opsi_terms.asciidoc[]


[[opsi-manual-configuration-tools]]
=== opsi command line tools and processes


[[opsi-manual-configuration-tools-opsi-setup]]
==== Tool: opsi-setup

This program is something like the 'swiss army knife' of the opsi configuration. It is used by the opsi installation scripts and can be also called separately for maintenance and repair purposes.

The tasks of opsi-setup are:

* register a opsi-server as depot server
* correct file access rights
* initialize data storage backends
* upgrade backend (from 3.4 to 4.0)
* setup of the MySQL-backend
* edit the default configurations
* cleanup the current backend(s)
* configure the essential samba shares
* configure the essential dhcp entries


The command `opsi-setup --help` shows the program options:

[source,prompt]
----
opsi-setup --help

Usage: opsi-setup [options]

Options:
   -h, --help  show this help
   -l          log-level 0..9

   --log-file <path>          path to log file
   --ip-address <ip>          force to this ip address (do not lookup by name)
   --register-depot           register depot at config server
   --set-rights [path]        set default rights on opsi files (in [path] only)
   --init-current-config      init current backend configuration
   --update-mysql             update mysql backend
   --update-ldap              update ldap backend
   --update-file              update file backend
   --configure-mysql          configure mysql backend
   --edit-config-defaults     edit global config defaults
   --cleanup-backend          cleanup backend
   --auto-configure-samba     patch smb.conf
   --auto-configure-dhcpd     patch dhcpd.conf
----

The functions and options in detail:

* `--ip-address <ip>` +
Sets the ip-address for '{opsi-server}' and do not resolve by name.

* `--register-depot` +
This option is used to register a '{opsi-server}' as depot server to a other '{opsi-server}' ('{opsi-configserver}'). For details see
////
<<opsi-manual-multidepot-installation>>.
////

* `--set-rights [path]` +
Sets the file access rights in all opsi directories:
+
** `/tftpboot/linux`
** `/home/opsiproducts`
** `/var/log/opsi`
** `/var/lib/opsi`
** `/var/lib/opsi/depot`
** `/etc/opsi`
+
You may give a directory name as argument to set only the access rights below this directory. +
e.g. +
`opsi-setup --set-rights /var/lib/opsi/depot/winxppro/drivers`

* `--init-current-config` +
initialize the configured backend. Should always be invoked after changing the file +
`/etc/opsi/backendManager/dispatch.conf`

* The commands: +
`--update-mysql` +
`--update-file` +
 are used to upgrade the backends from one opsi release to the next one. +
For details see the 'releasenotes-upgrade-manual'.

* `--configure-mysql` +
does the first time database setup. +
////
See <<opsi-manual-backends-mysql-initializing>>.
////

* `--edit-config-defaults` +
To edit the default values of some configuration data like in the 'server
configuration' of the '{opsi-configed}'.
+
.Dialog: `opsi-setup --edit-config-defaults`
image::opsi-setup_editconfigdefaults.png["Dialog: opsi-setup --edit-config-defaults", width=400]
+
e.g.:
+
clientconfig.depot.id :: The name of the default depot server.
+
clientconfig.depot.drive :: The drive letter used for mounting the share with the installation data. You can either select a drive letter or *dynamic*. With *dynamic* the client will try to automatically select an drive letter from those not in use.
+
license-management.use :: Defines if netboot products should get license keys from license management or from product properties.
+
product_sort_algorithm :: Defines the algorithm which is used to calculate the product installation sequence.

* `--cleanup-backend` +
Checks the current backends for integrity and removes obsolete or unreferenced entries. +
Examples for entries that may be removed are products without reference (not installed on depot / client), host-groups without a parent and configstates without corresponding config. +

NOTE: It is common good practice to create a backup through 'opsi-backup' before cleaning the backend.

* `--auto-configure-samba` +
Creates the opsi share entries in the `/etc/samba/smb.conf` configuration file

* `--auto-configure-dhcpd` +
Creates the by opsi needed entries in the `/etc/dhcp3/dhcpd.conf`. +
Don't use this if you not plan to use the dhcpd on the opsi server. +
More details in the 'opsi-getting-started' manual


[[opsi-manual-configuration-tools-opsi-package-manager]]
==== Tool: opsi-package-manager: (de-)installs opsi-packages

The `opsi-package-manager` is used for (de-)installing {opsi-product-packages} on an opsi-server.

In order to install a {opsi-product-package}, this {opsi-product-package} must be readable for the opsi system user opsiconfd. Therefore it is strongly recommended to install those packages from the directory /home/opsiproducts (or a sub directory).

The log file of the 'opsi-package-managers' you will find at '/var/log/opsi/package.log'.

Install a package (asking no questions):

[source, prompt]
----
opsi-package-manager -i softprod_1.0-5.opsi'
----

Install a package (asking questions):

[source, prompt]
----
opsi-package-manager -p ask -i softprod_1.0-5.opsi
----

Install a package (and switch required action to setup where installed):

[source, prompt]
----
opsi-package-manager -S -i softprod_1.0-5.opsi
----

Uninstall a package (asking no questions):

[source, prompt]
----
opsi-package-manager -r softprod
----

Extract and rename a package:

[source, prompt]
----
opsi-package-manager -x opsi-template_<version>.opsi --new-product-id myprod
----

It is possible to install a package with a different 'product id'.
This is helpful if a custom Windows netboot product was derived from an existing
package and that package was updated in the meantime.

[source, prompt]
----
opsi-package-manager --install win7-x64_1.2.3.opsi --new-product-id win7-x64-custom
----

NOTE: Please note that products installed that way will not be automatically updated by `opsi-product-updater`.


Calling `opsi-package-manager` with option `--help` gives a listing of possible options.

Please note:

* The option `-d` or `--depots` are reserved for the use in a multi-depot-server environment.

* Using option `-d` the opsi-package will be copied to the `/var/lib/opsi/repository` directory of the target server before installing. Please make sure that there is enough free space on this file system.

* If installing new packages fails because there is not enough free space available in your temporary folder you can specify a different temporary folder with the `--temp-dir` option.

see also:
////
<<opsi-manual-multidepot>>
////


[source, prompt]
----
# opsi-package-manager --help

Usage: opsi-package-manager [options] <command>

Manage opsi packages

Commands:
  -i, --install      <opsi-package> ...      install opsi packages
  -u, --upload       <opsi-package> ...      upload opsi packages to repositories
  -l, --list         <regex>                 list opsi packages matching regex
  -D, --differences  <regex>                 show depot differences of opsi packages matching regex
  -r, --remove       <opsi-product-id> ...   uninstall opsi packages
  -x, --extract      <opsi-package> ...      extract opsi packages to local directory
  -V, --version                              show program's version info and exit
  -h, --help                                 show this help message and exit

Options:
  -v, --verbose                           increase verbosity (can be used multiple times)
  -q, --quiet                             do not display any messages
  --log-file         <log-file>           path to debug log file
  --log-file-level   <log-file-level>     log file level (default 4)
  -d, --depots       <depots>             comma separated list of depot ids to process
                     all = all known depots
  -p, --properties   <mode>               mode for default product property values
                                 ask     = display dialog
                                 package = use defaults from package
                                 keep    = keep depot defaults (default)
  --purge-client-properties               remove product property states of the installed product(s)
  -f, --force                             force install/uninstall (use with extreme caution)
  -U, --update                            set action "update" on hosts where installation status is "installed"
  -S, --setup                             set action "setup" on hosts where installation status is "installed"
  -o, --overwrite                         overwrite existing package on upload even if size matches
  -n, --no-delta                          full package transfers on uploads (do not use librsync)
  -k, --keep-files                        do not delete client data dir on uninstall
  -t, --temp-dir     <path>               tempory directory for package install
  --max-transfers    <num>                maximum number of simultaneous uploads
                                             0 = unlimited (default)
  --max-bandwidth    <kbps>               maximum transfer rate for each transfer (in kilobytes per second)
                                             0 = unlimited (default)
  --new-product-id   <product-id>         Set a new product id when extracting opsi package or
                                          set a specific product ID during installation.
----

[[opsi-manual-configuration-tools-opsi-productupdater]]
==== Tool: `opsi-product-updater`
The command line utility `opsi-product-updater` is designed to download and install comfortable opsi packages from a repository or a other opsi server. Using the opsi-product-updater make it easy to keep the opsi server up to date. It may be also used in a cronjob to keep depot server in sync with the config server.

[source, prompt]
----
# opsi-product-updater --help

Usage: opsi-product-updater [options]
Options:
    -h    Show this help text
    -v    Increase verbosity (can be used multiple times)
    -V    Show version information and exit
    -c    Location of config file
    -i    Install all downloadable packages from configured repositories (ignores excludes)
    -p    List of productIds that will be processed: opsi-winst,opsi-client-agent
----

The main features are:

* configurable repositories
* configurable actions

All configuration will be done at the configuration file `/etc/opsi/opsi-product-updater.conf`.

[[opsi-manual-configuration-tools-opsi-productupdater-repositories]]
===== configurable repositories

Repositories are the sources which will be used by the opsi-product-update to fetch new opsi packages

There are two kinds of repositories:

*Internet Repositories*

Example: download.uib.de +
This are repositories which are configured by:

- baseURL (z.B. http://download.uib.de)
- dirs ( A list of directories e.g.. opsi4.0/produkte/essential)
- and if needed username and password for password protected repositories (e.g. for the opsi patch management subscriptions)

You may also configure a proxy here.

*opsi-server*

This is (using a '{opsi-depotserver}') the central '{opsi-configserver}' will be used to fetch the opsi-packages.

The central configuration item is here:

- 'opsiDepotId'

This is in most cases on a '{opsi-depotserver}' the central '{opsi-configserver}'. So on any call of the 'opsi-product-updater' the '{opsi-product-packages}' will be fetched from the '{opsi-configserver}'. This can be done for example by a cronjob.

[[opsi-manual-configuration-tools-opsi-productupdater-actions]]
===== configurable actions

For each repository you have to configure which actions to run:

* 'autoupdate': Newer versions of installed packages will be downloaded and installed

* 'autoinstall': Also packages which are not installed yet, will be downloaded and installed

* 'autoinstall': For all new installed packages and all clients on which these packages are installed the action request will be set to setup.

* 'onlyDownload': New packages are only downloaded and no further actions are done.
A common use case is to use this option together with notifications so that after the download of new packages a mail informs an administrator about the new packages and the administrator will manually install the new packages at a later time.

In addition it is possible to send all these clients a Wake-On-LAN signal to install the new software to the clients. Using the {opsi-product} 'shutdownwanted' you can make sure that the clients will be powered off after the installation.

* time window for autosetup: You can give time window which may be used to that client action requests to setup.

* Automatic WakeOnLan with shutdown: If there is new software Clients could be waked up and shutdown after installation automatically



[[opsi-manual-configuration-tools-opsi-admin]]
==== Tools: opsi-admin / 'opsi config interface'


[[opsi-manual-configuration-tools-opsi-admin-overview]]
===== Overview

opsi V3 introduced an opsi owned python library which provides an API for opsi configuration. The 'opsiconfd' provides this API as a web service, whereas 'opsi-admin' is the command line interface for this API.

Calling https://<opsi-server>:4447/interface in your browser gives you graphical interface to the '{opsi-webservice}'. You have to login as a member of the unix group 'opsiadmin'.

.opsi config interface: Access to the web service via browser
image::opsi-webinterface2.png["opsi config interface: Access to the web service via browser", width=400]

At the command line 'opsi-admin' provides an interface to the opsi-API. There is a interactive mode and a non interactive mode for batch processing from within scripts.

The help option `opsi-admin --help` shows a list of available command line options:

[source,prompt]
----
# opsi-admin --help

Application: opsi-admin [options] [command] [args...]
Options:
  -h, --help           Show this help text
  -V, --version        Show version number and exit
  -u, --username       Username (standard: temporary User)
  -p, --password       Password (standard: Password interactive prompt)
  -a, --address        URL from the opsconfd (standard: https://localhost:4447/rpc)
  -d, --direct         opsiconfd avoid
      --no-depot       Don't use a Depotserver-Backend
  -l, --loglevel       Log-Level (standard: 3)
                       0=nothing, 1=essential, 2=critic, 3=Errors, 4=Warnings
                       5=Tips, 6=Informations, 7=debug, 8=debug2, 9=confidential
  -f, --log-file       Path to Log-file
  -i, --interactive    Start in interactive modus
  -c, --colorize       Colorize output
  -S, --simple-output  Simple output (only for scalar and listen)
  -s, --shell-output   Shell-output
  -r, --raw-output     Raw-output
----
'opsi-admin' can use the opsi web service or directly operate on the data backend. To work with the web service you have to provide the URL and also an 'username' and 'password'. Due to security reasons you probably wouldn't like to do this from within a script. In that case you'd prefer direct access to the data base using the `-d` option: `opsi-admin -d`.

In interactive mode (start with `opsi-admin -d` or `opsi-admin -d -i -c` or short `opsi-admin -dic`) you get input support with the TAB-key. After some input, with the TAB-button you get a list or details of the data type of the next expected input.

The option `-s` or `-S` generates an output format which can be easily parsed by scripts.

There are some methods which are directly based on API-requests, and there are some 'tasks', which are a collection of function calls to do a more complex special job.

[[opsi-manual-configuration-tools-opsi-admin-typical-usage]]
===== Typical use cases

[[opsi-manual-configuration-tools-opsi-admin-typical-usage-setup]]
.Set a product to setup for all clients which have this product installed

[source,prompt]
----
opsi-admin -d task setupWhereInstalled "softprod"
----


[[opsi-manual-configuration-tools-opsi-admin-typical-usage-clientlist]]
.List of all clients

[source,prompt]
----
opsi-admin -d method host_getIdents
----


[[opsi-manual-configuration-tools-opsi-admin-typical-usage-delete-client]]
.Client delete

[source,prompt]
----
opsi-admin -d method host_delete <clientname>
----

e.g.:

[source,prompt]
----
opsi-admin -d method host_delete "pxevm.uib.local"
----


[[opsi-manual-configuration-tools-opsi-admin-typical-usage-create-client]]
.Create client

[source,prompt]
----
opsi-admin -d method host_createOpsiClient <full qualified clientname>
----

e.g.:

[source,prompt]
----
opsi-admin -d method host_createOpsiClient "pxevm.uib.local"
----


[[opsi-manual-configuration-tools-opsi-admin-typical-usage-setProductActionRequest]]
.Set action request

[source,prompt]
----
opsi-admin -d method setProductActionRequest <productId> <clientId> <actionRequest>
----

e.g.:

[source,prompt]
----
opsi-admin -d method setProductActionRequest win7 pxevm.uib.local setup
----


[[opsi-manual-configuration-tools-opsi-admin-typical-usage-setHostDescription]]
.Attach client description

[source,prompt]
----
opsi-admin -d method setHostDescription "dpvm02.uib.local" "virtual client"
----

[[opsi-manual-configuration-tools-opsi-admin-typical-usage-list-host-ids]]
.Listing the IDs of all clients

This uses the option `-S` so that every client is on it's own line.
Through filtering for the type `OpsiClient` we avoid displaying the IDs of servers.

The output can easily be used in other programs or calls.

[source,prompt]
----
opsi-admin -dS method host_getIdents '' '{"type": "OpsiClient"}'
----

[[opsi-manual-configuration-tools-opsi-admin-typical-list-installed-products]]
.Listing the products installed on clients

[source,prompt]
----
opsi-admin -d method productOnClient_getObjects '["productVersion", "packageVersion", "installationStatus"]' '{"installationStatus": "installed"}'
----

[[opsi-manual-configuration-tools-opsi-admin-typical-setPcpatchPassword]]
.set pcpatch password

[source,prompt]
----
opsi-admin -d task setPcpatchPassword
----

Set the password of user pcpatch for Unix, samba and opsi.


[[opsi-manual-configuration-tools-serverprocesses]]
==== Server processes: opsiconfd and opsipxeconfd

The 'opsipxeconfd' provides the 'named pipes' in the `tftpboot` directories. which are used to control the PXE boot process.

The configuration file is `/etc/opsi/opsipxeconfd.conf`

The log file is `/var/log/opsi/opsipxeconfd.log`.

The 'opsiconfd' provides the opsi API as JSON web service and have a lot of other important tasks. Therefore the 'opsiconfd' is the central opsi service and does all the communication to the clients.

Regarding this central rule, a tool to monitor this process gives a lot of information about load and possible problems. This tool is the 'opsiconfd' info page.

[[opsi-manual-configuration-tools-serverprocesses-info]]
===== 'opsiconfd' monitoring: opsiconfd info

Using the web address https://<opsi-server>:4447/info you will get a graphical chart of 'opsiconfd' load and cpu/memory usage in the last hour/day/month/year. This information is completed by tabulary information to the actual tasks and sessions.

.opsiconfd info: opsiconfd values from the last hour
image::opsiconfd-info-hour.png["opsiconfd info: opsiconfd values from the last hour", width="120mm"]

.opsiconfd info: opsiconfd values from the last day
image::opsiconfd-info-day.png["opsiconfd info: opsiconfd values from the last day", width="120mm"]

[[opsi-manual-configuration-tools-serverprocess-tftpd]]
==== Server process: opsi-atftpd

The opsi-atftpd is based on the standard atftpd with the additional feature to handle 'named pipes'.

By default the opsi-atftd is configured to not run as daemon but to be started by t the `inetd` process.

To change this configuration in order to run the opsi-atftpd as daemon, the following changes must be done:

* In the file `/etc/inetd.conf` the line for the 'tftp' protocol has to be removed or commented out. After you changed this configuration file, you have to reload the `inetd` process. The command to do this differs by the used Linux Distribution:

** Ubuntu / Debian: `service openbsd-inetd reload`

** openSUSE / SLES / RedHat / CentOS: `service xinetd reload`

* In the file `/etc/default/atfpd` the line `USE_INETD=true` has to be changed to `USE_INETD=false`. Then you have to restart the opsi-atftpd as daemon with the command: `service opsi-atftpd restart`
