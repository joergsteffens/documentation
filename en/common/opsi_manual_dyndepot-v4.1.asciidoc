////
; Copyright (c) uib gmbh (www.uib.de)
; This documentation is owned by uib
; Until we found a better license:
; All rights reserved.
; credits: http://www.opsi.org/credits/
////

:Author:    uib gmbh
:Email:     info@uib.de
:Date:      27.07.2018
:Revision:  4.1
:toclevels: 6

include::../common/opsi_terms.asciidoc[]


[[opsi-manual-dyndepot]]
=== Dynamic Depot Assignment (free)

[[opsi-manual-dyndepot-introduction]]
==== Introduction
With the standard opsi multi depot support, the clients are assigned to a designated depot. This is now extended with the option, that for download speed-up, each client can dynamically detect a suitable depot to download software packages from.

For most cases an assignment according to the IP address might be the easiest and suitable solution. For other network topologies, e.g. a star topology VPN network, this might not be sufficient.

Therefore a mechanism is required for the client to detect dynamically, which depot to connect for download of software packages. The specific assignment algorithm and implementation depends on the network topology and other special customer requirements. So it is best to have this adaptable and configurable.

To offer the option, that the client can detect the suitable depot according to the current network conditions, it must be ensured, that the alternative depots are synchronized, which means they offer the same software packages. In practice the depots will not be synchronized at all times. So the list of alternative depots offered to a client is limited to those depots, which are synchronized with the clients master depot. The master depot of a client is the depot, which the client is assigned to. So the master depot defines, which software version is to be installed on the client.

The opsi concept for this is as follows:

The opsi config-server provides a client script, which can be requested and executed by the client. This script determines, which depot is to be used according to the current conditions. The interfaces to the client script are specified as:
the interface to get the list of available servers and the current client configuration (IP address, netmask, gateway) and to return the result of the selection procedure. Furthermore there are interfaces for logging and user information about the processing progress.

So the actual implementation within the script can easily be adapted to the requirements of the particular opsi environment.

Regarding to this concept the single steps of a client connect are as follows:

. The client connects to the opsi opsi-configserver via web service.
. The opsi-configserver passes to the client the list of software packages to be installed.
. The opsi-configserver transmits to the client the script for detecting the best depot and the list of available depots.
. The client executes the script and determines the best depot.
. The client connects the chosen depot to get the required software packages.
. The client installation status is reported to the opsi-configserver.


[[opsi-manual-dyndepot-preconditions]]
==== Requirements
This option requires opsi version >= 4.0.

This opsi extension is free now. +
It finished the cofunding process in March 2013.
For more details see <<opsi-manual-modules>>.

The following package versions are required:

.required packages
[options="header"]
|==========================
|opsi package|version
|opsi-client-agent|>=4.0-11
|opsi-configed|>=4.0.1.5-1
|python-opsi|>=4.0.0.18-1
|==========================

NOTE: The depot selection is made through the opsi-client-agent. This means that the functionality is not present for netboot products.


[[opsi-manual-dyndepot-configuration]]
==== Configuration

The script for the dynamic depot assignment is expected on the server as: +
`/etc/opsi/backendManager/extend.d/70_dynamic_depot.conf`

To activate the dynamic depot assignment for a client, the following host parameter has to be set: +
'clientconfig.depot.dynamic = true'

This can be done with the opsi-configed  from the tab 'host parameter'.

Alternatively this can be done at the command line with the opsi-admin  (in this case <client-id> is the FQDN, e.g. client1.uib.local):
[source,prompt]
----
opsi-admin -d method configState_create \
clientconfig.depot.dynamic <client-id> [True]
----

The result can be checked by calling:
[source,prompt]
----
opsi-admin -d method configState_getObjects \
[] '{"configId":"clientconfig.depot.dynamic","objectId":"<client-id>"}'
----

[[opsi-manual-dyndepot-edit-depot-settings]]
==== Editing the depot properties

The properties of a depot are partly queried while registering an opsi-server as a depot by executing the command: `opsi-setup --register-depot` (see <<opsi-manual-multidepot-installation>>).

The properties of a depot can be edited. This can be done from the management interface as well as from the command line.

.Showing the properties of a depot (2nd button from the left)
image::configed-masterbuttons.png["Showing the properties of a depot",width=200]

The depot properties can be called by the button 'Properties of depots' from the management interface (the buttons are in the upper right corner).

.Depot properties from the '{opsi-configed}'
image::configed-depotsettings.png["Depot properties from the opsi-configed",width=400]

From the command line the depot properties can be shown by the method `host_getObjects`. Here e.g. for the depot 'dep1.uib.local'.

[source,prompt]
----
opsi-admin -d method host_getObjects [] '{"id":"dep1.uib.local"}'
----

This call results in the following output:
[source,prompt]
----
[
          {
          "masterDepotId" : "masterdepot.uib.local",
          "ident" : "dep1.uib.local",
          "networkAddress" : "192.168.101.0/255.255.255.0",
          "description" : "Depot 1 Master Depot",
          "inventoryNumber" : "",
          "ipAddress" : "192.168.105.1",
          "repositoryRemoteUrl" : "webdavs://dep1.uib.local:4447/repository",
          "depotLocalUrl" : "file:///var/lib/opsi/depot",
          "isMasterDepot" : true,
          "notes" : "",
          "hardwareAddress" : "52:54:00:37:c6:8b",
          "maxBandwidth" : 0,
          "repositoryLocalUrl" : "file:///var/lib/opsi/repository",
          "opsiHostKey" : "6a13da751fe76b9298f4ede127280809",
          "type" : "OpsiDepotserver",
          "id" : "dep1.uib.local",
          "depotWebdavUrl" : "webdavs://dep1.uib.local:4447/depot",
          "depotRemoteUrl" : "smb://dep1/opsi_depot"
          }
]
----

To edit the depot properties  on the command line, the output can be redirected to a file:
[source,prompt]
----
opsi-admin -d method host_getObjects [] '{"id":"dep1.uib.local"}' \
> /tmp/depot_config.json
----

The resulting file (`/tmp/depot_config.json`) can now be edited and then written back with the following command:
[source,prompt]
----
opsi-admin -d method host_createObjects < /tmp/depot_config.json
----

The depot properties, which are relevant for the dynamic depot assignment, are as follows:

* 'isMasterDepot' +
Must be `true` for assigning a client to that depot.
If this is set to `false` no clients can be assigned but the depot may still be used for dynamic depot selection.

* 'networkAddress' +
Network address for that depot. The network address can be specified in two different notations:

** network/netmask, example:  192.168.101.0/255.255.255.0
** network/maskbits, example: 192.168.101.0/24

Whether the 'networkAddress' is actually evaluated for the depot assignment depends on the script algorithm.
The default algorithm, as provided by uib, uses that parameter.


[[opsi-manual-dyndepot-depot-sync]]
==== Synchronizing the depots
The opsi tools for synchronizing the depots are:

* `opsi-package-manager`
* `opsi-package-updater`

The `opsi-package-manager`, when installing an opsi package, can be configured by the parameter `-d ALL` to install the package not only on the current server, but also on all known depots. Example:

[source,prompt]
----
opsi-package-manager -i opsi-template_1.0-20.opsi -d ALL
----
By using the parameter -D the `opsi-package-manager` can be instructed to list the differences between depots. In this case the option `-d` must specify a list of depots or refer to all known depots by `-d ALL`. Example:

[source,prompt]
----
opsi-package-manager -D -d ALL
----

The `opsi-package-manager` also is the tool for a 'push' synchronization.
Whereas the tool `opsi-package-updater` is meant for 'pull' synchronization.

The `opsi-package-updater` is designed to be run as a cronjob.
This allows some easy automation.
Please refer to <<opsi-manual-configuration-tools-opsi-package-updater>> for more information on the configuration.

CAUTION: When a package is installed on an opsi server with the command `opsi-package-manager -i`, the package is not installed to the repository directory.
To get the package to the repository directory, the name of the depot can be specified by the -d option. Alternatively the upload of the package to the repository directory can be done by `opsi-package-manager -u <package name>`.

Please refer to the documentation of the tools `opsi-package-manager` and `opsi-package-updater` in the opsi manual.


[[opsi-manual-dyndepot-sequence]]
==== Processing

If the dynamic depot assignment is activated for a client by the host parameter 'clientconfig.depot.dynamic', the client retrieves the script via web service and executes it.

The script to be used for dynamic assignment is: +
`/etc/opsi/backendManager/extend.d/70_dynamic_depot.conf`

Following parameters are passed to the function `selectDepot`, which is defined in the script:

* clientConfig +
Information about the current client configuration (hash). +
The clientConfig hash keys are currently:
** "clientId": opsi host ID of the client (FQDN)
** "ipAddress": IP address of the network interface to the '{opsi-configserver}'
** "netmask" : netmask of the network interface
** "defaultGateway": default gateway

* masterDepot +
Information regarding the master depot ('{opsi-depotserver}'-object). The master depot is the depot which the client is assigned to from the management interface.
The attributes of the passed '{opsi-depotserver}'-object match the attributes as given by `host_getObjects` (see <<opsi-manual-dyndepot-edit-depot-settings>>).

* alternativeDepots +
Information about the alternative depots (list of '{opsi-depotserver}'-objects).
The list of alternative depots lists the depots, which are, regarding the required software packages, identical to the master depot.

Based on this information, the assignment algorithm can pick a depot from the provided depot list and return the '{opsi-depotserver}'-object of the chosen depot as the result of the function.
If the assignment algorithm does not find a suitable depot from the list (or if the provided list is empty), the return result should be the master depot object.

[[opsi-manual-dyndepot-selection-template]]
==== Template of the assignment script

The template script checks the network addresses of the given depots and picks the depot which is in the same network as the client.

The template script offers example functions for depot detection. +
The function +depotSelectionAlgorithmByNetworkAddress+ checks the network addresses of the depots and selects the depot which is in the same network as the client. +
The function +depotSelectionAlgorithmByLatency+ sends ICMP „echo-request“-packages (ping) to the depots and selects the depot with the lowest latency. +
The function +depotSelectionAlgorithmByMasterDepotAndLatency+ aims for the use in environments with more than one master depots that can have zero-to-many slave depots themselves. It will determine the depot with the lowest latency based on the same check as +depotSelectionAlgorithmByLatency+ from a list containing the master depot of the current client and its slave depots.
The function +getDepotSelectionAlgorithm+ is called by the client and returns the algorithm for depot selection.

The template script uses as default the function +depotSelectionAlgorithmByNetworkAddress+.

[source,prompt]
----
# -*- coding: utf-8 -*-

global depotSelectionAlgorithmByNetworkAddress
depotSelectionAlgorithmByNetworkAddress = \
'''
def selectDepot(clientConfig, masterDepot, alternativeDepots=[]):
	selectedDepot = masterDepot
	logger.info(u"Choosing depot from list of depots:")
	logger.info(u"   Master depot: %s" % masterDepot)
	for alternativeDepot in alternativeDepots:
		logger.info(u"   Alternative depot: %s" % alternativeDepot)
	if alternativeDepots:
		import socket, struct
		# Calculate bitmask of host's ipaddress
		n = clientConfig['ipAddress'].split('.')
		for i in range(4):
			n[i] = forceInt(n[i])
		ip = (n[0] << 24) + (n[1] << 16) + (n[2] << 8) + n[3]

		depots = [ masterDepot ]
		depots.extend(alternativeDepots)
		for depot in depots:
			if not depot.networkAddress:
				logger.warning(u"Network address of depot '%s' not known" % depot)
				continue
			(network, netmask) = depot.networkAddress.split(u'/')
			while (network.count('.') < 3):
				network = network + u'.0'
			if (netmask.find('.') == -1):
				netmask = forceUnicode(socket.inet_ntoa(struct.pack('>I',0xffffffff ^ (1 << 32 - forceInt(netmask)) - 1)))
			while (netmask.count('.') < 3):
				netmask = netmask + u'.0'

			logger.debug(u"Testing if ip %s is part of network %s/%s" % (clientConfig['ipAddress'], network, netmask))

			n = network.split('.')
			for i in range(4):
				n[i] = int(n[i])
			network = (n[0] << 24) + (n[1] << 16) + (n[2] << 8) + n[3]
			n = netmask.split('.')
			for i in range(4):
				n[i] = int(n[i])
			netmask = (n[0] << 24) + (n[1] << 16) + (n[2] << 8) + n[3]

			wildcard = netmask ^ 0xFFFFFFFFL
			if (wildcard | ip == wildcard | network):
				logger.notice(u"Choosing depot with networkAddress %s for ip %s" % (depot.networkAddress, clientConfig['ipAddress']))
				selectedDepot = depot
				break
			else:
				logger.info(u"IP %s does not match networkAddress %s of depot %s" % (clientConfig['ipAddress'], depot.networkAddress, depot))
	return selectedDepot
'''

global depotSelectionAlgorithmByLatency
depotSelectionAlgorithmByLatency = \
'''
def selectDepot(clientConfig, masterDepot, alternativeDepots=[]):
	selectedDepot = masterDepot
	logger.info(u"Choosing depot from list of depots:")
	logger.info(u"   Master depot: %s" % masterDepot)
	for alternativeDepot in alternativeDepots:
		logger.info(u"   Alternative depot: %s" % alternativeDepot)
	if alternativeDepots:
		from OPSI.Util.Ping import ping
		from OPSI.Util.HTTP import urlsplit
		depots = [ masterDepot ]
		depots.extend(alternativeDepots)
		latency = {}
		for depot in depots:
			if not depot.repositoryRemoteUrl:
				continue
			try:
				(scheme, host, port, baseurl, username, password) = urlsplit(depot.repositoryRemoteUrl)
				latency[depot] = ping(host)
				logger.info(u"Latency of depot %s: %0.3f ms" % (depot, latency[depot]*1000))
			except Exception, e:
				logger.warning(e)
		if latency:
			minValue = 1000
			for (depot, value) in latency.items():
				if (value < minValue):
					minValue = value
					selectedDepot = depot
			logger.notice(u"Choosing depot %s with minimum latency %0.3f ms" % (selectedDepot, minValue*1000))
	return selectedDepot
'''

global depotSelectionAlgorithmByMasterDepotAndLatency
depotSelectionAlgorithmByMasterDepotAndLatency = \
'''
def selectDepot(clientConfig, masterDepot, alternativeDepots=[]):
	def getLatencyInformation(depots):
		from OPSI.Util.Ping import ping
		from OPSI.Util.HTTP import urlsplit

		latency = {}
		for depot in depots:
			if not depot.repositoryRemoteUrl:
				continue

			try:
				(scheme, host, port, baseurl, username, password) = urlsplit(depot.repositoryRemoteUrl)
				latency[depot] = ping(host)

				if latency[depot]:
					logger.info(u"Latency of depot %s: %0.3f ms" % (depot, latency[depot]*1000))
				else:
					logger.info(u"Latency of depot %s: N/A" % depot)
			except Exception, e:
				logger.warning(e)
		return latency

	def getDepotWithLowestLatency(latency):
		selectedDepot = None
		if latency:
			minValue = 1000
			for (depot, value) in latency.items():
				if not value:
					continue
				if (value < minValue):
					minValue = value
					selectedDepot = depot
			logger.notice(u"Choosing depot %s with minimum latency %0.3f ms" % (selectedDepot, minValue*1000))

		return selectedDepot

	logger.info(u"Choosing depot from list of depots:")
	logger.info(u"   Master depot: %s" % masterDepot)
	for alternativeDepot in alternativeDepots:
		logger.info(u"   Alternative depot: %s" % alternativeDepot)

	if alternativeDepots:
		from collections import defaultdict

		# Mapping of depots to its master.
		# key: Master depot
		# value: All slave depots + master
		depotsByMaster = defaultdict(list)

		allDepots = [masterDepot] + alternativeDepots

		for depot in allDepots:
			if depot.masterDepotId:
				depotsByMaster[depot.masterDepotId].append(depot)
			else:
				depotsByMaster[depot.id].append(depot)

		depotsWithLatency = getLatencyInformation(depotsByMaster[masterDepot.id])
		depotWithLowestLatency = getDepotWithLowestLatency(depotsWithLatency)

		logger.info('Depot with lowest latency: {0}'.format(depotWithLowestLatency))
		if not depotWithLowestLatency:
			logger.info('No depot with lowest latency. Falling back to master depot.')
			depotWithLowestLatency = masterDepot

		return depotWithLowestLatency

	return masterDepot
'''

def getDepotSelectionAlgorithm(self):
	#return depotSelectionAlgorithmByMasterDepotAndLatency
	#return depotSelectionAlgorithmByLatency
	return depotSelectionAlgorithmByNetworkAddress
----

[[opsi-manual-dyndepot-logging]]
====  Logging

If the dynamic depot assignment is activated, there are some logs from the depot assignment in `opsiclientd.log`.
In this shortened example log, the server +bonifax.uib.local+ is config server and master depot for the client +pctrydetlef.uib.local+. As a master server  the server has the network address +192.168.1.0/255.255.255.0+. As an alternative depot  the server +stb-40-srv-001.uib.local+ is available with the network address +192.168.2.0/255.255.255.0+.
The client +pctry4detlef.uib.local+ has the IP address +192.168.2.109+, which is in the network of the alternative depot.

[source,prompt]
----
(...)
[6] [Dec 02 18:25:27] [ opsiclientd                   ] Connection established to: 192.168.1.14   (HTTP.pyo|421)
[5] [Dec 02 18:25:28] [ event processing gui_startup  ]    [ 1] product opsi-client-agent:   setup   (EventProcessing.pyo|446)
[5] [Dec 02 18:25:28] [ event processing gui_startup  ] Start processing action requests   (EventProcessing.pyo|453)
[5] [Dec 02 18:25:28] [ event processing gui_startup  ] Selecting depot for products [u'opsi-client-agent']   (Config.pyo|314)
[5] [Dec 02 18:25:28] [ event processing gui_startup  ] Selecting depot for products [u'opsi-client-agent']   (__init__.pyo|36)
(...)
[6] [Dec 02 18:25:28] [ event processing gui_startup  ] Dynamic depot selection enabled   (__init__.pyo|78)
(...)
[6] [Dec 02 18:25:28] [ event processing gui_startup  ] Master depot for products [u'opsi-client-agent'] is bonifax.uib.local   (__init__.pyo|106)
[6] [Dec 02 18:25:28] [ event processing gui_startup  ] Got alternative depots for products: [u'opsi-client-agent']   (__init__.pyo|110)
[6] [Dec 02 18:25:28] [ event processing gui_startup  ] 1. alternative depot is stb-40-srv-001.uib.local   (__init__.pyo|112)
(...)
[6] [Dec 02 18:25:28] [ event processing gui_startup  ] Verifying modules file signature   (__init__.pyo|129)
[5] [Dec 02 18:25:28] [ event processing gui_startup  ] Modules file signature verified (customer: uib GmbH)   (__init__.pyo|143)
(...)
[6] [Dec 02 18:25:28] [ event processing gui_startup  ] Choosing depot from list of depots:   (<string>|4)
[6] [Dec 02 18:25:28] [ event processing gui_startup  ]    Master depot: <OpsiConfigserver id 'bonifax.uib.local'>   (<string>|5)
[6] [Dec 02 18:25:28] [ event processing gui_startup  ]    Alternative depot: <OpsiDepotserver id 'stb-40-srv-001.uib.local'>   (<string>|7)
[5] [Dec 02 18:25:28] [ event processing gui_startup  ] Choosing depot with networkAddress 192.168.2.0/255.255.255.0 for ip 192.168.2.109   (<string>|40)
[5] [Dec 02 18:25:28] [ event processing gui_startup  ] Selected depot is: <OpsiDepotserver id 'stb-40-srv-001.uib.local'>   (__init__.pyo|171)
(...)
[5] [Dec 02 18:25:28] [ event processing gui_startup  ] Mounting depot share smb://stb-40-srv-001/opsi_depot   (EventProcessing.pyo|415)
(...)
----
