////
; Copyright (c) uib gmbh (www.uib.de)
; This documentation is owned by uib
; and published under the german creative commons by-sa license
; see:
; https://creativecommons.org/licenses/by-sa/3.0/de/
; https://creativecommons.org/licenses/by-sa/3.0/de/legalcode
; english:
; https://creativecommons.org/licenses/by-sa/3.0/
; https://creativecommons.org/licenses/by-sa/3.0/legalcode
;
; credits: http://www.opsi.org/credits/
////

:Author:    uib gmbh
:Email:     info@uib.de
:Date:      28.02.2019
:Revision:  4.1
:toclevels: 6


include::../common/opsi_terms.asciidoc[]


[[opsi-manual-configuration-tools]]
=== opsi command line tools and processes


[[opsi-manual-configuration-tools-opsi-setup]]
==== Tool: 'opsi-setup'

This program is something like the 'swiss army knife' of the opsi configuration. It is used by the opsi installation scripts and can be also called separately for maintenance and repair purposes.

The tasks of opsi-setup are:

* register a opsi-server as depot server
* correct file access rights
* initialize data storage backends
* upgrade backend (from 3.4 to 4.0)
* setup of the MySQL-backend
* edit the default configurations
* cleanup the current backend(s)
* configure the essential samba shares
* configure the essential dhcp entries


The command `opsi-setup --help` shows the program options:

[source,prompt]
----
opsi-setup --help

Usage: opsi-setup [options]

Options:
   -h, --help  show this help
   -l          log-level 0..9

   --log-file <path>          path to log file
   --ip-address <ip>          force to this ip address (do not lookup by name)
   --register-depot           register depot at config server
   --set-rights [path]        set default rights on opsi files (in [path] only)
   --init-current-config      init current backend configuration
   --update-mysql             update mysql backend
   --update-file              update file backend
   --configure-mysql          configure mysql backend
   --edit-config-defaults     edit global config defaults
   --cleanup-backend          cleanup backend
   --auto-configure-samba     patch smb.conf
   --auto-configure-dhcpd     patch dhcpd.conf
----

The functions and options in detail:

* `--ip-address <ip>` +
Sets the ip-address for '{opsi-server}' and do not resolve by name.

* `--register-depot` +
This option is used to register a '{opsi-server}' as depot server to a other '{opsi-server}' ('{opsi-configserver}'). For details see
////
<<opsi-manual-multidepot-installation>>.
////

* `--set-rights [path]` +
Sets the file access rights in all opsi directories:
+
** `/tftpboot/linux`
** `/var/log/opsi`
** `/var/lib/opsi`
** `/var/lib/opsi/depot`
** `/var/lib/opsi/workbench` (or an differently configured path on the depot)
** `/etc/opsi`
+
You may give a directory name as argument to set only the access rights below this directory. +
e.g. +
`opsi-setup --set-rights /var/lib/opsi/depot/winxppro/drivers`

* `--init-current-config` +
initialize the configured backend. Should always be invoked after changing the file +
`/etc/opsi/backendManager/dispatch.conf`

* The commands: +
`--update-mysql` +
`--update-file` +
 are used to upgrade the backends from one opsi release to the next one. +
For details see the 'releasenotes-upgrade-manual'.

* `--configure-mysql` +
does the first time database setup. +
////
See <<opsi-manual-backends-mysql-initializing>>.
////

* `--edit-config-defaults` +
To edit the default values of some configuration data like in the 'server
configuration' of the '{opsi-configed}'.
+
.Dialog: `opsi-setup --edit-config-defaults`
image::opsi-setup_editconfigdefaults.png["Dialog: opsi-setup --edit-config-defaults", width=400]
+
e.g.:
+
clientconfig.depot.id :: The name of the default depot server.
+
clientconfig.depot.drive :: The drive letter used for mounting the share with the installation data. You can either select a drive letter or *dynamic*. With *dynamic* the client will try to automatically select an drive letter from those not in use.
+
license-management.use :: Defines if netboot products should get license keys from license management or from product properties.
+
product_sort_algorithm :: Defines the algorithm which is used to calculate the product installation sequence.

* `--cleanup-backend` +
Checks the current backends for integrity and removes obsolete or unreferenced entries. +
Examples for entries that may be removed are products without reference (not installed on depot / client), host-groups without a parent and configstates without corresponding config. +

NOTE: It is common good practice to create a backup through 'opsi-backup' before cleaning the backend.

* `--auto-configure-samba` +
Creates the opsi share entries in the `/etc/samba/smb.conf` configuration file

* `--auto-configure-dhcpd` +
Creates the by opsi needed entries in the configuration file of the DHCP daemon. +
Don't use this if you not plan to use the dhcpd on the opsi server. +
More details in the 'opsi-getting-started' manual


[[opsi-manual-configuration-tools-opsi-package-manager]]
==== Tool: 'opsi-package-manager' - (de-)install opsi-packages

The `opsi-package-manager` is used for (de-)installing {opsi-product-packages} on an opsi-server.

In order to install a {opsi-product-package}, this {opsi-product-package} must be readable for the opsi system user opsiconfd. Therefore it is strongly recommended to install those packages from the directory `/var/lib/opsi/workbench` (or a sub directory).

The log file of the 'opsi-package-managers' you will find at '/var/log/opsi/package.log'.

Install a package (asking no questions):

[source, prompt]
----
opsi-package-manager -i softprod_1.0-5.opsi'
----

Install a package (asking questions):

[source, prompt]
----
opsi-package-manager -p ask -i softprod_1.0-5.opsi
----

Install a package (and switch required action to setup where installed):

[source, prompt]
----
opsi-package-manager -S -i softprod_1.0-5.opsi
----

Install a package (and switch required action to setup with dependencies where installed):

[source, prompt]
----
opsi-package-manager -s -i softprod_1.0-5.opsi
----

Or:

[source, prompt]
----
opsi-package-manager --setup-with-dependencies --install softprod_1.0-5.opsi
----

Uninstall a package (asking no questions):

[source, prompt]
----
opsi-package-manager -r softprod
----

Extract and rename a package:

[source, prompt]
----
opsi-package-manager -x opsi-template_<version>.opsi --new-product-id myprod
----

It is possible to install a package with a different 'product id'.
This is helpful if a custom Windows netboot product was derived from an existing
package and that package was updated in the meantime.

[source, prompt]
----
opsi-package-manager --install win7-x64_1.2.3.opsi --new-product-id win7-x64-custom
----

NOTE: Please note that products installed that way will not be automatically updated by `opsi-package-updater`.


Calling `opsi-package-manager` with option `--help` gives a listing of possible options.

Please note:

* The option `-d` or `--depots` are reserved for the use in a multi-depot-server environment.

* Using option `-d` the opsi-package will be copied to the `/var/lib/opsi/repository` directory of the target server before installing. Please make sure that there is enough free space on this file system.

* If installing new packages fails because there is not enough free space available in your temporary folder you can specify a different temporary folder with the `--temp-dir` option.

see also:
////
<<opsi-manual-multidepot>>
////


[source, prompt]
----
# opsi-package-manager --help

Usage: opsi-package-manager [options] <command>

Manage opsi packages

Commands:
  -i, --install      <opsi-package> ...      install opsi packages
  -u, --upload       <opsi-package> ...      upload opsi packages to repositories
  -l, --list         <regex>                 list opsi packages matching regex
  -D, --differences  <regex>                 show depot differences of opsi packages matching regex
  -r, --remove       <opsi-product-id> ...   uninstall opsi packages
  -x, --extract      <opsi-package> ...      extract opsi packages to local directory
  -V, --version                              show program's version info and exit
  -h, --help                                 show this help message and exit

Options:
  -v, --verbose                           increase verbosity (can be used multiple times)
  -q, --quiet                             do not display any messages
  --log-file         <log-file>           path to debug log file
  --log-file-level   <log-file-level>     log file level (default 4)
  -d, --depots       <depots>             comma separated list of depot ids to process
                     all = all known depots
  -p, --properties   <mode>               mode for default product property values
                                 ask     = display dialog
                                 package = use defaults from package
                                 keep    = keep depot defaults (default)
  --purge-client-properties               remove product property states of the installed product(s)
  -f, --force                             force install/uninstall (use with extreme caution)
  -U, --update                            set action "update" on hosts where installation status is "installed"
  -S, --setup                             set action "setup" on hosts where installation status is "installed"
  -s, --setup-with-dependencies           set action "setup" on hosts where installation status is "installed" with dependencies
  -o, --overwrite                         overwrite existing package on upload even if size matches
  -n, --no-delta                          full package transfers on uploads (do not use librsync)
  -k, --keep-files                        do not delete client data dir on uninstall
  -t, --temp-dir     <path>               tempory directory for package install
  --max-transfers    <num>                maximum number of simultaneous uploads
                                             0 = unlimited (default)
  --max-bandwidth    <kbps>               maximum transfer rate for each transfer (in kilobytes per second)
                                             0 = unlimited (default)
  --new-product-id   <product-id>         Set a new product id when extracting opsi package or
                                          set a specific product ID during installation.
----


[[opsi-manual-configuration-tools-opsi-package-updater]]
==== Tool: 'opsi-package-updater'

The command line utility `opsi-package-updater` is designed to download and install comfortable opsi packages from one or more repositories or another opsi server.
Using opsi-package-updater makes it easy to keep the products on an opsi server up to date. It may be also used in a cronjob to keep depot server in sync with the primary server.

Repositories are the sources which will be used by the opsi-product-update to fetch new opsi packages.

Each repository can be configured in terms of access information and behaviour.

General configuration will be done at the configuration file `/etc/opsi/opsi-package-updater.conf`.


[[opsi-manual-configuration-tools-opsi-package-updater-usage]]
===== Usage

`--help` shows a small help.
`opsi-package-updater` works with different modes. Each brings it's own help with them.

[source, prompt]
----
# opsi-package-updater --help
usage: opsi-package-updater [-h] [--version] [--config CONFIGFILE]
                            [--verbose | --log-level {0,1,2,3,4,5,6,7,8,9}]
                            [--force-checksum-calculation]
                            [--repo repository_name]
                            {install,update,download,list} ...

Updater for local opsi products.

optional arguments:
  -h, --help            show this help message and exit
  --version, -V         show program's version number and exit
  --config CONFIGFILE, -c CONFIGFILE
                        Location of config file
  --verbose, -v         increase verbosity (can be used multiple times)
  --log-level {0,1,2,3,4,5,6,7,8,9}, -l {0,1,2,3,4,5,6,7,8,9}
                        Set the desired loglevel.
  --force-checksum-calculation
                        Force calculation of a checksum (MD5) for every
                        package. Default is to use existing checksums from the
                        .md5-file of a package if possible.
  --repo repository_name
                        Limit the actions the given repository.

Mode:
  {install,update,download,list}
    install             Install all downloadable packages from configured
                        repositories (ignores excludes)
    update              Update existing packages from repositories.
    download            Download packages from repositories. This will not
                        install packages.
    list                Listing information

Modes have their own options that can be viewed with MODE -h.

# opsi-package-updater download --help
usage: opsi-package-updater download [-h] [--force]
                                     [productID [productID ...]]

positional arguments:
  productID   Limit downloads to products with the given IDs.

optional arguments:
  -h, --help  show this help message and exit
  --force     Force the download of a product even though it would otherwise
              not be required.

# opsi-package-updater list --help
usage: opsi-package-updater list [-h]
                                 [--repos | --active-repos | --packages | --packages-and-installationstatus | --package-differences | --updatable-packages | --search-package text]

optional arguments:
  -h, --help            show this help message and exit
  --repos               Lists all repositories
  --active-repos        Lists all active repositories
  --packages, --products
                        Lists the repositories and the packages they provide.
  --packages-and-installationstatus, --products-and-installationstatus
                        Lists the repositories with their provided packages
                        and information about the local installation status.
  --package-differences, --product-differences
                        Lists packages where local and remote version are
                        different.
  --updatable-packages, --updatable-products
                        Lists packages that have updates in the remote
                        repositories.
  --search-package text, --search-product text
                        Search for a package with the given name.

----

There are some common options.

- `--verbose` increases the amount of shown messages. This can be given multiple times to increase verbosity. A specific log level can be given through `--log-level`. Both options only affect the output in the terminal.
- `--repo <name of a repository>` limits the actions to the given repository. Available repositories can be shown with `list --active-repos`.

The different modes result in different behaviour.
The modes `install`, `update` and `download` load packages from a repository, whereas `list` is used to show information.

The mode `install` installs new packages.
The mode `update` updates already installed packages.
Both modes require no further parameters.

Example: Installing all available packages from all repositories:

[source,prompt]
----
opsi-package-updater install
----

The modes `install` and `update` allow to limit the actions to specific products by handing over their ID.

Example: Updating the packages for the products 'firefox' and 'javavm':

[source,prompt]
----
opsi-package-updater -vv update firefox javavm
----

In combination with the `--repo` switch the package source can be limited.

Example: Installing the package for 'ubuntu' from the repository 'uib_linux':

[source,prompt]
----
opsi-package-updater -vv --repo uib_linux install ubuntu
----

The mode `download` allows to download packages without installing them afterwards.
The switch `--force` forces the download of a package even though this version is already installed on the server.

Through `list --active-repos` the active repositories are shown.
The information consists of name, address and if applicable the description of the repository.

Through `list --products` the available products per repository are shown.

To show the possible updates use `list --updatable-products`.
This only considers already installed products.
After that the update can be started through `update`.

[source,prompt]
----
opsi-package-updater list --updatable-packages
opsi-package-updater -v update
----


[[opsi-manual-configuration-tools-opsi-package-updater-repositories]]
===== Repository Configuration: Access

Repository configurations are to be found in `/etc/opsi/package-updater.repos.d/`.
You will find a commented template with all possible configuration options in there as `example.repo.template`.

There are two kinds of repositories - 'internet repositories' and 'opsi-server'.

*Internet Repositories*

Example: download.uib.de +
This are repositories which are configured by:

- 'baseURL' (z.B. http://download.uib.de)
- 'dirs' (a list of directories e.g. opsi4.0/produkte/essential)
- and for password protected repositories 'username' and 'password'
- as an alternative to password protected repositories, you can use certifcate authentification if the repository has this possibility. For that you need to configure 'authcertfile' and 'authkeyfile' with the full path to the clientcertificate file and its keyfile.

Access through a proxy can be configured if required.
To use a common proxy for all repositories configure it in `opsi-package-updater.conf`.
This requires at least opsi-utils 4.1.1.33.
All repositories without a separate proxy configuration will make use of it.


[source,configfile]
----
baseUrl = http://download.uib.de
dirs = opsi4.0/products/localboot
username =
password =
proxy =
----

*opsi-server*

A repository is of kind 'opsi-server' if the repository configuration has the ID of another opsi-server set at 'opsiDepotId'.

[source,configfile]
----
opsiDepotId = mainserver.my.lan
----

On a '{opsi-depotserver}' there is usually the central '{configserver}' set.
This results in `opsi-package-updater` fetching the packages from the directory `/var/lib/opsi/repository` of the given server.


[[opsi-manual-configuration-tools-opsi-package-updater-actions]]
===== Repository Configuration: Behaviour

For each repository you have to configure which actions to run:

* 'autoupdate': Newer versions of installed packages will be downloaded and installed

* 'autoinstall': Also packages which are not installed yet, will be downloaded and installed

* 'autoinstall': For all new installed packages and all clients on which these packages are installed the action request will be set to setup.

* 'onlyDownload': New packages are only downloaded and no further actions are done.
A common use case is to use this option together with notifications so that after the download of new packages a mail informs an administrator about the new packages and the administrator will manually install the new packages at a later time.

In addition it is possible to send all these clients a Wake-On-LAN signal to install the new software to the clients. Using the {opsi-product} 'shutdownwanted' you can make sure that the clients will be powered off after the installation.

* time window for autosetup: You can give time window which may be used to that client action requests to setup.

* Automatic WakeOnLan with shutdown: If there is new software Clients could be waked up and shutdown after installation automatically


[[opsi-manual-configuration-tools-opsi-admin-overview]]
==== Tools for opsi API access: opsi-admin & opsi interface page

opsi 3.0 introduced a python library which provides an API for opsi configuration.
The 'opsiconfd' provides this API as a web service that can be accessed in multiple ways.


[[opsi-manual-configuration-tools-opsi-interface-page]]
===== In the browser: opsi interface page

Calling 'https://<opsi-server>:4447/interface' in your browser gives you graphical interface to the '{opsi-webservice}'.
You have to login as a member of the group 'opsiadmin'.

.opsi config interface: Access to the web service via browser
image::opsi-webinterface2.png["opsi config interface: Access to the web service via browser", width=400]


[[opsi-manual-configuration-tools-opsi-admin]]
===== On the commandline: opsi-admin

At the command line 'opsi-admin' provides an interface to the opsi API.
There is a interactive mode and a non interactive mode for batch processing from within scripts.

The help option `opsi-admin --help` shows a list of available command line options:
[source,prompt]
----
$ opsi-admin --help

Usage: opsi-admin [options] [command] [args...]
Options:
  -h, --help           Display this text
  -V, --version        Show version and exit
  -u, --username       Username (default: current user)
  -p, --password       Password (default: prompt for password)
  -a, --address        URL of opsiconfd (default: https://localhost:4447/rpc)
      --opsirc         Path to the opsirc file to use (default: ~/.opsi.org/opsirc)
                       An opsirc file contains login credentials to the web API.
  -d, --direct         Do not use opsiconfd
      --no-depot       Do not use depotserver backend
  -l, --log-level      Set log level (default: 3)
                       0=nothing, 1=essential, 2=critical, 3=error, 4=warning
                       5=notice, 6=info, 7=debug, 8=debug2, 9=confidential
  -f, --log-file       Path to log file
  -i, --interactive    Start in interactive mode
  -c, --colorize       Colorize output
  -S, --simple-output  Simple output (only for scalars, lists)
  -s, --shell-output   Shell output
  -r, --raw-output     Raw output
  --exit-zero          Always exit with exit code 0.
----

´opsi-admin´ can use the opsi web service or directly operate on the data backend.
To work with the web service you have to provide the URL and also an 'username' and 'password'.
The name of the currently used user is used by default.
A different username can be supplied with `--username`.

For the use in scripts you don't want to passing the password as this might be
seen from different users via the process list.
In such cases it is a good idea to make use of an <<opsi-manual-configuration-tools-opsi-admin-opsirc,opsirc file>>.
Another alternative can be direct data access through the `-d` option.

`opsi-admin` has an interactive mode that can be started with `-i`.
This will usually be used with `-i` for colorised display and maybe with `-d`
for direct data access - the command to use is `opsi-admin -i -c -d` or short `opsi-admin -idc`.
In interactive mode you have input support with the TAB key.
After some input the TAB key you get a list or details of the data type of the next expected input.

The option `-s` or `-S` generates an output format which can be easily parsed by scripts.

There are some methods which are directly based on API-requests, and there are some 'tasks', which are a collection of function calls to do a more complex special job.


[[opsi-manual-configuration-tools-opsi-admin-opsirc]]
===== Usage of a connectionsettings file - opsirc

Since version 4.1.1.30 `opsi-admin` offers the possibility to save the
configuration for a connection to the webservice in a file.
This allows using the webservice without the need to hand over the
credentials on the commandline.

By default the search is expected to be at `~/.opsi.org/opsirc`.
With the option `--opsirc` the path to the used file can be changed.
This allows preparing multiple differentially configured files.

An 'opsirc' file has the following contents:
[source,ini]
----
address = https://seeing.the.ramp:4447/rpc
username = tony
password file = ~/.opsi.org/tonys_secret
----

Everything in an opsirc file is optional.
If the file is empty or does not exist default values will be used.

In the previous example the password is saved in the file `~/.opsi.org/tonys_secret`
and will be read from there.
This file contains only the password.

It is possible to state the password inside the opsirc file aswell:
[source,ini]
----
address = https://seeing.the.ramp:4447/rpc
username = tony
password = first900
----


[[opsi-manual-configuration-tools-opsi-admin-typical-usage]]
===== Typical use cases

[[opsi-manual-configuration-tools-opsi-admin-typical-usage-setup]]
.Set a product to setup for all clients which have this product installed

[source,prompt]
----
opsi-admin -d task setupWhereInstalled "softprod"
----


[[opsi-manual-configuration-tools-opsi-admin-typical-usage-clientlist]]
.List of all clients

[source,prompt]
----
opsi-admin -d method host_getIdents
----


[[opsi-manual-configuration-tools-opsi-admin-typical-usage-delete-client]]
.Client delete

[source,prompt]
----
opsi-admin -d method host_delete <clientname>
----

e.g.:

[source,prompt]
----
opsi-admin -d method host_delete "pxevm.uib.local"
----


[[opsi-manual-configuration-tools-opsi-admin-typical-usage-create-client]]
.Create client

[source,prompt]
----
opsi-admin -d method host_createOpsiClient <full qualified clientname>
----

e.g.:

[source,prompt]
----
opsi-admin -d method host_createOpsiClient "pxevm.uib.local"
----


[[opsi-manual-configuration-tools-opsi-admin-typical-usage-setProductActionRequest]]
.Set action request

[source,prompt]
----
opsi-admin -d method setProductActionRequest <productId> <clientId> <actionRequest>
----

e.g.:

[source,prompt]
----
opsi-admin -d method setProductActionRequest win7 pxevm.uib.local setup
----


[[opsi-manual-configuration-tools-opsi-admin-typical-usage-setHostDescription]]
.Attach client description

[source,prompt]
----
opsi-admin -d method setHostDescription "dpvm02.uib.local" "virtual client"
----

[[opsi-manual-configuration-tools-opsi-admin-typical-usage-list-host-ids]]
.Listing the IDs of all clients

This uses the option `-S` so that every client is on it's own line.
Through filtering for the type `OpsiClient` we avoid displaying the IDs of servers.

The output can easily be used in other programs or calls.

[source,prompt]
----
opsi-admin -dS method host_getIdents '' '{"type": "OpsiClient"}'
----

[[opsi-manual-configuration-tools-opsi-admin-typical-list-installed-products]]
.Listing the products installed on clients

[source,prompt]
----
opsi-admin -d method productOnClient_getObjects '["productVersion", "packageVersion", "installationStatus"]' '{"installationStatus": "installed"}'
----

[[opsi-manual-configuration-tools-opsi-admin-typical-setPcpatchPassword]]
.set pcpatch password

[source,prompt]
----
opsi-admin -d task setPcpatchPassword
----

Set the password of user pcpatch for Unix, samba and opsi.


[[opsi-manual-configuration-tools-serverprocesses]]
==== Server processes: opsiconfd and opsipxeconfd

The 'opsipxeconfd' provides the 'named pipes' in the `tftpboot` directories. which are used to control the PXE boot process.

The configuration file is `/etc/opsi/opsipxeconfd.conf`

The log file is `/var/log/opsi/opsipxeconfd.log`.

The 'opsiconfd' provides the opsi API as JSON web service and have a lot of other important tasks. Therefore the 'opsiconfd' is the central opsi service and does all the communication to the clients.

Regarding this central rule, a tool to monitor this process gives a lot of information about load and possible problems. This tool is the 'opsiconfd' info page.

[[opsi-manual-configuration-tools-serverprocesses-info]]
===== 'opsiconfd' monitoring: opsiconfd info

Using the web address https://<opsi-server>:4447/info you will get a graphical chart of 'opsiconfd' load and cpu/memory usage in the last hour/day/month/year. This information is completed by tabulary information to the actual tasks and sessions.

.opsiconfd info: opsiconfd values from the last hour
image::opsiconfd-info-hour.png["opsiconfd info: opsiconfd values from the last hour", width="120mm"]

.opsiconfd info: opsiconfd values from the last day
image::opsiconfd-info-day.png["opsiconfd info: opsiconfd values from the last day", width="120mm"]

[[opsi-manual-configuration-tools-serverprocess-tftpd]]
==== Server process: opsi-tftpd-hpa

The opsi-tftpd-hpa bases on the standard tftpd-hpa with the additional feature to handle 'named pipes'.

By default the opsi-tftpd-hpa is configured to run with an own systemd service file.

As the packages is sinstalled by the installer, the package features a simple level of verbosity. To change this level and get additional information one has to do the following:

[source,prompt]
----
# systemctl edit --full opsi-tftpd-hpa.service
----
The parameter '-v' has to be replaced by '--verbosity 7'. Afterwards the service needs a restart.
[source,prompt]
----
# service opsi-tftpd-hpa restart
----

CAUTION: on Debian 8 the edit operation is not available. However there is a workaround:
[source,prompt]
----
# cp /lib/systemd/system/opsi-tftpd-hpa.service /etc/systemd/system/opsi-tftpd-hpa.service
# vi /etc/systemd/system/opsi-tftpd-hpa.service
# systemctl daemon-reload
# service opsi-tftpd-hpa restart
----
