[[opsi-setup-detector-use-single-analyze-and-create]]
===== Opsi-setup-detector: Analyze single setup file and create an opsi package

The workflow is here described using `Analyze single setup file and create an opsi package` as an example.

.opsi-setup-detector Start
image::osd_page_start_en.png["Startpage",width=500]

After you selected the task, you will get a file selection dialog.
Selct now the setup file that has to be analyzed.
The analyze will start directly after the selection is done.

.opsi-setup-detector analysis
image::osd_page_analyze_en.png["Analysis",width=500]

If the anlyze found no result, you will get here a `Sorry unknown Installer`.
If we have a successful analyze, you will see the result page.

.opsi-setup-detector Result of the analysis
image::osd_page_setup1_en.png["Result of analysis",width=500]

* *Detected Setup Type:* Type of detected Installer

* *MST allowed:*

* *Link* with information about the installer

* *Setup file:* Path and name of the analyzed setup file

* *MST file:* For MSI installers or installers which contain MSI, an MST file can be specified here which will be integrated into the MSI call.

* *MsiId:* For MSI installers or installers that contain MSI in the form of product code

* *Software version:* The version of the software to be installed if determinable.

* *Setup file size MB:* Size of the setup file in MB

* *Required space MB:* This value is an estimate of six times the size of the setup file and can be adjusted if necessary

* *InstallDir:* As far as detected the directory where the software will be installed.

* *Unattended installation command:* The determined command for a non-interactive installation.

* *Unattended deinstallation command:* The determined command for a non-interactive deinstallation.

* *Deinstallations program:* The determined deinstallations program

The values determined here can now be corrected or supplemented if necessary.
The button `Next Step` leads to the first page of the product configuration.
The metadata of the opsi product to be created is entered here.

CAUTION: The values determined here can be incorrect and are probably incomplete! +
After an initial installation, you should definitely check the values of *InstallDir*,
*Check deinstallation program* and *software version* and adjust them in your script if necessary.

[[opsi-setup-detector-product-configuration1]]
===== Opsi-setup-detector: Product configuration 1

.opsi-setup-detector Product configuration 1
image::osd_page_product1_en.png["Product configuration 1",width=500]

* *opsi Product ID:* this is the name of the opsi package to be generated and is generated from the product name below, where spaces and other invalid characters are replaced by a '-'. The proposed opsi Product ID can of course be changed.

* *Product Name:* the name of the software to install. This may have to be corrected manually.

* *Product Version:* The version number determined from the name of the setup file must probably be corrected manually. It may only contain numbers and periods, since it's used for the versioning of the opsi package.

* *Description:* In this field the product name is given as default and should be completed with further hints, which are then set as product description of the opsi package.

* *License required:* If this checkbox is set, '$LicenseRequired$=true' will be set when patching the opsiscript.

[[opsi-setup-detector-product-configuration-priority_dependecy]]
===== Opsi-setup-detector: Priorität und Abhängigkeiten

.opsi-setup-detector Product configuration 2
image::osd_page_product2_en.png["Product configuration 2",width=500]

*Für normale Anwendungssoftware müssen Sie hier nichts tun,
da die Voreinstellungen 'passen'. Sie können auf den Button `Nächster Schritt` drücken.*

Ansonsten sei hier erläutert, welche Einstellungen hier möglich sind:

Priorität:: beeinflusst die Installationsreihenfolge. *Empfohlen für Anwendungssoftware: 0* +
Mögliche Werte liegen zwischen 100 (ganz am Anfang) und -100 (ganz am Ende). Existieren auch Produktabhängigkeiten, so beeinflussen diese zusätzlich die Installationsreihenfolge. 

.Abhängigkeiten

Hier können Abhängigkeiten zwischen Podukten definiert werden.

.opsi-setup-detector Dependency Editor
image::osd_dependency_editor.png["Dependency Editor",width=200]

Productid:: Productid (Bezeichner) des Produkts zu dem eine Abhängigkeit besteht.

Abhängigkeits Modus:: Sie können entweder die *Aktion* +setup+ anfordern oder (siehe unten) den *Status* (+installed+). 

Aktion oder Status:: Für *Status*: Status den das Produkt, zu dem eine Abhängigkeit besteht, haben soll (+installed+). Liegt ein anderer Status vor, so wird das Produkt auf +setup+ gestellt. +
Für *Aktion*: Aktionsanforderung welche bei dem Produkt, zu dem eine Abhängigkeit besteht, gesetzt werden soll (+setup+)

Abhängigkeits typ:: Installationsreihenfolge. Wenn das Produkt, zu dem eine Abhängigkeit besteht, installiert sein muss bevor mit der Installation des aktuellen Produkts begonnen werden kann, dann ist dies +before+. Muss es nach dem aktuellen Produkt installiert werden so ist dies +after+. Ist die Reihenfolge egal so muss hier nichts eingetragen werden.

*Hinweis:*

Leider gibt es derzeit keinen generischen Mechanismus für Deinstallations-Produktabhängigkeiten. Zuverlässig ist der ProductDependency-Mechanismus nur für action: setup und die hierbei zu triggernden (before- oder after-) setup Aktionen und installed Status. Ein requiredAction: uninstall führt leider definitiv zu Fehlern.

*Noch ein Hinweis:*

Die tatsächliche Installationsreihenfolge ermittelt sich aus einer Kombination von Produktabhängigkeiten und Produktpriorisierung. Details hierzu finden Sie im opsi-Handbuch im Kapitel 'Beeinflussung der Installationsreihenfolge durch Prioritäten und Produktabhängigkeiten'

[[opsi-setup-detector-product-configuration-properties]]
===== Opsi-setup-detector: Poperties

Hier können veränderbare Eigenschaften (Produktvariablen) für das Produkt definiert werden.

.opsi-setup-detector Property Editor
image::osd_property-editor.png["Property Editor",width=200]



[cols="10,20,20"]
|==========================
|  Feld / Funktion  |  Beschreibung  |  Hinweise
|  Property Name  |  Name der Produktvariable  |  
Dieser Bezeichner wird in der Produktkonfiguration im opsi-configed angezeigt und ist innerhalb der Skripte mit der Funktion `GetProductProperty` auslesbar.
|  Property Type  |  Variablentyp  |  Mögliche Werte: `Text` / bool
|  Multivalue  |  Bestimmt, ob die Produktvariable nur genau einen oder mehrere Werte annehmen kann  |  Nur bei Typ `Text` verfügbar
|  Editierbar  |  Bestimmt, ob die Vorgabewerte mit neuen oder zusätzlichen Werten überschrieben werden können oder nicht  |  Nur bei Typ `Text` verfügbar
|  Beschreibung  |  Beschreibung der Variablenfunktion  |  Wird im opsi-configed als Tooltip angezeigt
|  Possible Werte  |  Komma-separiert Liste der möglichen Eingabewerte  |  
Falls Editierbar auf “True” gesetzt wurde, kann die Liste später innerhalb von opsi-configed ergänzt werden. +
Nur bei Typ `Text` verfügbar
|  Default Wert  |  Vorgabewert  |  Auswahlliste; 
Nur bei Typ `Text` verfügbar: Freitextfeld. 
Nur bei Typ Multivalue verfügbar: Mehrfachauswahl
|==========================


.opsi-setup-detector Produktkonfiguration 3 (Icon)
image::osd_page_producticon_de.png["Produktkonfiguration 3 (Icon)",width=500]

Hier kann ein Icon für die Anzeige während der Installation ausgewählt werden oder Sie übernehmen mit `Nächster Schritt` das DefaultIcon (Zahnrad) und wechseln zum nächsten Reiter.. +


Um ein anderes Icon auszuwählen wählen Sie über den Button `Öffne Icon Verzeichnis` in Verzeichnis aus in dem Sie Icons erwarten. Als Vorauswahl bekommen Sie einbeim `opsi-setup-detector` mitgeliefertes Verzeichnis von 'open source' Icons: 128x128. Wählen Sie ein Unterverzeichnis und die Icons werden angezeigt. +
Nun können Sie aus der Anzeige ein Icon auswählen.

Nachdem die Produktkonfiguration vollständig ist, kann nun das Produkt erzeugt werden.

[[opsi-setup-detector-product-create]]
===== Opsi-setup-detector: Produkt erzeugen


.opsi-setup-detector create product
image::osd_page_create_en.png["Create product",width=500]

* 'Path to opsi-workbench' is a drive letter or UNC path where the share `opsi_workbench` of your opsi-server is mounted.
* For security reasons, an opsi package can only be rebuilt if it doesn't exist already. If an existing package is to be overwritten, the directory must first be deleted from the opsi Workbench.

To the left of the button 'Create opsi package' there are three possible options, which refer to the function of the button:

Create Mode' is a selection area where you can specify what happens when creating the package:

* `Create opsi product files` creates the directory tree for the new opsi package on the selected `opsi workbench` if it does not already exist. The files required for the package will be created or copied.

* `Create opsi product files and build package` performs the operations described in the first point. +
Additionally, the `opsi Package Builder` is called to create the opsi package from the created directory tree. The exact processes are determined by the selection field `Tree mode`:

** `Only build` starts the `opsi Package Builder` without interactive GUI, creates an opsi package from the directory tree via server command `opsi-makepackage` and terminates the `opsi Package Builder` after work is done.

** `build and install` starts the `opsi Package Builder` without interactive GUI, creates from the directory tree via server command `opsi-makepackage` an opsi package installs the package via server command `opsi-package-manager` and finishes the `opsi Package Builder` after the work is done.

* `Create opsi product files and start interactive package builder` performs the operations listed in the first item. +
Additionally the `opsi Package Builder` is called interactively. +
You have to quit it yourself to return to the `opsi-setup-detector`.
For installation, configuration and operation of the community project 'opsi Package Builder' check https://forum.opsi.org/viewforum.php?f=22

* `Create opsi package` is the button that initiates the package creation.
For security reasons, an opsi package can only be rebuilt if it doesn't exist already. If a package with this name already exists, you will be asked if the existing directory may be deleted.


################
[[opsi-setup-detector-use-single-analyze-and-create]]
===== Opsi-setup-detector: Analysiere einzelne Setup Datei und erzeuge ein opsi Paket 

Im folgenden wird der Ablauf anhand des Punktes `Analysiere einzelne Setup Datei und erzeuge ein opsi Paket` erläutert.

.opsi-setup-detector Start
image::osd_page_start_de.png["Startpage",width=500]

Nach der Auswahl der Aufgabe erscheint ein Dateiauswahl-Dialog zur Auswahl der zu analysierenden Setup Datei. Nach der Auswahl beginnt direkt die Analyse.

[[opsi-setup-detector-use-single-analyze]]
===== Opsi-setup-detector: Analyse


.opsi-setup-detector Analyse
image::osd_page_analyze_de.png["Analyse",width=500]

War die Analyse nicht erfolgreich, endet sie hier mit `Sorry unknown Installer`.
Bei einer erfolgreichen Analyse wird direkt zum Ergebnis gewechselt.

.opsi-setup-detector Ergebnis der Analyse
image::osd_page_setup1_de.png["Ergebnis der Analyse",width=500]

* *Erkannter Setup Typ:* Typ des erkannten Installer

* *MST allowed:*

* *Link* mit Infos zum Installer

* *Setup Datei:*  Pfad und Name der analysierten Setup-Datei

* *MST Datei:*  Bei MSI-Installern oder Installern welche MSI enthalten, kann hier eine MST-Datei angegeben werden welche in den MSI Aufruf integriert wird.

* *MsiId:*  Bei MSI-Installern oder Installern welche MSI enthalten, der MSI-Produktcode

* *Software Version:*  Die Version der zu installierenden Software soweit ermittelbar

* *Setup Datei Größe MB:*  Größe der Setup Datei in MB

* *Benötigter Platz MB:*  Dieser Wert ist eine Schätzung aus sechsmal die Größe der Setup-Datei und kann gegebenenfalls angepasst werden

* *InstallDir:*  Soweit erkannt das Verzeichnis in das die Software installiert werden wird

* *Unattended Installationskommando:*  Das ermittelte Kommando zu einer nicht interaktiven Installation

* *Unattended Deinstallationskommando:*  Das ermittelte Kommando zu einer nicht interaktiven Deinstallation

* *Deinstallations Programm:*  Das ermittelte Deinstallations Programm

Die hier ermittelten Werte können nun bei Bedarf korrigiert oder ergänzt werden.
Der Button `Nächster Schritt` führt zur ersten Seite der Produktkonfiguration.
Hier werden die Metadaten des zu erstellenden opsi Produktes eingegeben.

CAUTION: Die hier ermittelten Werte können falsch sein und sind wahrscheinlich unvollständig ! +
Nach einer ersten Installation sollten Sie unbedingt die Werte von *InstallDir*, 
*Deinstallations Programm* und *Software Version* überprüfen und gegebenenfalls in Ihrem Script anpassen.

[[opsi-setup-detector-product-configuration1]]
===== Opsi-setup-detector: Produktkonfiguration 1

.opsi-setup-detector Produktkonfiguration 1
image::osd_page_product1_de.png["Produktkonfiguration 1",width=500]

* *opsi Product ID:* dies ist der Name des zu erzeugenden opsi Paketes und wird aus dem weiter unten stehenden Produkt Namen erzeugt, wobei Leerzeichen und andere ungültigen Zeichen durch ein '-' ersetzt werden. Die vorgeschlagene opsi Product ID kann natürlich geändert werden.

* *Produkt Name:* der Name der zu installierenden Software. Dieser muss evtl. händig korrigiert werden

* *Produkt Version:* die aus dem Name der Setup-Datei ermittelte Versionsnummer muss wahrscheinlich händig korrigiert werden. Sie darf nur Ziffern und Punkte enthalten, da sie für die Versionierung des opsi Paketes verwendet wird.

* *Beschreibung:* In diesem Feld wird als Vorgabe der Produkt Name vorgegeben und sollte mit weiteren Hinweisen ergänzt werden, die dann als Produktbeschreibung des opsi Paketes gesetzt werden.

* *Lizenz pflichtig:* Wenn dieses Häkchen gesetzt wird, wird beim Patchen des opsiscripts '$LicenseRequired$=true' gesetzt.

[[opsi-setup-detector-product-configuration-priority_dependecy]]
===== Opsi-setup-detector: Priorität und Abhängigkeiten

.opsi-setup-detector Produktkonfiguration 2
image::osd_page_product2_de.png["Produktkonfiguration 2",width=500]

*Für normale Anwendungssoftware müssen Sie hier nichts tun,
da die Voreinstellungen 'passen'. Sie können auf den Button `Nächster Schritt` drücken.*

Ansonsten sei hier erläutert, welche Einstellungen hier möglich sind:

Priorität:: beeinflusst die Installationsreihenfolge. *Empfohlen für Anwendungssoftware: 0* +
Mögliche Werte liegen zwischen 100 (ganz am Anfang) und -100 (ganz am Ende). Existieren auch Produktabhängigkeiten, so beeinflussen diese zusätzlich die Installationsreihenfolge. 

.Abhängigkeiten

Hier können Abhängigkeiten zwischen Podukten definiert werden.

.opsi-setup-detector Dependency Editor
image::osd_dependency_editor.png["Dependency Editor",width=200]

Productid:: Productid (Bezeichner) des Produkts zu dem eine Abhängigkeit besteht.

Abhängigkeits Modus:: Sie können entweder die *Aktion* +setup+ anfordern oder (siehe unten) den *Status* (+installed+). 

Aktion oder Status:: Für *Status*: Status den das Produkt, zu dem eine Abhängigkeit besteht, haben soll (+installed+). Liegt ein anderer Status vor, so wird das Produkt auf +setup+ gestellt. +
Für *Aktion*: Aktionsanforderung welche bei dem Produkt, zu dem eine Abhängigkeit besteht, gesetzt werden soll (+setup+)

Abhängigkeits typ:: Installationsreihenfolge. Wenn das Produkt, zu dem eine Abhängigkeit besteht, installiert sein muss bevor mit der Installation des aktuellen Produkts begonnen werden kann, dann ist dies +before+. Muss es nach dem aktuellen Produkt installiert werden so ist dies +after+. Ist die Reihenfolge egal so muss hier nichts eingetragen werden.

*Hinweis:*

Leider gibt es derzeit keinen generischen Mechanismus für Deinstallations-Produktabhängigkeiten. Zuverlässig ist der ProductDependency-Mechanismus nur für action: setup und die hierbei zu triggernden (before- oder after-) setup Aktionen und installed Status. Ein requiredAction: uninstall führt leider definitiv zu Fehlern.

*Noch ein Hinweis:*

Die tatsächliche Installationsreihenfolge ermittelt sich aus einer Kombination von Produktabhängigkeiten und Produktpriorisierung. Details hierzu finden Sie im opsi-Handbuch im Kapitel 'Beeinflussung der Installationsreihenfolge durch Prioritäten und Produktabhängigkeiten'

[[opsi-setup-detector-product-configuration-properties]]
===== Opsi-setup-detector: Poperties

Hier können veränderbare Eigenschaften (Produktvariablen) für das Produkt definiert werden.

.opsi-setup-detector Property Editor
image::osd_property-editor.png["Property Editor",width=200]



[cols="10,20,20"]
|==========================
|  Feld / Funktion  |  Beschreibung  |  Hinweise
|  Property Name  |  Name der Produktvariable  |  
Dieser Bezeichner wird in der Produktkonfiguration im opsi-configed angezeigt und ist innerhalb der Skripte mit der Funktion `GetProductProperty` auslesbar.
|  Property Type  |  Variablentyp  |  Mögliche Werte: `Text` / bool
|  Multivalue  |  Bestimmt, ob die Produktvariable nur genau einen oder mehrere Werte annehmen kann  |  Nur bei Typ `Text` verfügbar
|  Editierbar  |  Bestimmt, ob die Vorgabewerte mit neuen oder zusätzlichen Werten überschrieben werden können oder nicht  |  Nur bei Typ `Text` verfügbar
|  Beschreibung  |  Beschreibung der Variablenfunktion  |  Wird im opsi-configed als Tooltip angezeigt
|  Possible Werte  |  Komma-separiert Liste der möglichen Eingabewerte  |  
Falls Editierbar auf “True” gesetzt wurde, kann die Liste später innerhalb von opsi-configed ergänzt werden. +
Nur bei Typ `Text` verfügbar
|  Default Wert  |  Vorgabewert  |  Auswahlliste; 
Nur bei Typ `Text` verfügbar: Freitextfeld. 
Nur bei Typ Multivalue verfügbar: Mehrfachauswahl
|==========================


.opsi-setup-detector Produktkonfiguration 3 (Icon)
image::osd_page_producticon_de.png["Produktkonfiguration 3 (Icon)",width=500]

Hier kann ein Icon für die Anzeige während der Installation ausgewählt werden oder Sie übernehmen mit `Nächster Schritt` das DefaultIcon (Zahnrad) und wechseln zum nächsten Reiter.. +


Um ein anderes Icon auszuwählen wählen Sie über den Button `Öffne Icon Verzeichnis` in Verzeichnis aus in dem Sie Icons erwarten. Als Vorauswahl bekommen Sie einbeim `opsi-setup-detector` mitgeliefertes Verzeichnis von 'open source' Icons: 128x128. Wählen Sie ein Unterverzeichnis und die Icons werden angezeigt. +
Nun können Sie aus der Anzeige ein Icon auswählen.

Nachdem die Produktkonfiguration vollständig ist, kann nun das Produkt erzeugt werden.

[[opsi-setup-detector-product-create]]
===== Opsi-setup-detector: Produkt erzeugen


.opsi-setup-detector Produkt erzeugen
image::osd_page_create_de.png["Produkt erzeugen",width=500]

* 'Pfad zur opsi-workbench' ist ein Laufwerksbuchstabe oder UNC Pfad auf dem der share `opsi_workbench` Ihres opsi-servers gemounted ist.

* aus Sicherheitsgründen kann ein opsi Paket nur dann neu erzeugt werden, wenn es noch nicht vorhanden ist. Falls ein bestehendes Paket überschrieben werden soll, muss zuerst das Verzeichnis von der opsi Workbench gelöscht werden.

* Links neben dem Button 'Erzeuge opsi Paket' befinden sich drei mögliche Auswahl Optionen, die sich auf die Funktion des Buttons beziehen:

* `Erstellungs-Modus` ist ein Auswahlbereich bei dem die Vorgänge bei der Paketerstellung bestimmt werden können:

* `Erstelle opsi Produkt Dateien` erzeugt falls noch nicht vorhanden, den Verzeichnisbaum für das neue opsi Paket auf der gewählten `opsi-Workbench`. Die für das Pakte benötigten Dateien werden erzeugt bzw. kopiert.

* `Erstelle opsi Produkt Dateien und baue opsi Paket` führt die im ersten Punkt angeführten Vorgänge durch. +
Zusätzlich wird der `{opsi-package-builder}` aufgerufen um aus dem erstellen Verzeichnisbaum das opsi-Paket zu erstellen. Die genauen Abläufe werden dabei durch das Auswahlfeld `Baumodus` bestimmt:

** `nur bauen` startet den `{opsi-package-builder}` ohne interaktive GUI, erstellt aus dem Verzeichnisbaum per Server Befehl `opsi-makepackage` ein opsi Paket und beendet den `{opsi-package-builder}` nach getaner Arbeit wieder.

** `bauen und installieren` startet den `{opsi-package-builder}` ohne interaktive GUI, erstellt aus dem Verzeichnisbaum per Server Befehl `opsi-makepackage` ein opsi Paket installiert das Paket per Server Befehl `opsi-package-manager` und beendet den `{opsi-package-builder}` nach getaner Arbeit wieder.

* `Erstelle opsi Produkt Dateien und starte interaktiven Packagebuilder` führt die im ersten Punkt angeführten Vorgänge durch. +
Zusätzlich wird der `{opsi-package-builder}` interaktiv aufgerufen. +
Sie müssen diesen selbst beenden um zu dem `opsi-setup-detector` zurückzukehren
Zu Installation, Konfiguration und Bedienung des Community Projektes '{opsi-package-builder}' siehe https://forum.opsi.org/viewforum.php?f=22

* `opsi-Paket erstellen` ist der Button welcher die Paketerstellung veranlasst.
Aus Sicherheitsgründen kann ein opsi Paket nur dann neu erzeugt werden, wenn es noch nicht vorhanden ist. Ist bereits ein Paket mit diesem Namen vorhanden, so erscheint eine Rückfrage ob das vorhandene Verzeichnis gelöscht werden darf.
