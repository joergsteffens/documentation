////
; Copyright (c) uib gmbh (www.uib.de)
; This documentation is owned by uib
; Until we found a better license:
; All rights reserved.
; credits: http://www.opsi.org/credits/
////

:Author:    uib gmbh
:Email:     info@uib.de
:Date:      30.06.2015
:Revision:  1.1
:toclevels: 6


include::../common/opsi_terms.asciidoc[]

[[opsi-on-shutdown]]
=== opsi Installation on Shutdown (free)

[[opsi-on-shutdown-introduction]]
==== Introduction

Usually the client installation of opsi software packages starts when the client boots. So the user has to wait for the installation to finish, before the user login is granted. So it might be useful to do most of the software installation when the client is going to shut down.

The opsi module for installation on shutdown provides this feature. Selected clients can be configured to perform the installation on shutdown.

[[opsi-on-shutdown-prerequires]]
==== Preconditions for Installation on Shutdown

The opsi module Installation on Shutdown can be used for clients with *Windows XP* or above. The required components are part of the opsi package '{opsi-client-agent}'.

The package '{opsi-client-agent}' must be version 4.0.2.3-2 or above with an `opsiclientd` version 4.0.75 or above.

The **cofunding of this project has been finished,** and thus with opsi version 4.0.5.4-2 it has been added to the core of the free opsi system and doesn't require a modules file anymore. Older versions of opsi-client-agent still do require a modules file. For further details on cofunding projects see <<opsi-manual-modules>> and the weblink
link:https://www.opsi.org/product/extensions-of-opsi/[opsi cofunding projects].

Some technical restrictions and constraints are the following cases:

* WAN extension: the Installation on Shutdown module currently is not available for clients that run also the WAN extension. Running the WAN extension on a client under some conditions requires to use the local configuration files, which interferes with the state handling of the installation on shutdown mechanism.

* Group Policies: part of the mechanism for Installation on Shutdown is based on shutdown scripts per Local Group Policy. Other Group Policies might override these local configurations. In this case, the required configuration for running this shutdown scripts should be included in your Group Policies mechanism. See <<opsi-on-shutdown-concept-shutdownscript>> for the required configurations.

* If the install on shutdown has been triggered by a shutdown or a reboot, the Windows API doesn't allow to convert a shutdown into a reboot (or vice versa). In case of a shutdown, the installation of any product, that require a reboot, will continue at the next startup of the client.

* Windows Home Edition: Windows Home does not provide the required Local Group Policy shutdown script mechanism. Therefore Installation on Shutdown cannot be used for Windows Home Edition.

* Windows 2000: For Windows 2000 clients the maximum timeout for shutdown scripts is 10 minutes. After 10 minutes the installation is aborted by the system. Therefore Installation on Shutdown cannot be used for Windows 2000 clients.


[[opsi-on-shutdown-activate]]
==== Activating Installation on Shutdown

The required components for Installation on Shutdown are part of the current `opsi-client-agent` package. Since opsi version 4.0.5.4-2 the `modules` file is not required for the install on shutdown.

The Installation on Shutdown can be configured for suitable clients (see <<opsi-on-shutdown-prerequires>>) simply by setting the `opsi-client-agent` product property `on_shutdown_install=on` and setting the action request for the `opsi-client-agent` to `update` or `setup`.

That is everything. The rest of the configurations are done by the `opsi-client-agent` package during update / setup.

Just in case client group policies are already applied, there might be a conflict with the local opsi client group policy setting. In case of such a conflict, the opsi shutdown script group policy entries of the opsi-client-agent package should be disabled (on_shutdown_install_set_policy = off) and instead be added to your local group policy administration, see
<<opsi-on-shutdown-concept-shutdownscript>>.

The Installation on Shutdown is done in addition to the Installation at Startup. Usually this is the best way to ensure that the clients always have the current security updates installed, even if the client was off for a long time (when the user was on holiday for instance).
If required, the standard Installation on Startup can be disabled, see <<opsi-on-shutdown-config>>. Installations in progress are continued anyway, triggered by the precondition `installation_pending`.

The Windows system during system shutdown does not distinguish shutdown from reboot. The Installation on Shutdown is started in both cases and it is not possible, to distinguish them during the installation process. Also the Windows API does not allow to transform a system shutdown into a reboot (or vice versa). So in case of a system shutdown, further installations are continued at the next system startup.


[[opsi-on-shutdown-concept]]
==== Technical Concept

The following explanations are conceived to bring understanding on the technical design and the interactions of the components in case of special configurations or error states. Usually all of the required configurations are done by the `opsi-client-agent` package.

[[opsi-on-shutdown-concept-overview]]
===== Overview

The Installation on Shutdown module is based on several system components. A major part of it, is the Windows shutdown script mechanism per Local Group Policy. Shutdown scripts allow to run tasks at shutdown when the user is logged off already, but all the system services are still available.

The shutdown script performs an opsi task, which triggers the opsi system service '{opsiclientd}' to start the installation process and waits for the task to end. So the system waits for the installation process to finish and then shuts down. During the shutdown handling, the Windows system does not distinguish shutdown from reboot, so the installation is triggered in either case.

The opsi client service '{opsiclientd}' is configured to process the action `on_shutdown`, which starts the installation process. In case of required reboots, the precondition `installation_pending` allows the process control. If during an installation a reboot is required before continuing the installation, the precondition `installation_pending` continues the installation at the next system startup (even if installation at `gui_startup` is disabled). During the state of `installation_pending`, no further Installations on Shutdown are triggered, otherwise there would be no reboot between Installation on Startup and Installation on Shutdown. So until the current installation is completed, the Installation on Shutdown is suppressed by the setting `event_on_shutdown{installation_pending}`.

The following chapter gives some further details on the Installation on Shutdown.

[[opsi-on-shutdown-concept-shutdownscript]]
===== Installing by shutdown script

By special registry entries, the Local Group Policy is configured to perform an opsi shutdown script, which triggers the installation process. The registry entries used by `opsi-client-agent` are the same as the ones done by the Group Policy-Editor `gpedit.msc`.

This is how to configure the shutdown script by using the Group Policy-Editor `gpedit.msc`:

* Local Computer Policy
* Computer Configuration
* Windows Settings
* Scripts (Startup/Shutdown)
* Shutdown
* Scripts - Add - Browse
* C:\Programs Files\opsi.org\opsi-client-agent\on_shutdown\doinstall32.cmd (or doinstall64.cmd for 64Bit systems)

To configure the system to wait for the completion of the installation process, the maximum waittime is set to infinite (0 seconds):

* Administrative Templates
* System - Scripts
* Maximum Waittime for Group Policy scripts
* Setting - Enabled - Seconds: 0

The opsi shutdown script `doinstall32.cmd` / `doinstall64.cmd` changes the working directory and triggers the 'on_shutdown' event:
[source,prompt]
----
echo Start opsi product installation ...
cd "%ProgramFiles%\opsi.org\opsi-client-agent\on_shutdown"
opsiclientd_event_starter.exe --event=on_shutdown
----

For 64Bit systems:
[source,prompt]
----
echo Start opsi product installation ...
cd "%ProgramFiles(x86)%\opsi.org\opsi-client-agent\on_shutdown"
opsiclientd_event_starter.exe --event=on_shutdown
----

The `opsiclientd_event_starter` triggers the installation and waits for completion, so the system shutdown is delayed while the `opsiclientd_event_starter` task is running.

[[opsi-on-shutdown-concept-regedit]]
===== Registry Entries for executing the shutdown script

These registry entries are set by the `opsi-client-agent` package and start the execution of the shutdown script 'doinstall32.cmd' on WinXP / 32Bit clients. For 64Bit-systems the script name is `doinstall64.cmd` (instead of `doinstall32.cmd`).

[source,prompt]
----
[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Group Policy\State\Machine\Scripts\Shutdown\0]
"GPO-ID"="LocalGPO"
"SOM-ID"="Local"
"FileSysPath"="C:\\WINDOWS\\System32\\GroupPolicy\\Machine"
"DisplayName"="opsi shutdown install policy"
"GPOName"="opsi shutdown install policy"

[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Group Policy\State\Machine\Scripts\Shutdown\0\0]
"Script"="C:\\Programme\\opsi.org\\opsi-client-agent\\on_shutdown\\doinstall32.cmd"
"Parameters"=""
"ExecTime"=hex(b):00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00

[HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows\System\Scripts\Shutdown\0]
"GPO-ID"="LocalGPO"
"SOM-ID"="Local"
"FileSysPath"="C:\\WINDOWS\\System32\\GroupPolicy\\Machine"
"DisplayName"="opsi shutdown install policy"
"GPOName"="opsi shutdown install policy"

[HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows\System\Scripts\Shutdown\0\0]
"Script"="C:\\Programme\\opsi.org\\opsi-client-agent\\on_shutdown\\doinstall32.cmd"
"Parameters"=""
"ExecTime"=hex:00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00

[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\policies\system]
"MaxGPOScriptWait"=dword:00000000
----

These are the registry entries for Win6 64Bit (Vista / Win7 / Win8):

[source,prompt]
----
[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Group Policy\State\Machine\Scripts\Shutdown\0]
"GPO-ID"="LocalGPO"
"SOM-ID"="Local"
"FileSysPath"="C:\\WINDOWS\\System32\\GroupPolicy\\Machine"
"DisplayName"="opsi shutdown install policy"
"GPOName"="opsi shutdown install policy"

[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Group Policy\State\Machine\Scripts\Shutdown\0\0]
"Script"="C:\\Programme\\opsi.org\\opsi-client-agent\\on_shutdown\\doinstall32.cmd"
"Parameters"=""
"ExecTime"=hex(b):00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00

[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Group Policy\Scripts\Shutdown\0]
"GPO-ID"="LocalGPO"
"SOM-ID"="Local"
"FileSysPath"="C:\\Windows\\System32\\GroupPolicy\\Machine"
"DisplayName"="opsi shutdown install policy"
"GPOName"="opsi shutdown install policy"
"PSScriptOrder"=dword:00000001

[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Group Policy\Scripts\Shutdown\0\0]
"Script"="C:\\Program Files (x86)\\opsi.org\\opsi-client-agent\\on_shutdown\\doinstall64.cmd"
"Parameters"=""
"IsPowershell"=dword:00000000
"ExecTime"=hex:00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00

[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\policies\system]
"MaxGPOScriptWait"=dword:00000000
----

[[opsi-on-shutdown-concept-opsiclientd]]
===== Configuration of the opsiclientd

To manage the Installation on Shutdown, the opsi client service 'opsiclientd' has got entries for the special Event 'on_shutdown' in the configuration file 'opsiclientd.conf'. These are the relevant entries:

[source,prompt]
----
[event_gui_startup]
active = True

[event_gui_startup{installation_pending}]
active = True

[event_on_shutdown]
active = False

[event_on_shutdown{installation_pending}]
active = False

[precondition_installation_pending]
installation_pending = true
----

The precondition `installation_pending` is set to 'true' by the 'opsiclientd' while an installation is in progress and set to 'false' when the installation is finished. So an unfinished installation, which needs to proceed the installation after a reboot, can be detected by the precondition `installation_pending` still being 'true' at the end of the script processing.
When the `event_on_shutdown` section is set to False (which is the default), the Installation on Shutdown is disabled.

This is the configuration for a client with activated Installation on Shutdown:

[source,prompt]
----
[event_gui_startup]
active = True

[event_gui_startup{installation_pending}]
active = True

[event_on_shutdown]
active = True

[event_on_shutdown{installation_pending}]
active = False

[precondition_installation_pending]
installation_pending = true
----

So the only difference is the 'event_on_shutdown' section being 'True':

[source,prompt]
----
[event_on_shutdown]
active = True
----

The setting of the 'event_on_shutdown' section is managed by the product switch `on_shutdown_install` of the `opsi-client-agent` package.

The precondition `precondition_installation_pending = true` indicates, that the current installation process has not completed yet. This precondition stays 'true', even after several Reboots, until the current installation has completed. In case of a required Reboot during the installation process, the configuration `[event_gui_startup{installation_pending}] active = True` triggers the installation to continue at the next system startup. This configuration may not be changed, because the current installation has to be completed, before the user is allowed to login.

Also the configuration `[event_on_shutdown{installation_pending}] active = False` must keep its value 'False' at all times, because the installation has to continue AFTER the next reboot. Otherwise there wouldn't be a reboot between Installation at Startup and Installation on Shutdown.

As soon as the installation process has completed, the precondition is set to `installation_pending = false`, so the Installation on Shutdown is active again.

[[opsi-on-shutdown-config]]
===== Special Configuration of Installation on Shutdown

To activate the Installation on Shutdown, just a current opsi-client-agent package is required, as described in <<opsi-on-shutdown-activate>>. The Shutdown on Install can be activated by setting the product switch `on_shutdown_install` of the clients `opsi-client-agent` package.

As default, the Installation at startup is also active. So it is ensured, that the client always has the current software. Even if it had been offline for a while (when the user returns from holiday, for instance).

The Installation at startup can be turned off, if desired. The configuration of the '{opsi-client-agent}s' can be done by the web service (see: <<opsi-manual-clientagent-configuration-webservice>>),
therefore an '{opsi-config-object}' should be created:

* +opsiclientd.event_gui_startup.active+ (boolean, default: +true+)

By this '{opsi-config-object}' the 'gui_startup' event can be configured for a client. The '{opsi-config-objects}' can be created by '{opsi-configed}' or '{opsi-admin}'.

For creating the '{opsi-config-object}' with '{opsi-admin}', execute the following command on the '{opsi-configserver}':

[source,prompt]
----
opsi-admin -d method config_createBool opsiclientd.event_gui_startup.active "gui_startup active" true
----

The default value 'true' is the default value as it comes with the default `opsiclientd.conf`.

To disable the Installation at Startup for a client, the '{opsi-config-object}' can be configured like this:

* +opsiclientd.event_gui_startup.active+: +false+

Be careful with disabling the Installation on startup, for there is a high risk of outdated software. Never change the settings of the sections with the precondition 'installation_pending'. The default settings are required to manage the installation process. +

To set the '{opsi-config-object}' with '{opsi-admin}', execute the following command on the '{opsi-configserver}' (in this example for a client with the {opsi-host-id} +myclient.domain.de+):

[source,prompt]
----
opsi-admin -d method configState_create opsiclientd.event_gui_startup.active myclient.domain.de false
----

With the configuration 'event_gui_startup=false' there is no connect to the '{opsi-configserver}' and no software installation at startup. With the exception of installations in progress, which continue at system startup. This is managed by the configuration `event_on_shutdown{installation_pending}`. So do not change the settings for sections with the precondition 'installation_pending', for they are important for products, that require a reboot during installation.

[[opsi-on-shutdown-error]]
===== Local Logfile

During Install on Shutdown two logfiles are written:

* `C:\opsi.org\log\doinstall.log`
* `C:\opsi.org\log\opsiclientd_event_starter.log`


with, in case of success, has the following content:

`doinstall.log`:
[source,prompt]
----
doinstall32.cmd started
Aktuelles Datum: 29.01.2013
----

`opsiclientd_event_starter.log`:
[source,prompt]
----
[1] [Okt 06 18:49:44:435] opsiclientd_shutdown_starter: version: 4.0.7.0
[5] [Okt 06 18:49:44:435] clientid=pctry4detlef.uib.local
[5] [Okt 06 18:49:44:435] service_url=https://localhost:4441/opsiclientd
[5] [Okt 06 18:49:44:435] service_user=pctry4detlef.uib.local
[5] [Okt 06 18:49:44:450] host_key=***(confidential)***
[5] [Okt 06 18:49:44:450] myevent=on_shutdown
[6] [Okt 06 18:49:44:450] Working with ssl protocol: sslvSSLv23 - auto negotation
[6] [Okt 06 18:49:45:107] JSON Bench for backend_info "params":[],"id":1} Start: 18:49:44:450 Time: 00:00:00:657
[6] [Okt 06 18:49:45:232] opsidata connected
[5] [Okt 06 18:49:45:232] init Connection done
[6] [Okt 06 18:49:45:232] JSON service request https://localhost:4441/opsiclientd isInstallationPending
[6] [Okt 06 18:49:45:529] JSON Bench for isInstallationPending "params":[],"id":1} Start: 18:49:45:232 Time: 00:00:00:297
[5] [Okt 06 18:49:45:622] resultstring={"id": 1, "result": false, "error": null}
[5] [Okt 06 18:49:45:622] No installation pending - fine
[6] [Okt 06 18:49:45:622] JSON service request https://localhost:4441/opsiclientd fireEvent
[6] [Okt 06 18:49:45:966] JSON Bench for fireEvent "params":["on_shutdown"],"id":1} Start: 18:49:45:622 Time: 00:00:00:344
[5] [Okt 06 18:49:46:091] resultstring={"id": 1, "result": null, "error": null}
[5] [Okt 06 18:49:46:091] Succesfull fired event: on_shutdown
[5] [Okt 06 18:49:51:107] calling: isEventRunning,[on_shutdown]
[6] [Okt 06 18:49:51:107] JSON service request https://localhost:4441/opsiclientd isEventRunning
[6] [Okt 06 18:49:51:357] JSON Bench for isEventRunning "params":["on_shutdown"],"id":1} Start: 18:49:51:107 Time: 00:00:00:250
[5] [Okt 06 18:49:51:451] resultstring={"id": 1, "result": true, "error": null}
[5] [Okt 06 18:49:56:467] calling: isEventRunning,[on_shutdown]
[6] [Okt 06 18:49:56:467] JSON service request https://localhost:4441/opsiclientd isEventRunning
[6] [Okt 06 18:49:56:935] JSON Bench for isEventRunning "params":["on_shutdown"],"id":1} Start: 18:49:56:467 Time: 00:00:00:468
[5] [Okt 06 18:49:57:060] resultstring={"id": 1, "result": true, "error": null}
[5] [Okt 06 18:50:02:076] calling: isEventRunning,[on_shutdown]
[6] [Okt 06 18:50:02:076] JSON service request https://localhost:4441/opsiclientd isEventRunning
[6] [Okt 06 18:50:02:545] JSON Bench for isEventRunning "params":["on_shutdown"],"id":1} Start: 18:50:02:076 Time: 00:00:00:469
[5] [Okt 06 18:50:02:670] resultstring={"id": 1, "result": true, "error": null}
[5] [Okt 06 18:50:07:686] calling: isEventRunning,[on_shutdown]
[6] [Okt 06 18:50:07:686] JSON service request https://localhost:4441/opsiclientd isEventRunning
[6] [Okt 06 18:50:08:186] JSON Bench for isEventRunning "params":["on_shutdown"],"id":1} Start: 18:50:07:686 Time: 00:00:00:500
[5] [Okt 06 18:50:08:311] resultstring={"id": 1, "result": true, "error": null}
[5] [Okt 06 18:50:13:327] calling: isEventRunning,[on_shutdown]
[6] [Okt 06 18:50:13:327] JSON service request https://localhost:4441/opsiclientd isEventRunning
[6] [Okt 06 18:50:13:624] JSON Bench for isEventRunning "params":["on_shutdown"],"id":1} Start: 18:50:13:327 Time: 00:00:00:297
[5] [Okt 06 18:50:13:749] resultstring={"id": 1, "result": true, "error": null}
[5] [Okt 06 18:50:18:765] calling: isEventRunning,[on_shutdown]
[6] [Okt 06 18:50:18:765] JSON service request https://localhost:4441/opsiclientd isEventRunning
[6] [Okt 06 18:50:19:030] JSON Bench for isEventRunning "params":["on_shutdown"],"id":1} Start: 18:50:18:765 Time: 00:00:00:265
[5] [Okt 06 18:50:19:171] resultstring={"id": 1, "result": false, "error": null}
[5] [Okt 06 18:50:19:171] calling: isEventRunning,[on_shutdown{user_logged_in}]
[6] [Okt 06 18:50:19:171] JSON service request https://localhost:4441/opsiclientd isEventRunning
[6] [Okt 06 18:50:19:452] JSON Bench for isEventRunning "params":["on_shutdown{user_logged_in}"],"id":1} Start: 18:50:19:171 Time: 00:00:00:281
[5] [Okt 06 18:50:19:562] resultstring={"id": 1, "result": false, "error": null}
[5] [Okt 06 18:50:19:562] Task completed
----

or

[source,prompt]
----
[1] [Okt 12 18:07:57:352] opsiclientd_shutdown_starter: version: 4.0.7.0
[5] [Okt 12 18:07:57:352] clientid=pctry4detlef.uib.local
[5] [Okt 12 18:07:57:352] service_url=https://localhost:4441/opsiclientd
[5] [Okt 12 18:07:57:352] service_user=pctry4detlef.uib.local
[5] [Okt 12 18:07:57:352] host_key=***(confidential)***
[5] [Okt 12 18:07:57:352] myevent=on_shutdown
[6] [Okt 12 18:07:57:352] Working with ssl protocol: sslvSSLv23 - auto negotation
[6] [Okt 12 18:07:57:946] JSON Bench for backend_info "params":[],"id":1} Start: 18:07:57:352 Time: 00:00:00:594
[6] [Okt 12 18:07:58:055] opsidata connected
[5] [Okt 12 18:07:58:055] init Connection done
[6] [Okt 12 18:07:58:055] JSON service request https://localhost:4441/opsiclientd isInstallationPending
[6] [Okt 12 18:07:58:290] JSON Bench for isInstallationPending "params":[],"id":1} Start: 18:07:58:055 Time: 00:00:00:235
[5] [Okt 12 18:07:58:399] resultstring={"id": 1, "result": true, "error": null}
[2] [Okt 12 18:07:58:399] State installation pending detected, do not starting shutdown event.
[2] [Okt 12 18:07:58:399] Terminate called.
----

This Logfiles are rewritten each time and can be checked in case of a malfunction.
