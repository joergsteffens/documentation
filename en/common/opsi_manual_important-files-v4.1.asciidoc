////
; Copyright (c) uib gmbh (www.uib.de)
; This documentation is owned by uib
; and published under the german creative commons by-sa license
; see:
; https://creativecommons.org/licenses/by-sa/3.0/de/
; https://creativecommons.org/licenses/by-sa/3.0/de/legalcode
; english:
; https://creativecommons.org/licenses/by-sa/3.0/
; https://creativecommons.org/licenses/by-sa/3.0/legalcode
;
; credits: http://www.opsi.org/credits/
////


:Author:    uib gmbh
:Email:     info@uib.de
:Date:      09.01.2019
:Revision:  4.1
:toclevels: 6

include::../common/opsi_terms.asciidoc[]


[[opsi-manual-important-files]]
=== Important files on the opsi server

[[opsi-manual-important-files-etc]]
==== Common configuration files in /etc

[[opsi-manual-important-files-etc-hosts]]
===== /etc/hosts

The IP number and IP name of the clients can be entered here (additional names are aliases, and comments start with the "#" character).

Opsi needs the 'fully qualified hostname' (i.e. including the domain) and this can come from `/etc/hosts` as well from the 'DNS'.

Example:
[source,prompt]
----
192.168.2.106  dplaptop.uib.local  dplaptop  # this opsi-server
192.168.2.153  schleppi.uib.local
192.168.2.178  test_pc1.uib.local # Test-PC PXE-bootprom
----

The output of:
[source,prompt]
----
getent hosts $(hostname -f)
----

should be similar to:
[source,prompt]
----
192.168.1.1 server.domain.tld server
----

If the result does not look like this (e.g. contains '127.0.0.1' or 'localhost'), you must first correct your `/etc/hosts` or name resolution.


[[opsi-manual-important-files-etc-group]]
===== /etc/group

Two groups must exist here: 'pcpatch' and 'opsiadmin'.
All users who are dealing with package management should be member of the group 'pcpatch'.
All users who want to use the opsiconfd web service, e.g. via {opsi-Configed}, must be in the 'opsiadmin' group.


[[opsi-manual-important-files-etc-opsi-backends]]
===== /etc/opsi/backends/
Configuration files for the used backends.

[[opsi-manual-important-files-etc-opsi-backendmanager]]
===== /etc/opsi/backendManager/
* `acl.conf` +
Configuration of the access rights to the opsi methods.
This allows access rights for the basic methods of the web service to be restricted to certain users and certain attributes.

* `dispatch.conf` +
Configuration of which of the backends configured under `/etc/opsi/backends/` should be used for what.

* `extend.d/` +
Directory for backend extensions. So here are for example the scripts that map the opsi 3 methods to the opsi 4 methods.

[[opsi-manual-important-files-etc-opsi-hwaudit]]
===== /etc/opsi/hwaudit/*

Since opsi version 3.2

Here you will find the configuration files for the hardware inventory.

Translations are located in the `locales` directory.

The mapping between WMI classes and the opsi data storage is configured in the file `opsihwaudit.conf`.

[[opsi-manual-important-files-etc-opsi-opsiconf]]
===== /etc/opsi/opsi.conf

Since opsi version 4.0.2-2

General opsi settings.

Example:
[source,configfile]
----
[groups]
fileadmingroup = pcpatch
----
Background:
The classic installation variant with the user: `pcpatch` with the primary group: `pcpatch` does not work with Samba{nbsp}4. Since Samba{nbsp}4 is subject to the basic restrictions of Active Directory, groups with the same name as users (as is usual in Unix/Linux) are no longer allowed. For this reason, a new configuration file has been introduced: `/etc/opsi/opsi.conf`, which controls how the group is determined for Samba access to the shares. In the case of Samba{nbsp}4 installations, the group name `pcpatch` is now renamed via this file and is now called `opsifileadmins`. This means that the users which must have access rights to the shares of opsi (opsi-packagers) under Samba{nbsp}4 cannot become a member of the `pcpatch` group, but must be a member of the `opsifileadmins` group.

[[opsi-manual-important-files-etc-opsi-modules]]
===== /etc/opsi/modules

Since opsi version 3.4

This file is signed by uib gmbh for the activation of non-free features. If this file is changed, it loses its validity. Without this file, only the free features are available.


===== Directory /etc/opsi/modules.d/

Since opsi version 4.1

Directory reserved for future usage.


[[opsi-manual-important-files-etc-opsi-opsiconfd]]
===== /etc/opsi/opsiconfd.conf

Since opsi version 3.0

Configuration file for the opsiconfd service in which settings such as ports, interfaces and logging are specified.

[[opsi-manual-important-files-etc-opsi-opsiconfdpem]]
===== /etc/opsi/opsiconfd.pem

Since opsi version 3.0

Configuration file for the opsiconfd service in which the ssl certificate is stored.

[[opsi-manual-important-files-etc-opsi-opsipxeconfd]]
===== /etc/opsi/opsipxeconfd.conf

Configuration file for the opsipxeconfd service, which is responsible for writing the startup files for the Linux bootimage. Directories, defaults and log levels can be configured here.

[[opsi-manual-important-files-etc-opsi-opsi-package-updater]]
===== /etc/opsi/opsi-package-updater.conf
Configuration file for the opsi-package-updater.

See also <<opsi-manual-configuration-tools-opsi-package-updater>>

[[opsi-manual-important-files-bootfiles]]
==== Boot files

[[opsi-manual-important-files-bootfiles-tftpboot-linux]]
===== Boot files in /tftpboot/linux

* `pxelinux.0` +
Boot file that is loaded in the first step by the PXE boot.

* `install` and `miniroot.gz` +
Installation bootimage, which is transferred via tftp to the client during reinstallation.

[[opsi-manual-important-files-bootfiles-tftpboot-linux-pxelinuxcfg]]
===== Boot files in /tftpboot/linux/pxelinux.cfg

* `01-<mac adress>` or `<IP-address-in-hex>` +
Files with the hardware address of the client and the prefix 01- can be found on the '{opsi-server}' as client-specific boot files. Usually they are created via '{opsipxeconfd}' as named pipes and should initiate a reinstallation of the client.

* `default` +
The file `default` is loaded if there are no client-specific files. If this file is loaded, the client then continues to a local boot.

* `install` +
Information for the boot of the installation bootimage, which is written from '{opsipxeconfd}' into the named pipe.

[[opsi-manual-important-varlibopsi]]
==== Files in /var/lib/opsi


[[opsi-manual-important-varlibopsi-depot]]
===== /var/lib/opsi/depot
This directory is exported (read-only) as the Samba share 'opsi_depot'.
In old opsi installations this directory was `/opt/pcbin/install`. If this directory still exists, a symlink references it to `/var/lib/opsi/depot`.


[[opsi-manual-important-varlibopsi-ntfsimages]]
===== /var/lib/opsi/ntfs-images
This is the default directory where the partition images are stored, that are used with the netboot product 'opsi-clonezilla'.


[[opsi-manual-important-varlibopsi-repository]]
===== /var/lib/opsi/repository
This is where '{opsi-product-packages}' are saved, which are installed onto the server by executing `opsi-package-updater`.

This is also where '{opsi-product-packages}', which are installed by calling the `opsi-package-manager`, if this is called with the option `-d`, are saved.


[[opsi-manual-important-varlibopsi-workbench]]
===== /var/lib/opsi/workbench

This location contains the state of your own software packaging.


[[opsi-manual-important-varlibopsi-other]]
===== Other directories

The remaining directories in `/var/lib/opsi` (`config` and `audit`) are directories of the '{file-Backend}', which is described in the following chapter.


[[opsi-manual-important-files-filebackend]]
==== Files of the file backend

[[opsi-manual-important-files-filebackend-pckeys]]
===== /etc/opsi/pckeys
The client-specific '{opsi-host-key}s' and also the server key are stored here.

Example:
[source,prompt]
----
schleppi.uib.local:fdc2493ace4b372fd39dbba3fcd62182
laptop.uib.local:c397c280fc2d3db81d39b4a4329b5f65
pcbon13.uib.local:61149ef590469f765a1be6cfbacbf491
----

[[opsi-manual-important-files-filebackend-passwd]]
===== /etc/opsi/passwd
The passwords encrypted with the server key (e.g. for pcpatch) are stored here.

[[opsi-manual-important-files-filebackend-overview]]
===== Overview of /var/lib/opsi
The files of the file backend of opsi 4 can by default be found in `/var/lib/opsi/config/`. The following diagram gives an overview of the directory structure:

[source,prompt]
----
/var/lib/opsi-|
              |-depot				opsi_depot share
              |-repository			opsi package repository used by opsi-package-updater and opsi-package-manager
              |-audit				inventory files
              !-config/-|				config share
                        |-clientgroups.ini	client groups
                        |-config.ini		Host Parameters (Global Defaults)
                        |-clients/   		<pcname.ini> files
                        |-products/		product control files
                        !-depots		depot description files

	+audit/
		global.<Type> (generic hard-, and software information)
		<FQDN>.<Type> (host specific hard-, and software information)

	clientgroups.ini (contains the hostgroups)

	+clients/
		<FQDN>.ini (client configuration information)
	config.ini (contains the host specific host parameters)

	+depots/
		<FQDN>.ini (Information of the depots)

	+products/
		<ID>_<ProdVer>-<PackVer>.<Type> (Information about the products)

	+templates/
		pcproto.ini (template for new clients)
		<FQDN>.ini (template for specific new clients)
----

WARNING: Editing these files is strongly discouraged!

[[opsi-manual-important-files-filebackend-detail]]
===== Configuration files in detail

The following chapters explain the structure of the different configuration files of the file backend.

[[opsi-manual-important-files-filebackend-detail-clientgroups]]
===== ./clientgroups.ini
This file contains information about the client groups.
[source,ini]
----
[<GroupId>]
<HostId> = 1 #active
<HostId> = 0 #non-active
----

[[opsi-manual-important-files-filebackend-detail-configini]]
===== ./config.ini

Here you will find the default values of the server configuration as shown in '{opsi-configed}' in the 'host parameters' tab.

[[opsi-manual-important-files-filebackend-detail-fqdnini]]
===== ./clients/<FQDN>.ini

The client-specific configurations are stored in this file. The information is combined with the values from `<depot-id>.ini`, whereby the settings from `<FQDN>.ini` take precedence.

These files are structured as follows:

The 'info' section contains all information directly related to the client, for example the description:
[source,ini]
----
[info]
description = <String>
created = <Date> #format: 'YYYY-MM-DD HH:MM:SS'
lastseen = <Date> #format: 'YYYY-MM-DD HH:MM:SS'
inventorynumber = <String>
notes = <String>
hardwareaddress = <MAC> #format: 'hh:hh:hh:hh:hh:hh'
ipaddress = <IP> #format: 'nnn.nnn.nnn.nnn'
onetimepassword = <String>
----

The following section stores the current status of the products on the client. If there are no entries, 'not_installed: none' is assumed.
[source,ini]
----
[<Type>_product_states] #'LocalbootProduct', or 'NetbootProduct'
<ProductId> = <InstallationStatus>:<ActionRequest>
----
More detailed information can be found in the sections belonging to the respective products:
[source,ini]
----
[<ProductId>-state]
producttype = <Type> #'LocalbootProduct', or 'NetbootProduct'
actionprogress = <String>
productversion = <ProdVer>
packageversion = <PackVer>
modificationtime = <Date> #format: 'YYYY-MM-DD HH:MM:SS'
lastaction = <ActionRequest>
actionresult = <ActionResult>
targetconfiguration = <InstallationStatus>
----

[[opsi-manual-important-files-filebackend-detail-templates]]
===== /var/lib/opsi/config/templates

This is the location of the file `pcproto.ini`, which is the standard template for creating new client ini-files and has the same structure. If specific clients should be given different information, you can save a `<FQDN>.ini` in this directory.

[[opsi-manual-important-files-filebackend-detail-depots]]
===== /var/lib/opsi/config/depots/

Here you will find the files of the '{opsi-depotserver}', which are also saved with `<depot-id>.ini`. Among other things, the connection to the depot is stored here. 

[source,ini]
----
[depotshare]
remoteurl = smb://<NetBiosName>/<Path>
localurl = file://<Path>

[depotserver]
notes = <String>
network = <IP>
description = <String>
hardwareaddress = <MAC>
ipaddress = <IP>
inventorynumber = <String>

[repository]
remoteurl = webdavs://<FQDN>:<Port>/<Path>
localurl = file://<Path>
maxbandwidth = <Integer> #in Bytes
----

Here you will also find information on which opsi products, in which version, and with which property defaults are installed on the depot.

[[opsi-manual-important-files-filebackend-detail-products]]
===== Product control files in /var/lib/opsi/config/products/

The product control files contain the metadata of the products, e.g. name, properties and their default values, dependencies ...

The control files correspond to the control files that are created when creating opsi products in the directory `<product name>/OPSI/control`.

The control files consist of the following sections:

* Section [Package] +
Description of the package version and packages required for the installation of the package on an {opsi-depotserver}.
* Section [Product] +
Description of the product.
* Section(s) [ProductProperty] +
(optional) +
Description of editable product properties.
* Section(s) [ProductDependency] +
(optional) +
Description of product dependencies.

Example:
[source,ini]
----
[Package]
version: 1
depends:

[Product]
type: localboot
id: thunderbird
name: Mozilla Thunderbird
description: Mail client by Mozilla.org
advice:
version: 2.0.0.4
priority: 0
licenseRequired: False
productClasses: Mailclient
setupScript: thunderbird.ins
uninstallScript:
updateScript:
alwaysScript:
onceScript:

[ProductProperty]
name: enigmail
description: Install encryption plug-in for GnuPG
values: on, off
default: off

[ProductDependency]
action: setup
requiredProduct: mshotfix
requiredStatus: installed
requirementType: before
----

* [Package]-'Version' +
is for different package versions from the same product version. This helps to, for instance, distinguish packages with the same product version but with a different '{opsi-winst}' script.

* [Package]-'depends' +
Specifies a package required for installation on an {opsi-depotserver}.
Specific versions can be configured by specifying the version in parenthesis after the package name.
One of the following operators must precede the version within the parenthesis: `=`, `<`, `<=`, `>`, `>=`.

* [Package]-'Incremental' +
This is an obsolete, setting that has no effect, which has not been set in new packages since opsi 4.1.
You can remove this entry.

* [Product]-'type' +
Specifies the product type as localboot or netboot.

* [Product]-'Id' +
Is a unique identifier for the product, independent of the version.

* [Product]-'name' +
Is the full name of the product.

* [Product]-'Description' +
Is an additional description of the product, which is for example shown in '{opsi-configed}' under 'Description'.

* [Product]-'Advice' +
is an additional description, for the handling of the product (usually), which is shown in '{opsi-configed}' under 'Note'.

* [Product]-'version' +
Is the version of the packaged software.

* [Product]-'Priority' +
Influences the installation sequence, in combination with the product dependencies.

* [Product]-'productClasses' +
Is not currently used (nor is it displayed).

* [ProductProperty]-'type' +
Type of the property: (unicode/boolean)

* [ProductProperty]-'name': +
Name of the property.

* [ProductProperty]- 'multivalue' +
Can this property contain a list of values. (True/False)

* [ProductProperty]- 'editable' +
Can this property be freely edited (or can only a value from a predefined list be selected). (True / False)

* [ProductProperty]-'description': +
Description of the property (tooltip in '{opsi-configed}').

* [ProductProperty]-'values' : +
List of possible, allowed values. If empty, the value is freely editable.

* [ProductProperty]-'default' : +
Default value of the property.

* [ProductDependency]-'Action' : +
For which action of the product you are currently creating, should the dependency apply (setup, uninstall ...).

* [ProductDependency]-'Requiredproduct': +
Product-id (identifier) of the product to which a dependency exists.

* [ProductDependency]-'Required action': +
The required action of the product, which the dependency entry refers to. Actions could be setup, uninstall, update...

* [ProductDependency]-'Required installation status': +
The required status of the product, which the dependency entry refers to. Typically this is 'installed', which results in setting this dependency product to setup, if it isn't installed on the client yet.

* [ProductDependency]-'Requirement type': +
this is regarding the installation order. If the product, which the dependency entry refers to, has to be installed before the actual product installation starts, the 'Requirement type' must be 'before'. If the dependency product has to be (re-)installed after the actual product, the 'Requirement type' is set to 'after'. If there is no entry, the installation order is of no relevance.


[[opsi-manual-important-files-filebackend-detail-audit]]
===== Inventory data /var/lib/opsi/audit

Here you find the inventory data for hardware (\*.hw) and software (*.sw).
// note the \ is used as escape character and is not an error

[[opsi-manual-important-files-prog]]
==== opsi programs and libraries

[[opsi-manual-important-files-prog-usrbin]]
===== Programs in /usr/bin

* opsipxeconfd +
opsi daemon to administrate the files required for the PXE boot of the clients.

* opsi-admin +
Starts the command line interface for the opsi python library

* opsiconfd +
opsi daemon which is the central opsi configuration daemon.

* opsiconfd-guard +
opsi daemon which monitors if the '{opsiconfd}' is running and restarts the '{opsiconfd}' if it isn't running.

* opsi-configed +
Command to start the opsi management interface

* opsi-convert +
Script for converting between different backends.

* opsi-makepackage +
Script for packing the opsi-package (opsi-product)

* opsi-newprod +
Script for creating the structure and meta data files of a new opsi product

* opsi-package-manager +
Script to unpack, install, remove, list opsi packages on one ore more servers (and a lot more).

* opsi-setup +
opsi configuration utility

[[opsi-manual-important-files-logs]]
==== opsi log files

The opsi log files have the following format:
[source,ini]
----
[Loglevel] Timestamp Message
The log levels are:
0 = nothing      (absolute nothing)
1 = essential    ("we always need to know")
2 = critical     (unexpected errors that my cause a program abort)
3 = error        (Errors that don't will abort the running program)
4 = warning      (you should have a look at this)
5 = notice       (Important statements to the program flow)
6 = info         (Additional Infos)
7 = debug        (important debug messages)
8 = debug2       (a lot more debug information and data)
9 = confidential (passwords and other security relevant data)
----

[[opsi-manual-important-files-logs-bootimage]]
===== /var/log/opsi/bootimage
In this directory are the log-files of the '{opsi-linux-bootimage}'. These log files will be named `log.<IP-number>`.

If the '{opsi-linux-bootimage}' couldn't connect the web-service, you will find the logs in `/tmp/log` at the bootimage. In such case, there are two possible ways to get the log file:

1. You have a network connection to the client +
You may use scp (winscp) to copy the log file from the running boot-image to your computer (login as root with password linux123).

2. You have no network connection to the client +
You have to use a USB stick.

** Login as root with the password 'linux123'
** Connect USB stick to the client and wait some seconds
** use the command `sfdisk -l` to check on which device you will find your stick
** mount
** copy
** umount

A example session:
[source, prompt]
----
#sfdisk -l
Disk /dev/sda: 30401 cylinders, 255 heads, 63 sectors/track
Units = cylinders of 8225280 bytes, blocks of 1024 bytes, counting from 0

   Device Boot Start     End   #cyls    #blocks   Id  System
/dev/sda1   *      0+  30401-  30402- 244197528+   7  HPFS/NTFS
/dev/sda2          0       -       0          0    0  Empty
/dev/sda3          0       -       0          0    0  Empty
/dev/sda4          0       -       0          0    0  Empty

Disk /dev/sdb: 1017 cylinders, 33 heads, 61 sectors/track
Units = cylinders of 1030656 bytes, blocks of 1024 bytes, counting from 0

   Device Boot Start     End   #cyls    #blocks   Id  System
/dev/sdb1          0+   1016    1017-   1023580    b  W95 FAT32
/dev/sdb2          0       -       0          0    0  Empty
/dev/sdb3          0       -       0          0    0  Empty
/dev/sdb4          0       -       0          0    0  Empty
# mount /dev/sdb1 /mnt
# cp /tmp/log /mnt
#umount /mnt
----

[[opsi-manual-important-files-logs-clientconnect]]
===== /var/log/opsi/clientconnect

In this directory are the log-files of the '{opsi-client-agent}' running on the client. +
The client log files will be named `<client FQDN>.log`. On the client you will find this file at `C:\opsi.org\log\opsiclientd.log`.

[[opsi-manual-important-files-logs-instlog]]
===== /var/log/opsi/instlog
In this directory are the log-files of the '{opsi-winst}' running on the client.  The client log files will be named `<client FQDN>.log`. On the client you will find this file at `C:\opsi.org\log\opsiscript.log`

[[opsi-manual-important-files-logs-opsiconfd]]
===== /var/log/opsi/opsiconfd
In this directory are the log-files of the '{opsiconfd}' and the clients. +
The client log files will be named `log.<IP-number>` and (if available) a symbolic link named `<IP-Name>.log` to `log.<IP-number>` is created.

[[opsi-manual-important-files-logs-opsipxeconfd]]
===== /var/log/opsi/opsipxeconfd.log
Log file the '{opsipxeconfd}' +
that administrates the tftp files for the PXE boot of the clients.

[[opsi-manual-important-files-logs-package]]
===== /var/log/opsi/package.log
Log file of the `opsi-package-manager`.

[[opsi-manual-important-files-logs-package-updater]]
===== /var/log/opsi/opsi-package-updater.log
Log file of the `opsi-package-updater`.

[[opsi-manual-important-files-logs-tftpd]]
===== tftp log in /var/log/syslog
The log of the `tftpd` you will find at `/var/log/syslog`.

[[opsi-manual-important-files-logs-loginblocker]]
===== c:\opsi.org\log\opsi_loginblocker.log
Log file of the '{opsi-login-blocker}'

[[opsi-manual-important-files-logs-opsiclientd]]
===== c:\opsi.org\log\opsiclientd.log
Log file of the '{opsiclientd}' +
This file is copied at the end of a event to server at `/var/log/opsi/clientconnect/<pc-ipnummer.log>`.

[[opsi-manual-important-files-logs-localinstlog]]
===== c:\opsi.org\log\opsi-script.log
Log file of the '{opsi-winst}'. +
This file is copied at the end of a installation to server at `/var/log/opsi/instlog/<pc-ipnummer.log>`.

