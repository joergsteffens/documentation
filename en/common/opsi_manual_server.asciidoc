////
; Copyright (c) uib gmbh (www.uib.de)
; This documentation is owned by uib
; Until we found a better license:
; All rights reserved.
; credits: http://www.opsi.org/credits/
////

:Author:    uib gmbh
:Email:     info@uib.de
:Date:      19.10.2017
:Revision:  4.1
:toclevels: 6

include::../common/opsi_terms.asciidoc[]


[[opsi-manual-server-overview]]
===  Overview

The functionality of an '{opsi-server}' can be installed on many standard Linux distributions.

There are two different major roles, which can be combined on one server:

* '{opsi-configserver}' +
The functionality of the configserver includes the storage and processing of the configuration data in different backends and provisioning this via a web service and on the command line.

* '{opsi-depotserver}' +
The functionality of the '{opsi-depotserver}' includes storing the actual installation files of the software to be distributed, operating systems, boot images and making them available to the client via smb/cifs, https, tftp.

The hardware requirements for these services are generally low, so operating an opsi-server in a virtualization environment is not a problem.

Since version 4.2 the opsi-server is using the in-memory storage redis (https://redis.io/). The following data is saved in redis:

* Log outputs are written into a redis stream. This stream is then read by the Logviewer, for example. 

* Session data is stored as MessagePack strings in redis (https://msgpack.org/)

* Statistics such as CPU usage are stored as Time Series in Reids. For this purpose the module RedisTimeSeries is used (https://github.com/RedisTimeSeries/RedisTimeSeries).

The Statistics are read and displayed by Grafana (https://grafana.com/). The grafana dashboard can be reached at the following URL https://grafana:3000. 

image::grafana_dashboard.png["Grafana Dashboard", width="120mm"]

[[opsi-manual-server-installation]]
====  Installation and initial operation
The installation and starting of a '{opsi-server}' is explained in detail in the separate 'opsi-getting-started' manual.

[[opsi-manual-server-samba]]
====  Samba Configuration
In order to give the client computers access to the software packages, the opsi-server provides shares that can be mounted by the clients as network drives. For Windows Clients the shares are provided by Samba.
To configure your samba according to the needs of opsi (or to repair) call:
[source,prompt]
----
opsi-setup --auto-configure-samba
----

After changing the Samba configuration it is necessary to restart the Samba service (`systemctl restart smbd.service`).

[[opsi-manual-server-opsiconfd]]
====  The opsiconfd daemon
'Opsiconfd' is the central configuration daemon of opsi.
All client components ({opsi-client-agent}, {opsi-configed}, {opsi-linux-bootimage}, ...) connect to this service to access the configurations in the backends.
The 'opsiconfd' is configured via the file `/etc/opsi/opsiconfd.conf`.
The individual configuration options are documented in this file.
Here are some additional notes.

* +[global] admin networks +: +
With this option the administrative access to the 'opsiconfd' can be restricted to connections from certain network addresses. +
Multiple network addresses can be specified separated by commas. +
Non-administrative client connections can also be made from other networks.

* +[global] max log size +: +
This option can be used to limit the size of the log files. +
For historical reasons, this is limited to 5MB per log file. +
Since opsi 4.0.6 it is possible to change this value to your own needs. +
To disable the size limit, the value can be set to 0.

In addition to this setting option, it is possible to use the 'logrotate' +
tool to automatically compress and rotate the log files on a server. +
Please refer to the associated manual for configuration options.

If the maximum size of the log files is known, you can calculate how much +
storage space the logs will need. There are five different, client-related log +
types that are written by opsiconfd: 'bootimage', 'clientconnect', 'instlog', +
'opsiconfd' and 'userlogin'.
There are also some client-independent logs: 'opsiconfd.log', 'opsipxeconfd.log', +
'opsi-backup.log', 'opsi-package-updater.log' and 'package.log'.

If we assume a configuration implemented with opsiconfd and logrotate, in which +
all log files are limited to 5MB, apart from 'package.log', which can be 10MB, +
then we end up with the following calculation:

[source,prompt]
----
(number of clients * 5 * 5MB) + 5MB + 5MB + 5MB + 5MB + 10MB
----

For 100 clients we should thus reserve 2530MB for the opsi logfiles.
Because Logrotate is usually only active at a certain time, we recommend rounding up this number.


[[opsi-manual-server-accounts]]
====  Required system user accounts and groups

* User 'opsiconfd' +
This is the user under which the opsiconfd deamon runs.

* User 'pcpatch' +
This is the user the '{opsi-client-agent}' uses to mount and read from the 'depotshare'.
By default this user has the home directory `/var/lib/opsi`. You may set the password for this user by `opsi-admin -d task setPcpatchPassword`.

* Group 'pcpatch' +
In addition to the user pcpatch, there is also the group pcpatch. Most files are fully accessible for both the user and the group. The system administrators of the opsi-server should therefore be members of the pcpatch group.

* Group 'opsiadmin' +
The members of this group can authenticate themselves to the opsi-webservice and thus e.g. work with opsi-configed. Therefore, all opsi administrators should be a member of this group.

[[opsi-manual-server-shares]]
====  Required shares

* 'Depotshare' with software packages ('opsi_depot') +
The software packages prepared for installation by the opsi-winst program are located on the depot share. +
By default, this directory is located on the opsi server as `/var/lib/opsi/depot`. +
Below this directory there is a directory for each software package with the name of the software package. +
The installation scripts and files are then below these directories.
+
This directory is shared read-only as 'opsi_depot'.
+
NOTE: In older versions of opsi the corresponding directory was `/opt/pcbin` and the share was called 'opt_pcbin'.

* Working directory to build packages ('opsi_workbench') +
At `/var/lib/opsi/workbench` you will find the area to create new packages and from where you should install packages with the opsi-package-manager.
This directory is shared as 'opsi_workbench'.
+
NOTE: Since opsi 4.1 the path can be configured per depot through the attribute `workbenchLocalUrl`.

* Configuration files of the file-backend ('opsi_config') +
The configuration files of the file backend are located under `/var/lib/opsi/config`.
This directory is shared as 'opsi_config'.
+
CAUTION: If you work on the files via this share, do not use editors that change the file encoding (Unix/DOS), and remove backup files such as * .bak.

[[opsi-manual-server-opsi-pam-authentification]]
==== opsi PAM Authentication

opsi uses various `PAM`-modules for user authentication. So far, different PAM modules have been used for different distributions. The PAM modules used are listed in the following list:

Default: `common-auth` +
openSUSE / SLES: `sshd` +
CentOS and RedHat: `system-auth` +
RedHat 6: `password-auth`

As you can see from the list, various `PAM` configurations were used, but these can change again depending on the local `PAM` configuration. Since these adjustments always required an intervention in the sourcecode, you can now create the `opsi-auth` file under: `/etc/pam.d/` and save your own `PAM` configuration for opsi. If this file exists, opsi automatically uses this configuration.

The following simple example should clarify the behavior: If you run a Debian/Ubuntu system and receive a `PAM` error message when logging on to '{opsi-configed}', although an SSH connection to the server can be opened with the same user data, you can create the file `/etc/pam.d/opsi-auth` with the following content:

[source,configfile]
----
@include sshd
----

After restarting `opsiconfd`, opsi will automatically use the `sshd`-`PAM` module for authentication.

NOTE: Please note that the application of the ACL uses case-sensitive interfaces, whereas authentication via PAM can be case-insensitive. This can result in the fact that despite successful authentication, it is not possible to work with the service because the ACL prevents this.
