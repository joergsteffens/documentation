////
; Copyright (c) uib gmbh (www.uib.de)
; This documentation is owned by uib
; and published under the German creative commons by-sa license
; see:
; https://creativecommons.org/licenses/by-sa/3.0/de/
; https://creativecommons.org/licenses/by-sa/3.0/de/legalcode
; English:
; https://creativecommons.org/licenses/by-sa/3.0/
; https://creativecommons.org/licenses/by-sa/3.0/legalcode
;
; credits: http://www.opsi.org/credits/
////

:Author:    uib gmbh
:Email:     info@uib.de
:Date:      1.08.2012
:Revision:  4.0.2
:toclevels: 6


include::../common/opsi_terms.asciidoc[]

[[opsi-manual-inventory]]
=== Inventory

The inventory can be ordered with the Localboot products `hwaudit` and `swaudit` or with the Netboot product `hwinvent`.

[[opsi-manual-inventory-hard]]
==== Hardware Inventory

The hardware inventory is controlled by an opsi configuration file.  This means that the information about the data that will be compiled is not hardwired into the
corresponding products `hwaudit` and `hwinvent`.  In fact, the products will be controlled by a configuration file.  The configuration file will be called and interpreted
with every dispatch of the Web service.  Simultaneously, the configuration file controls the structure of the database, so that a change of this configuration file
changes the database schema.


The configuration file is `/etc/opsi/hwaudit/opsihwaudit.conf`. +
All the objects on the inventory are defined and described in this file, like how these objects and their data are instantiated (under Linux and Windows).  This file will
also define the associated data structure.  To be more specific, this configuration file contains the object-oriented inheritance definitions.
The reason for this is the fact that a lot of objects contain identical data fields (i.e. like `Name` and `Vendor`).  The general information will be defined
in 'virtual' Hardware base classes.  The actual inventory objects are then 'structural' Hardware classes, where many properties could possibly be inherited
from overridden 'virtual' base classes.


The following example may be instructive: +
At first, the configuration file defines a 'virtual Class' called '"BASIC_INFO"'. This defines the properties ('Values'):

* "name"

* "description"

Next comes the 'virtual Class' called '"HARDWARE_DEVICE"', which inherits all the additional parameters from '"BASIC_INFO"', and includes the following:

* "vendor"

* "model"

* "serialNumber"

Next follows the first object that is found in the inventory, which is the first 'structural Class' called '"COMPUTER_SYSTEM"',
which inherits of all the additional parameters from '"HARDWARE_DEVICE"', it is defined (and overwrites properties) as:

* "name"

* "systemType"

* "totalPhysicalMemory"

The class definition will include a description of various parameters and their 'Values':

* Class definition: +
**  "Type" +
is "STRUCTURAL" or  "VIRTUAL"
** "Super" +
this class which it will be inheriting.
** "Opsi" +
gives the name of the class, which will be used later in opsi as a display name.

Further more, the class definition can define how the data will be compiled.  This information can also be found in the definition of the 'Values'.

* For the inventory under Linux:

** "Linux":  "[<command>]<parameter>" +
Executes the command <command> on the command line, with the argument <parameter>.

** "Python": "<python code with place holder>" +
Executes the given Python code whose output will be placed in the place holder which is between the "#" signs (see example below).

* For the Inventory under Windows:

** "WMI": "<wmi select statement>" +
executes WMI when called

** "Cmd": "<Python text object with place holder>" +
In this case, this is the relative path to the Python executable program, whose output will be placed in the place holder.

** "Registry": "[<registry key>] <value name>" +
The value of <value name> will be read from the registry, and given the key name <registry key>. +
The registry must be read in an architecture-specific manner.  This means, that the 64 bit sector will be read on a 64 bit system.


* Value Definition:

** "Type":   "<MySQL database type>" +
<MySQL Database type> gives the MySQL database type that will be applied to this value (i.e. a Python string will be a "<MySQL Datenbase type>"="varchar(200)").

** "Scope":  "<scope>" +
The field <scope> will be used in the following way: +
"g" means:  This attribute is the same in every link of these types. +
"i" means:  This attribute can have different types of values with these links.

** "Opsi":   "<id>" +
"<id>" is an internal name of the fields.  This can be found in the file located at `/etc/opsi/hwaudit/locales` .

** "WMI":    "<id or command>" +
<id or command> is either the name of a WMI command that prints the value or a single WMI command.  If the WMI command is given in the Class definition (i.e. "select * from Win32_ComputerSystem") ,
then the results are assigned to the "WMI" variables in the "Values" class definition.  If there is no WMI command, then the "WMI" variables in the "Values" section are WMI commands (see example below).

** "Linux":  "<id>" +
This is part of the class definition, <id> is the name of the displayed value when the Linux command is given.

** "Condition": "<condition>" +
<condition> is a condition which must be fulfilled, with which the 'Value' will be determined.  So for example if the <condition> is defined as"vendor=[dD]ell*", then the values of "vendor" must contain either 'Dell' or 'dell'.

Here is an example of the class "COMPUTER_SYSTEM":
[source,prompt]
----
{
   "Class": {
      "Type":   "STRUCTURAL",
      "Super":  [ "HARDWARE_DEVICE" ],
      "Opsi":   "COMPUTER_SYSTEM",
      "WMI":    "select * from Win32_ComputerSystem",
      "Linux":  "[lshw]system"
   },
   "Values": [
      {
         "Type":   "varchar(100)",
         "Scope":  "i",
         "Opsi":   "name",
         "WMI":    "Name",
         "Linux":  "id"
      },
      {
         "Type":   "varchar(50)",
         "Scope":  "i",
         "Opsi":   "systemType",
         "WMI":    "SystemType",
         "Linux":  "configuration/chassis"
      },
      {
         "Type":   "bigint",
         "Scope":  "i",
         "Opsi":   "totalPhysicalMemory",
         "WMI":    "TotalPhysicalMemory",
         "Linux":  "core/memory/size",
         "Unit":   "Byte"
      },
      {
         "Type":   "varchar(50)",
         "Scope":  "i",
         "Opsi":   "dellexpresscode",
         "Condition": "vendor=[dD]ell*",
         "Cmd":	"#dellexpresscode\dellexpresscode.exe#.split('=')[1]",
         "Python":  "str(int(#{'COMPUTER_SYSTEM':'serialNumber','CHASSIS':'serialNumber'}#,36))"
      }
   ]
},
----
Regarding the "WMI" commands, the class definition contains "select * from Win32_ComputerSystem".  This command is run by WMI, which
has output columns of "Name", "SystemType", and "TotalPhysicalMemory".  These values are then assigned to the opsi values of "name",
"systemType", and "totalPhysicalMemory".

Especially interesting is here the last value "dellexpresscode": +
This is really useful when it queries a Dell-computer, about its condition. +
The command line program `dellexpresscode.exe` was designed for Windows, and tells `hwaudit.exe` that the dellexpresscode is provided in the directory `dellexpresscode\`.
Items in between '\#' are place holders for output.  So the statement at "#dellexpresscode\dellexpresscode.exe#" runs `dellexpresscode.exe`, and
produces output in the form : 'dellexpresscode=123456789'.  The value that will be used is the one after the split on the place holder '=', which is done in Python using the split() method as such `.split('=')[1]` .
Under Linux, there will be found a value for 'serialNumber' for the elements ('COMPUTER_SYSTEM' or 'CHASSIS'), that is then used to assign the Dell Express codes.  The call 'int(,36)' converts the output integer to base-36.

The OPSI names of the values will be translated using the files found in `/etc/opsi/hwaudit/locales/*`.
The file `/etc/opsi/hwaudit/locales/en_US` may contain translations such as:
----
COMPUTER_SYSTEM = Computer
COMPUTER_SYSTEM.systemType = Type
----
The class name COMPUTER_SYSTEM will be translated into "Computer".  The Opsi attribute "systemType" of the class COMPUTER_SYSTEM will be translated into "Type" for English. If
one were to look in the file `/etc/opsi/hwaudit/locales/de_DE`, you could see that the attribute of "COMPUTER_SYSTEM.systemType" will be translated into "Typ" for German.
Finally another suggestion:  When a new field is created, it should be placed in these files, even if one does not translate the term explicitly.
This avoids any "'Warning'" messages.

After any change on the configuration file you should call:


[source,prompt]
----
opsi-setup --init-current-config
----

Also you should make a complete data reload in your 'opsi-configed' by calling the menu: 'File/Reload all data'.

The source code for this package can be found at GitHub: link:https://github.com/opsi-org/hwaudit[opsi-org/hwaudit]


[[opsi-manual-inventory-soft]]
==== Software Inventory

The software inventory is done with the Localboot product `swaudit`.
In this case, information will be inherited from the uninstall of the Registry, and additional information will be obtained from the Hotfixes and License keys.

The source code for this package can be found at GitHub: link:https://github.com/opsi-org/swaudit[opsi-org/swaudit]
