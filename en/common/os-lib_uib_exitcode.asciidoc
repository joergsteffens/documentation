////                                                            
; Copyright (c) uib gmbh (www.uib.de)                           
; This documentation is owned by uib                            
; and published under the german creative commons by-sa license 
; see:                                                          
; https://creativecommons.org/licenses/by-sa/3.0/de/             
; https://creativecommons.org/licenses/by-sa/3.0/de/legalcode    
; english:                                                      
; https://creativecommons.org/licenses/by-sa/3.0/                
; https://creativecommons.org/licenses/by-sa/3.0/legalcode       
;                                                               
;                          
////                                                            
                                                                
:Revision:                                                 
:doctype: book                                               
:Author:    detlef oertel
:Email:    d.oertel@uib.de
:toc:
   
   
   

[[Doc_fileuib_exitcode.opsiscript]]
= Documentation of opsi library: `uib_exitcode.opsiscript`



* Email:     d.oertel@uib.de
* Version:  1.0.1
* Copyright:  AGPLv3





anchor:isMsiExitcodeFatal[]

[[Doc_func_isMsiExitcodeFatal]]
== Documentation of local function `isMsiExitcodeFatal`


Definition::
`isMsiExitcodeFatal($exitcode$ : string, $allowRebootRequest$ : string, ref $ErrorString$ : string) : string`

Description::
Evaluates the given $exitcode$ as MSI Error and
and gives back a resulting error message on $ErrorString$
If the Error require a reboot the given parameter $allowRebootRequest$
is used to decide if a 'ExitWindows /Reboot' is called or not

* Parameter: `$exitcode$`
** Type: `String`  -  Calltype: `CallByValue`
** Parameter `$exitcode$` Description: +
Exit code given by msiexec

* Parameter: `$allowrebootrequest$`
** Type: `String`  -  Calltype: `CallByValue`
** Parameter `$allowrebootrequest$` Description: +
Should we call 'ExitWindows /Reboot' if the exit code require this ('true' or 'false')

* Parameter: `$errorstring$`
** Type: `String`  -  Calltype: `CallByReference`
** Parameter `$errorstring$` Description: +
Here we get the error string that belongs to the given exit code

* Returns:     Returns string "true" if the exit code points to a critical error.
Returns string "true" if the exit code is not a number (not valid).
Returns string "false" if the exit code is valid but not critical.
* OnError:     Returns string "true"
* SpecialCase:     Winows only
* References:     <<isMsExitcodeFatal_short>> 
<<isAdvancedMsiExitcodeFatal>> 
<<isInnoExitcodeFatal>> 
<<isInstallshieldExitcodeFatal>> 
<<isNsisExitcodeFatal>> 
* Links:     http://msdn.microsoft.com/en-us/library/aa372835(VS.85).aspx
http://msdn.microsoft.com/en-us/library/aa368542.aspx
* Author:     detlef oertel
* Date:     19.9.2018
* Email:     d.oertel@uib.de
* Version:     1.0.1
* Copyright:     AGPLv3


Example:
[source,winst]
----
[actions]
DefVar $ExitCode$
DefVar $ErrorString$
(...)
set $ExitCode$ = getlastexitcode
if stringtobool(isMsiExitcodeFatal($exitcode$, "true", $ErrorString$ ))
	LogError $ErrorString$
	isfatalerror $ErrorString$
else
	Comment $ErrorString$
endif
----



anchor:isMsExitcodeFatal_short[]

[[Doc_func_isMsExitcodeFatal_short]]
== Documentation of local function `isMsExitcodeFatal_short`


Definition::
`isMsExitcodeFatal_short($exitcode$ : string, $allowRebootRequest$ : string, ref $ErrorString$ : string) : string`

Description::
Evaluates the given $exitcode$ as MS Error and
and gives back a resulting error message on $ErrorString$
if the exit code is well known.
For full list of exit dodes use isMsiExitcodeFatal
If the Error require a reboot the given parameter $allowRebootRequest$
is used to decide if a 'ExitWindows /Reboot' is called or not

* Parameter: `$exitcode$`
** Type: `String`  -  Calltype: `CallByValue`
** Parameter `$exitcode$` Description: +
Exit code given by ms

* Parameter: `$allowrebootrequest$`
** Type: `String`  -  Calltype: `CallByValue`
** Parameter `$allowrebootrequest$` Description: +
Should we call 'ExitWindows /Reboot' if the exit code require this ('true' or 'false')

* Parameter: `$errorstring$`
** Type: `String`  -  Calltype: `CallByReference`
** Parameter `$errorstring$` Description: +
Here we get the error string that belongs to the given exit code

* Returns:     Returns string "true" if the exit code points to a critical error.
Returns string "true" if the exit code is not a number (not valid).
Returns string "false" if the exit code is valid but not critical.
* OnError:     Returns string "true"
* SpecialCase:     Winows only
* References:     <<isMsiExitcodeFatal>> 
<<isAdvancedMsiExitcodeFatal>> 
<<isInnoExitcodeFatal>> 
<<isInstallshieldExitcodeFatal>> 
<<isNsisExitcodeFatal>> 
* Links:     http://msdn.microsoft.com/en-us/library/aa372835(VS.85).aspx
http://msdn.microsoft.com/en-us/library/aa368542.aspx
* Author:     detlef oertel
* Date:     19.9.2018
* Email:     d.oertel@uib.de
* Version:     1.0.1
* Copyright:     AGPLv3



anchor:isAdvancedMsiExitcodeFatal[]

[[Doc_func_isAdvancedMsiExitcodeFatal]]
== Documentation of local function `isAdvancedMsiExitcodeFatal`


Definition::
`isAdvancedMsiExitcodeFatal($exitcode$ : string, $allowRebootRequest$ : string, ref $ErrorString$ : string) : string`

Description::
Please note: Import complete file uib_exitcode (not only isAdvancedMsiExitcodeFatal)
Evaluates the given $exitcode$ as AdvancedMsi Error and
and gives back a resulting error message on $ErrorString$
It is also checked if the exit code is one from the embedded msi.
There for is isMsiExitcodeFatal used
If the Error require a reboot the given parameter $allowRebootRequest$
is used to decide if a 'ExitWindows /Reboot' is called or not

* Parameter: `$exitcode$`
** Type: `String`  -  Calltype: `CallByValue`
** Parameter `$exitcode$` Description: +
Exit code given by AdvancedMsi

* Parameter: `$allowrebootrequest$`
** Type: `String`  -  Calltype: `CallByValue`
** Parameter `$allowrebootrequest$` Description: +
Should we call 'ExitWindows /Reboot' if the exit code require this ('true' or 'false')

* Parameter: `$errorstring$`
** Type: `String`  -  Calltype: `CallByReference`
** Parameter `$errorstring$` Description: +
Here we get the error string that belongs to the given exit code

* Returns:     Returns string "true" if the exit code points to a critical error.
Returns string "true" if the exit code is not a number (not valid).
Returns string "false" if the exit code is valid but not critical.
* OnError:     Returns string "true"
* SpecialCase:     Winows only
* References:     <<isMsiExitcodeFatal>> 
<<isAdvancedMsiExitcodeFatal>> 
<<isInnoExitcodeFatal>> 
<<isInstallshieldExitcodeFatal>> 
<<isNsisExitcodeFatal>> 
* Author:     detlef oertel
* Date:     19.9.2018
* Email:     d.oertel@uib.de
* Version:     1.0.1
* Copyright:     AGPLv3



anchor:isInnoExitcodeFatal[]

[[Doc_func_isInnoExitcodeFatal]]
== Documentation of local function `isInnoExitcodeFatal`


Definition::
`isInnoExitcodeFatal($exitcode$ : string, $allowRebootRequest$ : string, ref $ErrorString$ : string) : string`

Description::
Evaluates the given $exitcode$ as Inno Error and
and gives back a resulting error message on $ErrorString$
If the Error require a reboot the given parameter $allowRebootRequest$
is used to decide if a 'ExitWindows /Reboot' is called or not

* Parameter: `$exitcode$`
** Type: `String`  -  Calltype: `CallByValue`
** Parameter `$exitcode$` Description: +
Exit code given by Inno

* Parameter: `$allowrebootrequest$`
** Type: `String`  -  Calltype: `CallByValue`
** Parameter `$allowrebootrequest$` Description: +
Should we call 'ExitWindows /Reboot' if the exit code require this ('true' or 'false')

* Parameter: `$errorstring$`
** Type: `String`  -  Calltype: `CallByReference`
** Parameter `$errorstring$` Description: +
Here we get the error string that belongs to the given exit code

* Returns:     Returns string "true" if the exit code points to a critical error.
Returns string "true" if the exit code is not a number (not valid).
Returns string "false" if the exit code is valid but not critical.
* OnError:     Returns string "true"
* SpecialCase:     Winows only
* References:     <<isMsiExitcodeFatal>> 
<<isAdvancedMsiExitcodeFatal>> 
<<isInnoExitcodeFatal>> 
<<isInstallshieldExitcodeFatal>> 
<<isNsisExitcodeFatal>> 
* Author:     detlef oertel
* Date:     17.5.2018
* Email:     d.oertel@uib.de
* Version:     1.0.1
* Copyright:     AGPLv3



anchor:isInstallshieldExitcodeFatal[]

[[Doc_func_isInstallshieldExitcodeFatal]]
== Documentation of local function `isInstallshieldExitcodeFatal`


Definition::
`isInstallshieldExitcodeFatal($exitcode$ : string, $allowRebootRequest$ : string, ref $ErrorString$ : string) : string`

Description::
Please note: Import complete file uib_exitcode (not only isAdvancedMsiExitcodeFatal)
Evaluates the given $exitcode$ as Installshield Error and
and gives back a resulting error message on $ErrorString$
It is also checked if the exit code is one from the embedded msi.
There for is isMsiExitcodeFatal used
If the Error require a reboot the given parameter $allowRebootRequest$
is used to decide if a 'ExitWindows /Reboot' is called or not

* Parameter: `$exitcode$`
** Type: `String`  -  Calltype: `CallByValue`
** Parameter `$exitcode$` Description: +
Exit code given by Installshield

* Parameter: `$allowrebootrequest$`
** Type: `String`  -  Calltype: `CallByValue`
** Parameter `$allowrebootrequest$` Description: +
Should we call 'ExitWindows /Reboot' if the exit code require this ('true' or 'false')

* Parameter: `$errorstring$`
** Type: `String`  -  Calltype: `CallByReference`
** Parameter `$errorstring$` Description: +
Here we get the error string that belongs to the given exit code

* Returns:     Returns string "true" if the exit code points to a critical error.
Returns string "true" if the exit code is not a number (not valid).
Returns string "false" if the exit code is valid but not critical.
* OnError:     Returns string "true"
* SpecialCase:     Winows only
* References:     <<isMsiExitcodeFatal>> 
<<isAdvancedMsiExitcodeFatal>> 
<<isInnoExitcodeFatal>> 
<<isInstallshieldExitcodeFatal>> 
<<isNsisExitcodeFatal>> 
* Author:     detlef oertel
* Date:     19.9.2018
* Email:     d.oertel@uib.de
* Version:     1.0.1
* Copyright:     AGPLv3



anchor:isNsisExitcodeFatal[]

[[Doc_func_isNsisExitcodeFatal]]
== Documentation of local function `isNsisExitcodeFatal`


Definition::
`isNsisExitcodeFatal($exitcode$ : string, $allowRebootRequest$ : string, ref $ErrorString$ : string) : string`

Description::
Evaluates the given $exitcode$ as Nsis Error and
and gives back a resulting error message on $ErrorString$
If the Error require a reboot the given parameter $allowRebootRequest$
is used to decide if a 'ExitWindows /Reboot' is called or not

* Parameter: `$exitcode$`
** Type: `String`  -  Calltype: `CallByValue`
** Parameter `$exitcode$` Description: +
Exit code given by Nsis

* Parameter: `$allowrebootrequest$`
** Type: `String`  -  Calltype: `CallByValue`
** Parameter `$allowrebootrequest$` Description: +
Should we call 'ExitWindows /Reboot' if the exit code require this ('true' or 'false')

* Parameter: `$errorstring$`
** Type: `String`  -  Calltype: `CallByReference`
** Parameter `$errorstring$` Description: +
Here we get the error string that belongs to the given exit code

* Returns:     Returns string "true" if the exit code points to a critical error.
Returns string "true" if the exit code is not a number (not valid).
Returns string "false" if the exit code is valid but not critical.
* OnError:     Returns string "true"
* SpecialCase:     Winows only
* References:     <<isMsiExitcodeFatal>> 
<<isAdvancedMsiExitcodeFatal>> 
<<isInnoExitcodeFatal>> 
<<isInstallshieldExitcodeFatal>> 
<<isNsisExitcodeFatal>> 
* Author:     detlef oertel
* Date:     17.5.2018
* Email:     d.oertel@uib.de
* Version:     1.0.1
* Copyright:     AGPLv3


