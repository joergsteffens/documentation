////
; Copyright (c) uib gmbh (www.uib.de)
; This documentation is owned by uib
; and published under the german creative commons by-sa license
; see:
; https://creativecommons.org/licenses/by-sa/3.0/de/
; https://creativecommons.org/licenses/by-sa/3.0/de/legalcode
; english:
; https://creativecommons.org/licenses/by-sa/3.0/
; https://creativecommons.org/licenses/by-sa/3.0/legalcode
;
; credits: http://www.opsi.org/credits/
////

:Author:    uib gmbh
:Email:     info@uib.de
:Date:      01.02.2019
:Revision:  4.0.7
:toclevels: 6


include::../common/opsi_terms.asciidoc[]

[[opsi-manual-configed]]
== opsi-Management GUI: 'opsi-configed'

[[opsi-manual-configed-preconditions]]
=== Requirements and operation

IMPORTANT:  Starting on version 4.0.7.5.22 '{opsi-configed}' requires Java runtime environment 1.8 and data from at least version 4.0.6.

The current version of the program is available as an opsi package at https://download.uib.de/. To simplify the installation process, Windows and Linux setup assistants are available at http://download.uib.de/opsi4.1/misc/helper/. Use the `opsi-configed-setup.exe` file for Windows clients or `opsi-configed-linux-setup.tar.gz` for Linux clients. 

The '{opsi-configed}' launches as a start menu item for clients with a graphical interface.

On Linux, it can be started on terminal executing `/usr/bin/opsi-configed` using the following options:

* _--version_

* _--help_ or _-h_ as second alternative

* _--querysavedsearch [SAVEDSEARCH_NAME]_ or _-qs_ _[SAVEDSEARCH_NAME]_

* _--swaudit-pdf FILE_WITH_CLIENT_IDS_EACH_IN_A_LINE [OUTPUT_PATH]_

Alternatively, you can launch '{opsi-configed}' on either operating system with `java -jar configed.jar` Java file, if the required jar archives are available.

The `java -jar configed.jar --help` command displays the following command line options: 

[source, prompt]
----
-l LOC			--locale LOC			Set locale LOC (format: <language>_<country>)-h HOST			--host HOST			Configuration server HOST to connect to
-u NAME			--user NAME			User for authentication
-p PASSWORD	--password PASSWORD		password for authentication
-c CLIENT		--client CLIENT		CLIENT to preselect
-g CLIENTGROUP	--group CLIENTGROUP	CLIENTGROUP to preselect
-t INDEX			--tab INDEX                   Start with tab number INDEX, index counting starts with 0, works only if a CLIENT is preselected
-d PATH			--logdirectory PATH       Directory for the log files
-r REFRESHMINUTES			--refreshminutes REFRESHMINUTES			Refresh data every REFRESHMINUTES  (where this feature is implemented, 0 = never)
-qs [SAVEDSEARCH_NAME]		--querysavedsearch [SAVEDSEARCH_NAME]	On command line: tell saved host searches list resp. the search result for [SAVEDSEARCH_NAME])
--gzip [y/n]							Activate gzip transmission of data from opsi server yes/no
--sslversion PREFERRED_SSL_VERSION	Try to use this SSL/ TLS version
--ssh-key SSHKEY						full path with filename from sshkey used for authentication on ssh server
--ssh-passphrase PASSPHRASE			passphrase for given sshkey used for authentication on ssh server
--version								Tell configed version
--collect_queries_until_no N				Collect the first N queries; N = -1 (default, no collect), 0 = infinite
--help								Give this help
--loglevel L 							Set logging level L, L is a number >= 0, <= 5
--halt								Use  first occurring debug halt point that may be in the code
--sqlgetrows							Force use sql statements by getRawData
--nosqlrawdata						Avoid getRawData
--localizationfile EXTRA_LOCALIZATION_FILENAME							Use EXTRA_LOCALIZATION_FILENAME as localization file, the file name format has to be: configed_LOCALENAME.properties
--localizationstrings													Show internal labels together the strings of selected localization
--swaudit-pdf FILE_WITH_CLIENT_IDS_EACH_IN_A_LINE [OUTPUT_PATH]		export pdf swaudit reports for given clients (if no OUTPUT_PATH given, use home directory)


----
If '{opsi-configed}' runs on a port other than the standard port 4447, specify the port number as ( _host_ : _port_ ) when starting '{opsi-configed}'.

[[opsi-manual-configed-logging]]
==== '{opsi-configed}' logging  

By default, '{opsi-configed}' writes logs in level 3 "Info". Raising log levels to level 4 "Check" or level 5 "Debug" is possible. 

To raise the level, use the command ' --loglevel [Level] ' via command line. In addition, you can activate verbose logging from the Help / ConfigEditor menu. Level 5 logging, since it's extremely verbose and difficult to read, is best suited for situations where the '{opsi-configed}' needs troubleshooting.

Service calls log in Level 4. The Debug level 5 can track events in sequence for a granular view of every action. 

Since version 4.0.7.6.12  the log files are stored by default in the user home directory. In Windows its found by default in:

c:\Users\[User name]\AppData\Roaming\opsi.org\log 

or 

c:\users\[User name]\appdata\local 
in the newest Windows versions

Linux default log file location is the (hidden) subfolder ".configed" in the user home directory.

The current log file is the 'configed.log' file, which is preceded by up to three versions called 'configed_0.log', 'configed_1.log', 'configed_2.log'

Change the default logging directory via command line with option "-d". Using this option sets the logging directory to c:\opsi.org\log for local administrators. 

Non-admin users will use the below directory for logging. 

c:\users\[USERNAME]\appdata\local

To confirm the log file path you currently use, navigate to the Help / Current menu. Copy the path to clipboard to use in an open editor dialog box or to open log files on your default log reader application.

[[opsi-manual-configed-language]]
==== Choosing the language

'{opsi-configed}' tries to use the operating system locale information for its language setting. If the matching translation file is missing, the system defaults to English.  Likewise, if the translation file terms are missing or corrupt, the system also defaults to English.

You can set the locale via command line using: 

-l resp. --locale

Languages and regions use a two-character format. For example en_US for English language and United States region or de_DE for German language and Germany region. Specifying “en” for language is enough because irrespective of the region, the system uses a single language file for every language variant. 

You can switch languages via the File / International menu on a running '{opsi-configed}'session. Switching languages restarts the program and rebuilds the visual components in the new language of choice.

Finally the call parameter

--localizationfile

Allows you to specify a localization file. 

The additional parameter

--localizationstrings

Displays pending translation terms in the localization file. Used to create and test localization files.


[[opsi-manual-configed-login]]
=== Login

.'{opsi-configed}': login mask
image::opsi-configed-login.png["opsi-configed: login mask", width="90mm"]

At logon, '{opsi-configed}' tries to connect to the 'opsi server ( server : port)', which provides an interface for clients to create and read backend data, via https. '{opsi-configed}' uses port 4447 as default, if you use the same port, you don't need to specify it at logon. 

For a successful logon, the user must be a member of the unix opsiadmin group. '{opsi-configed}' saves certain session info in the local user profile (since version 4.0.7) to rebuild the working environment when re-logging, in particular the selected client group. This session data displays a list of servers to which you last connected. The last server used remains on top and you can reconnect to it without making an explicit selection.

Gzip compression over the HTTP is by default enabled. This reduces the amount of data transferred at the expense of a longer processing time due to compression and decompression.  Response times in the local network are shorter without compression, due to the overhead processing. For transmissions over WAN, the opposite is true with relevant differences in performance. 

The "check which clients are reachable" feature scans for linked or connected clients. You enable this feature either from the login screen or via command line. A default refresh interval is 0 min or deactivated. Steer clear of low interval settings to avoid overflowing the network with requests.


[[opsi-manual-configed-copy]]
=== Copy & Paste, Drag & Drop

You can copy data from most '{opsi-configed}' sections with the standard (Ctrl-Insert or Ctrl-C) shortcut keys. This data is available from clipboard for other applications to access. 

Most tables support drag and drop functionality, and will allow you to transfer data to spreadsheet software, like Excel.

[[opsi-manual-configed-mode-selection]]
=== {opsi-configed} modes Client configuration / server configuration / license management

In the top right corner of the window, six icons link to different configuration settings (since version 4.0.4). 

.{opsi-configed}:  Usage modes
//image::opsi-configed-mode-selection.png["{opsi-configed}:  Buttons for (from left to right): Client configuration, Server configuration, License management", width="50mm"]
image::configed-masterbuttons2.png["{opsi-configed}: Button bar", width=400]

The first three icons allow for client, depot and server configuration settings. The last three, display group, product and licensing settings. When pressed, each icon opens its own separate window. A second alternative to configure these settings, is to use the window toolbar to display them (since version 4.0.7).

[[opsi-manual-configed-depot-selection]]
=== Depot selection

In the left corner of the '{opsi-configed}' window are all depot servers managed by your server. The '{opsi-configserver}' and its member clients display by default.  

You can select multiple depots and edit their client configuration at the same time. Editing multiple clients, however, is only possible when the clients depots have identical package configuration. Opsi will reject your request, and display an error message, if you attempt to edit clients with different package configuration.

IMPORTANT: You don't need to perform a data-reload clicking Menu / reload data when switching to a different depot-server. Starting on version 4.0.5, the depot data loads automatically.

Several buttons allow for easier depot selection:

* (=+) : Selects depots with identical product stocks.
* (++) : Selects all (you can use the _Ctrl-a_ keyboard shortcut)
* Depot or description search box.

Use the check mark button to search. 

.'{opsi-configed}': depot selection
image::opsi-configed-mode-depotselection.png["{opsi-configed}: depot selection", width="52mm"]

'{opsi-configed}' saves your work for the next application launch. This means the _depot_, _group_, _user_ and _server_ selection you last worked on displays on your next logon. 

Please note group selection persists when changing depots and may lead to undesired results. Before switching to a different depot, activate another group or client list to avoid this possible nuisance.

[[opsi-manual-configed-client-selection]]
=== Client selection

After a successful login, the main window displays the Client tab. This tab lists clients from the associated '{opsi-depot}' repository or tree view selection on the left panel. See section 4.7, <<opsi-manual-configed-treeview,“Client selection and hierarchical groups using Treeview”>> for additional information. 

Since version 4.0.4, '{opsi-configed}' saves the current user, depot, server and group selection for the next application launch, to continue working where you left off. 

////
<<opsi-manual-configed-treeview>>
////


.'{opsi-configed}': client selection mask
image::opsi-configed-clientselection.png["{opsi-configed}: client selection mask", width=400]


You can select an item in the list or search for a string value using the search field on top. 

Your selection from the drop-down menu determines the query method. The field selection allows you to:

* Search all fields (by default searches all column fields), 

or 

* A specific field

You have several options to choose from when searching (starting on version 4.0.7):

* Full-text: Similar to a search engine, this option will use a space delimited search string and return items that contain either a partial or full term.

* Opening text: searches the beginning of the row entries for a match. 

* Regular expression: interprets the search string as a regular expression according to the rules of regular expressions (described at the java.util.regex.Pattern java doc).

Pressing the enter key leaps to the next search result or row when the search string yields no matching criteria. 

The search field context menu unveils additional functions based on the current search string.


.'{opsi-configed}': Search function in the client selection list
image::opsi-configed-clientselection-search.png["{opsi-configed}: Client search", width=200 ]


[NOTE]
.Examples Search Patterns
=========================================

To find all PC’s with a name or description Miller starting with either lower or upper case M use the following search pattern:

_.*iller.*_

The dot in ". *" means any character, either lower or upper case. The asterisk searches for any number of occurrences followed with matching sequence: 

_.*iller.*_

In other words, this search pattern looks for any characters preceding and following “iller”, including numbers. For example:

_Home of Miller_

is a match, with no other character after “iller”

To ensure we don’t return _Tiller_ in our results, we need a refined search pattern like:

_.*[Mm]iller.*_

Multiple characters inside square brackets means that the value you are looking for contains either one of the enclosed characters. In this case, either _Miller_ or _miller_, but no other string.

Another example, is a pattern search for products:

_0.-opsi.*standard_

Finds all products beginning with “0” followed by _any character_ next to “_-opsi_”, followed by any character ending in “_standard_”.

To ensure the second character is a number, or characters 0 through 9, you can write:

_0[0123456789]-opsi.*standard_

A shorthand method for writing _[0123456789]_ is _[0-9]_. This means an uninterrupted partial sequence of characters from 0 to 9, thus reducing the search pattern expression to:

_0[0-9]-opsi.*standard_

Matching products include:.

_03-opsi-abo-standard_

or

_05_opsi-linux_standard_

Additional regular expression information usage is available in the java API documentation, keyword "java.util.regex.Pattern".


=========================================



[[opsi-manual-configed-client-selection-table]]
==== The clients list

The clients list has the 'client name', 'description', 'on' state, 'IP address' and 'last seen' columns by default.

* 'Client name' is the fully qualified hostname including domain 

* 'Description' provides an editable outline in the top right corner 

* 'On' queries and displays connected clients. You can activate this feature in the login screen and via call parameters. By default, this option is 0 min or switched off.  

.'{opsi-configed}': Connected clients
image::configed_toolbar_icons_connected.png["{opsi-configed}: Button: Check which clients are connected"]

.'{opsi-configed}': Reachable clients
image::opsi-configed-client-reachable.png["Client reachable",width=20]

.'{opsi-configed}': Unreachable clients
image::opsi-configed-client-unreachable.png["Client unreachable",width=20]


* 'IP address' column displays the clients IP address the opsi server uses.

* 'last displays the client’s last opsiconfd web service connection timestamp. 

The following columns are inactive by default:

* 'session info' (data is retrieved from the operating system running on the specific client)

* 'inventory number' (displaying an optional inventory string)

* 'created' (client creation time stamp)

* 'opsi mac address' (clients hardware mac address registered with opsi)

You can activate these columns using the context menu or edit which columns display during the opsi-config startup, at the host parameters / configed 'configed.host_displayfields' property fields.

.'{opsi-configed}': Column configuration for the clients list
image::opsi-configed-config-host-displayfields.png["{opsi-configed}: change the default for visible columns in the clients list", width="82mm"]

Adding the 'session info' column enables the "request session information from all clients" button.

.'{opsi-configed}': 'Session info button'
image::configed_toolbar_icons_sessions.png["{opsi-configed}: Button SessionInfo"]

When you click the session info button,'{opsiconfd}' attempts to retrieve active user sessions from all clients. This information displays in the session info column. Select specific clients, via the context or the main menu entry 'OpsiClient' instead of using the active users button to avoid network timeouts.

You can search for the computer where the user is currently logged on, since the search function extends across all displayed columns. 

Click on any title column to sort the client list. 

[[opsi-manual-configed-client-selection-selecting]]
==== Selecting clients

You can select one or multiple clients to work with. Clicking the funnel icon, or using 'Grouping / Show only selected clients' from the menu, fine-tunes or filters the client list. 

Save a particular client group with the 'Save Grouping' button or navigating to the 'Grouping / Save group' menu and entering a name.

Drag and drop specific clients to an existing group, displayed in tree view.

Filter clients using various configuration criteria with defined selection icon or the 'Selection / Define search' menu option. 

.'{opsi-configed}': Selection dialog
image::configed_clientselection.png["{opsi-configed}: Define Client Search Window", width="73mm"]

In addition to opsi’s ability to query general client properties like name or comments, you can search for specific hardware and software criteria, either installed on a client PC or residing at the opsi server depot. Furthermore, you can combine search criteria using logical 'AND'/'OR' operators or negated by a preceding 'NOT' (use the NOT button besides the property name). Fix or combine asterisks '*' as wildcard symbols for additional refinement. 

Store and tag your search string via the 'Selection / Use saved search' menu. 

.'{opsi-configed}': Saved Search
image::configed_clientselection2.png["{opsi-configed}: Saved Searches"]

You can trigger a stored search query from the command line by adding the “-qs” flag along with the tagged search string while the '{opsi-configed}' editor is executing. If you omit the specific tagged string, all available saved search strings will display.

To detect failed installations, use menu item _Selection_ / _Failures with product_ or _Failures occurred_ and select the desired criteria (today, since yesterday, …) starting on version 4.0.5. +

Choose _Failures with product_ to get a list of all products. When you select a single product, all clients with failed installations of such product will display. 

Failures _occurred_ / _today_ displays clients with failed installations during the chosen time span, in this case “today”. +

.'{opsi-configed}': Failed Actions
image::opsi-configed-failedactions-today_en.png["{opsi-configed}: Failed Actions - today", width=250]


[[opsi-manual-configed-treeview]]
=== Client selection and hierarchical groups using the tree view

Using tree view, on the left panel of the '{opsi-configed}' window, you can group clients in a convenient manner. 


[[opsi-manual-configed-treeview-principle]]
==== Basic concepts

Tree view categorizes clients into _groups_, _directory_ and _client list_. All clients of the selected depots display in the group client list.

The 'groups' and 'directory' categories are different for each client and can have multiple locations in 'groups' but a unique location in the 'directory' subtree. Also, a new client is automatically allocated to the 'NOT_ASSIGNED' group by default, unless you assign it to another directory subgroup.

When you click on or select a client, all groups it belongs to are color highlighted. 

.'{opsi-configed}': Tree view with clients and groups
image::opsi-configed-treeview.png["{opsi-configed}: Treeview with clients and groups", width="66mm"]

[[opsi-manual-configed-treeview-howto]]
==== How to ...

Clicking on a node or group will display all clients contained inside it, on the 'Clients' tab. This action does not allow you to edit clients as a group.

Clicking a single client using tree view, or selecting multiple clients with Ctrl-click or Shift-click, means they are simoultaneously editable, and they will display in the client tab. 

Double-clicking on a group displays all clients belonging to it and makes them editable simultaneously, or en masse.

Using this panel, you can edit clients while you simultaneously work on different tabs, such as log files, without having to navigate back and forth one action at a time.

In summary, tree view displays groups you created according to your client selection. You can create additional subgroups right-clicking the parent group, for example Groups, and selecting "create subgroup".

////
<<opsi-manual-configed-client-selection-selecting>>.
////

.'{opsi-configed}': Using the context menu to create a new subgroup
image::opsi-configed-treeview-generate-group.png["{opsi-configed}: Using the context menu to create a new subgroup", width="49mm"]

Enter the name of the group and an optional description.

.'{opsi-configed}': Dialog: Group name
image::opsi-configed-treeview-groupname.png["{opsi-configed}: Dialog: Group name", width="46mm"]

Add clients to a group by holding the left mouse button while dragging to the desired group and dropping from:

* the 'clients' tab to the group in tree view 
* clients in another group, such as the main node
* moving clients from a group in the tree view control to a other group in the tree view (left mouse button)
* copying clients from a directory group to another (Ctrl-left mouse button)

A group can:

* move to a different location via drag and drop.

Use the context menu to:

* create a subgroup
* edit the group properties
* delete the group together along with its subgroups and clients
* remove all clients keeping the group and its subgroups
* display clients and select them all in a single step

[[opsi-manual-configed-client-editing]]
=== Client processing / Client actions

On the client tab, you can run client specific operations using the menu and context menu. View and edit the clients properties on the right.

.'{opsi-configed}': 'Clients' tab context menu 
image::opsi-configed-client-contextmenu.png["{opsi-configed}: : context menu 'Clients' Tab", width="51mm"]

[[opsi-manual-configed-module-uefi-wan-installbyShutdown]]
==== Install By Shutdown, UEFI boot and WAN configuration

The client information panel, to the right of the client list, allows you to configure standard client settings. Please note that UEFI boot support and the WAN configuration are currently co financed expansion modules. If the modules are not active, the options will appear greyed out.


* Install By Shutdown: +
<<opsi-on-shutdown, Section 9.18 , "opsi Installation by Shutdown">> , describes the opsi's standard _at shutdown_ software installations. 

* UEFI Boot: +
The UEFI-Boot checkbox shows whether a client is configured for UEFI boot. When active, the configuration 'clientconfig.dhcpd.filename' changes to 'linux / pxelinux.cfg / elilo.efi'. (For additional information refer to <<opsi-manual-uefi, Section 9.6, “opsi with UEFI / GPT”>>)

* WAN configuration: +
The '{opsi-configed}' checks if the standard WAN configuration is available for the client. Clicking the WAN configuration check box activates this feature. 

As of version 4.0.7.6.5, this configuration is no longer hard-coded, but read from the server host parameters '_configed.meta_config.wan_mode_off*_' or interpreted as its negation. This applies only if you kept the '_default Meta_Config.wan_mode*_' parameters recommended by uib GmbH and addressed in the <<opsi-manual-wansupport-recommended-config, “Recommended configuration when using the WAN/VPN extension module”>> extension".

TIP: You can check whether the client has WAN or UEFI boot configuration by looking at the client tab under the WAN or UEFI columns. If you don’t see either column displayed, you can activate them on the 'OpsiClient' menu, by right clicking over the client table and selecting which column to display, or permanently via the _'configed.host_displayfields'_ entry in the server host parameters.  The client list columns behave as any traditional spreadsheet and allows you to sort in ascending or descending order and to perform searches. 


.'{opsi-configed}': Extended column view for opsi clients
image::opsi-configed-clientinfos.png["{opsi-configed}: Erweiterte Spaltensicht für opsi-Clients", width="150mm"]




[[opsi-manual-configed-client-editing-wakeonlan]]
==== WakeOnLan ('Wake selected clients')
Choosing this menu entry, you will send the selected clients a WakeOnLan signal.

Since version 4.0.7 you can choose


* if the network signal is meant to be sent to the selected clients at once
* which delay should be between the waking of two clients
* when the process shall start (via a scheduler).

If a client is assigned to a depot server which is not the configserver then the Wake On Lan signal is not directly sent to the client,
but the '{opsi-configed}' tries to establish a HTTPS connection to the 'opsiconfd' of the depot server which in turn sends the Wake On Lan package to the client inside its network segment.

.'{opsi-configed}': Scheduler for Wake On Lan
image::opsi-configed-wake-on-lan-scheduler.png["{opsi-configed}: Scheduler for Wake On Lan", width="120mm"]

It should be observed that it is the '{opsi-configed}' which triggers the actions, therefore the program must not be shut down in the meantime.


[[opsi-manual-configed-client-editing-ondemand]]
====  Fire opsiclientd event (Push Installation)

This menu entry is used to send to the '{opsi-client-agent}' on the selected clients a command to fire the event
which is selected in the submenu. The standard event is "on demand" which means the demanded action is started at once.
Be aware that this may have the effect that the client is rebooting without any warning.

To incorporate additional events (which should be configured in the opsiclientd.conf) into the submenu you have to edit the
config configed.opsiclientd_events via the tab (server) host parameters.

All messages will be shown on the active desktop. If the client isn't reachable, you will get a message.


What happens exactly if you fire the event 'on_demand' can be configured in the event 'on_demand' configuration.

[[opsi-manual-configed-client-editing-send-message]]
==== Sending messages ('Show popup message')

Choosing the menu entry 'Show popup message' you will get a small edit window where you can type in your message.

.'{opsi-configed}':  opsi message edit mask
image::opsi-configed-client-message-editing.png["{opsi-configed}:  opsi message edit mask", width="51mm"]

By clicking on the red tick you will send the message to the selected clients.

At the selected clients a message window will appear.

.'{opsi-configed}':  opsi message display dialog
image::opsi-configed-client-message-reading.png["{opsi-configed}:  opsi message display dialog", width="53mm"]

[[opsi-manual-configed-client-editing-sessioninfo]]
==== Session info for selected clients

The selected clients get the signal to communicte their session information. The data is shown in the session info column
(if visible).


[[opsi-manual-configed-host-actions-delete-package-caches]]
==== For WAN-Clients: Delete package cache

On WAN clients there are occasional problems with the package cache synchronization. This function resets the cache.


[[opsi-manual-configed-client-remotecontrol]]
==== Call external remote control tools for selected clients

The option 'Remote Control Software call' in the client context menu as well as the client main menu (since '{opsi-configed}' version 4.0.1.11) is very powerful. It can be used
to use any command that the operating system offers, parametrized e.g. by the client name.

As an example there are configurations automatically generated which can be used to send a `ping` to the selected client: one
`ping` command that works in Windows environment and one command that requires a Linux X environment. Please observe:
  '{opsi-configed}' calls obviously the command in its environment, i.e., we need the Linux command when the  '{opsi-configed}'
  is running in Linux.

.'{opsi-configed}': Choice of Remote Control  call
image::opsi-configed-client-remotecontrol-choice.png["{opsi-configed}: Choice of Remote Control call", width="52mm"]

The selection window has three parts. The upper part lists the names of the existing commands. It follows a line, which shows
the selected command and offers the chance to edit it (if this is allowed). Additionally, the line contains the buttons
to execute or abandon the action. The third
text area of the window captures any messages that are returned by the operating system when
calling the command.

These calls offer a quasi infinite range of opportunities. For example, a command can be configured to open
a Remote Desktop connection to the selected client (if it allows such connections). On a Windows system, such a command
is

`cmd.exe /c start mstsc /v:%host%`

In a Linux environment the following command can be used:

`rdesktop  -a 16 %host%`

In these examples serves `%host%` as a variable, which '{opsi-configed}' automatically replaces
by the value for the selected host. Other variables that can be analogously used in the commands are:

- `%ipaddress%`
- `%hardwareaddress%`
- `%opsihostkey%`
- `%inventorynumber%`
- `%depotid%`
- `%configserverid%`

If the command is marked by the additional server configuration entry  'editable'  as `true`,
then the command line allows ad hoc editing. For example, you may supply a requested password or vary
the command as needed.

CAUTION: If there is some command declared as 'editable' then in fact 'any' program addressed
at the client computer can be called by changing the editable command.

If more than one client is selected the command will be executed in a own thread for each client.

The list of remote control commands
is editable via server configuration entries (cf.
<<opsi-manual-configed-hostproperties>>).


To define a command `example`, at minimum an entry `configed.remote_control.example`
(or `configed.remote_control.example.command`) must be generated. The value of property has to be the command
(in which the variables `%host%`, `%ipaddress%` etc. can be used). Additionally, an entry `configed.remote_control.example.description`
can be defined. The value of this entry will be shown as tooltip (if not existing, the command itself will serve as tooltip content).
Furthermore, a Boolean entry `configed.remote_control.example.editable` can be added. If its value is set to `false` the command
cannot be edited in the selection window.


.'{opsi-configed}': Editing of remote control commands in the server properties editor
image::opsi-configed-properties-remotecontrol.png["{opsi-configed}: Editing of remote control commands in the server properties editor ", width="110 mm"]



[[opsi-manual-configed-client-editing-shutdown]]
==== Shutdown / reboot of selected clients

You may send the selected clients a shutdown or reboot signal. You have to confirm this command at the opsi-configed.

CAUTION: If the client received the signal, it will going down with out any more questions.

[[opsi-manual-configed-client-editing-manage]]
==== Delete, create, rename and move clients

You may delete the selected clients from the '{opsi-server}'.

If you choose to create a client, an input mask opens. There you enter or confirm the required data – client name without domain specification, domain name, depot server name. You may add a textual description for this client and notes on this client.

.'{opsi-configed}':  creating a client
image::opsi-configed-client-new.png["{opsi-configed}:  creating a client", width="75mm"]

The mask also contains fields for an optional declaration of the IP-number and the ethernet (MAC) address of a client. If the backend is activated for the configuration of a local dhcp-server (which is not the default setting), this information will be used to make the new client known to the dhcp-server. Otherwise the MAC address will be saved in the backend and the IP-number will be discarded.

When creating clients you can directly for the new client specify to which group it should belong,
as well as which netboot product should be directly set on setup. In addition, you can activate
directly the Install by shutdown, UEFI Boot and the (standard) WAN configuration from the beginning.
These settings can easily be made in the Hosts-List.
These configurations are only available since the version 4.0.5.8.1 .

Since opsi 4.0.4 it is possible to disable the options for creation and deletion of an opsi client.
This is used if the client creation should be managed by a different service, eg. the UCS service.

For the configuration of these options, a host parameter (config) is provided. It is named `configed.host_actions_disabled` and
offers the list values

* `add client`
* `remove client`

(multiple selection allowed). The default is the empty selection meaning that no option is disabled.

The default setting can be changed so that adding and removing clients from the  '{opsi-configed}' is disabled:

[source,prompt]
----
opsi-admin -d method config_createUnicode "configed.host_actions_disabled" "Disable host actions" ["add client","remove client"] ["add client","remove client"] false true
----




You may rename a selected client, you will be asked for the new name.

Moving a client to a different depot-server. If clicked the following windows appears with a list of existing depot-servers

.'{opsi-configed}': change the depot of a client
image::opsi-configed-client-change-depot.png["{opsi-configed}: change the depot of a client", width="53mm"]

[[opsi-manual-configed-productconfiguration]]
=== Product configuration

Switching to the tab 'Product configuration' you get a list of available software packages with its installation status and action status for the selected clients.

.'{opsi-configed}': product configuration mask
image::opsi-configed-localbootproducts.png["{opsi-configed}: product configuration mask", width=400]


Since opsi 4.0.4 a search function is added.

With the search function, products can be searched by product names and (if desired) in combination with special values in the fields of the product table (like searching the client table).
Therefore a search string can be entered. The search starts immediately and the first matching line is marked . If there is no match to be found (or characters are removed from the search string), the first line of the table is marked.

The context menu offers some more options.

.'{opsi-configed}': Product search with context menu
image::configed_productsearch.png["{opsi-configed}: Product search with context menu", width="300"]

To get a better overview, activating the filter function reduces the product view to the selected products only.
The selections stays active until the filter is disabled by clicking the filter button again.



If there is a different status for the selected clients this will be marked grey ('undefined'). The list of the selected clients is shown at right on top.

You can also sort the product list by clicking at the column header.

This are the columns:

* 'Status' is the last announced state of the product and can hold the values 'installed', 'not_installed', 'unknown'. The table shows an empty cell if the value is 'not_installed'  to improve the usability of the view. The cell becomes grey if a multitude of selected clients is selected and does not share a common value (grey coloring represents the pseudo value 'mixed').

* 'Report' informs about the progress or the result of the last action using the pattern <action result> (<last action>). During an installation process there may be indicated 'installing', afterward e. g. 'failed(setup)' or 'success (uninstall)'.

* The column 'Requested action' holds the information which action is to be executed. Possible values are 'none' (shown by an empty cell) and the action types for which scripts are defined in the product package (possible values are 'setup', 'uninstall', 'update', 'once', 'always', 'custom').

* The field 'Version'  displays the software version number combined  with the opsi package number of the software package installed on the client.

There are two more columns which can be activated via the context menu:

* 'Priority class' displays a priority value that is assigned to the product (highest priority +100, lowest priority -100). It influences the product order when products are installed (by virtue of the product_sort_algorithm)

* The 'position' column displays the product ordering forecast for installation sequences.

Choose a software product to get more product information in the right part of the window like:

* 'Complete product name': full product name of that software package.

* 'Software/package version': 'software version'-'version of the opsi package'  of the software package (specified in the opsi installation package).

* 'Product description': free text to describe the software.

* 'Hints': free text with advices and caveats for handling the package.

* 'Requirements': A list of other products which the selected product (say 'A') depends on combined with the type of dependency: 'required' means that A requires the other product ('B'), but it doesn't matter whether B is installed before or after A. 'pre-required' means B has to be installed before A. 'post-required' means B needs to be installed A. 

* 'Configuration for client': It is possible to define additional properties for a product. Their values can be evaluated in a setup script to configure the product per client. Because of the intrinsic complexity of a property definition there is a specific GUI element for displaying and editing the table of properties:

[[opsi-manual-configed-property-editing]]
=== Property tables with list editor windows

A property table is a two-column table. In each row, the first column contains a property name,
the second column displays the assigned property value(s).

It may be configured that a tool tip is displayed showing some information on the meaning of the property and the default value.

.'{opsi-configed}': property table with tooltip
image::opsi-configed-editlist1.png["{opsi-configed}: property table with tooltip ", width="63mm"]


If you click at a value a window pops up: the 'list editor' for this property.
It shows a value resp. a list of preconfigured values with the current value (resp. a combination of values) as selected.

.'{opsi-configed}':  list editor, selection list
image::opsi-configed-editlist2.png["{opsi-configed}:  list editor, selection list", width="55mm"]


Clicking a new value changes the selection.

If the property value list is editable (new values may be added to the existing list resp. existing values changed) the window comes up with an edit field for the new or modified values.

.'{opsi-configed}': list editor, edit field
image::opsi-configed-editlist3.png["{opsi-configed}: list editor, edit field", width="55mm"]

The most comfortable way to get a new value that is a variant of an existing one
is double clicking the existing value in the list. This copies it into the edit field where it can be modified.

As soon as the edit field contains a new value – not yet occurring in the value list –
the plus button will be activated with it the new value can be added to the list of values.

If multiple values are allowed – as it should be e.g. for the property 'additional drivers' – a value may be added to the set of selected values by Ctrl-Click .
The very same action removes a selected value from the set. The minus button empties the selection set completely.

When the list has been edited the green check mark turns to red as usual in the opsi-configed. Clicking it takes the new selection as new property value (and finishes editing). Clicking the blue cancel button stops editing and resets the original value.


[[opsi-manual-configed-property-editing-secrects]]
==== Hidden Password Property Values

A property value that is a password should not be directly displayed.

Until this feature will be constructed as a special value type in some coming release the hack is used that a property value
will only be displayed if the user explicitly requests it in cases (since version 4.0.7 ):

* the property key text contains the string 'password'
* the property key text starts with the string 'secret'

E.g., the value of the property 'root_password' in the Linux netboot products is displayed as a sequence of stars  (until the user does the edit click and explicitly confirms to showing the password).


[[opsi-manual-configed-netbootproducts]]
=== Netboot products

The products on tab 'Netboot products' are mainly used to install the client OS (operating system) and are listed and configured like the products on tab 'Product configuration'.

If for the selected client(s) a netboot product is set to 'setup', the correspondent bootimage will be loaded and executed at the next client reboot.

.'{opsi-configed}': mask to start the bootimage
image::opsi-configed-netbootproducts.png["{opsi-configed}: mask to start the bootimage", width=400]

This is usually done to initiate an OS installation or any other bootimage task (like a memory test etc.)

[[opsi-manual-configed-hardwareinformation]]
=== Hardware information

With this tab you get the last detected hardware information for this client (only available if a single client is selected).

.'{opsi-configed}': Hardware information for the selected client
image::opsi-configed-hardwareinformation.png["{opsi-configed}: Hardware information for the selected client", width=400]

==== Automatic driver upload

To simplify and automate the drivers of special clients and to upload them on the '{opsi-depot-server}', since version 4.0.5, the option to select the paths from the hardware information is possible, thus the opsi-configed via the Share delivers the above mentioned.
The two offered byAudit driver paths are composed of the manufacturer and the product or the model, which are respectively read from the computer and the mainboard. By clicking the right button to upload a driver, a new window will be displayed to add more settings.

.'{opsi-configed}': Hardware information - driver upload
image::opsi-configed-hardwareinfo-treiberintegration.png["{opsi-configed}: Hardware information - driver upload", width=400]

If you open the '{opsi-configed}' on a Linux system, it is not directly possible to carry out a driver upload because the connection is carried out via a Share. This needs to be made manually. However, the methods or directory structures are an essential aspect of the drivers integration for linux users as well as for windows users.

Without further settings, the driver upload of a Windows computer, works only if the connection to the Share is enabled.

Among other things, information must be given in a new window, like to which Windows product should the driver be prepared, which drivers are to be uploaded and with which method or the directory in which the driver integration takes place. The target directory is accordingly changed with the selection of another method. The previously selected byAudit driver path can be found again by default in the selected method 'byAudit', that specifically integrates the selected driver for the type of machine.


Following methods and directories are possible:

 * 'standard': For the drivers which are found in `./drivers/drivers/`, the driver will be matched to the corresponding hardware using the PCI IDs (i.e. USB- or HD_Audio-ID) in the description file, and then integrated into the Windows setup as needed. It may be the case that the drivers found by opsi in this location do not necessarily work with your hardware. For the drivers which are found in `./drivers/drivers/`, the driver will be matched to the corresponding hardware using the PCI IDs (i.e. USB- or HD_Audio-ID) in the description file, and then integrated into the Windows setup as needed. This is the fall back directory for all clients.

 * 'preferred': In the case that you have to support special hardware, and you can find the additional drivers from the manufacturers, then use the following procedure to include them in the installation. Place the additional drivers in their own directory under: `./drivers/drivers/preferred` (the naming and depth of the directory structure is not important). Drivers that are found in the directory `./drivers/drivers/preferred` will be integrated into the Windows setup, assuming that opsi finds a suitable match to the drive hardware based off of the PCI IDs (i.e. USB or HD_Audo-ID) in the description file. Problems can occur when the same PCI ID of the drivers is found in `preferred`. In this case, a direct mapping of the drivers to the devices is needed.

 * 'excluded': It could happen that the manufacturers include different drivers for different operating systems (i.e. Vista vs. Win7) or different configurations (ie. SATA vs. SATA RAID).  The `create_driver_links.py` cannot make this distinction.  If you think the wrong driver has been installed, then move the driver to the 'drivers/exclude' directory and then call `create_driver_links.py` again.  Drivers in the directory 'drivers/exclude' are not used during the integration.

 * 'additional': When installing additional drivers based on the PCI-IDs or USB-IDs, they should be installed under the directory `./drivers/drivers/additional` (where name and depth of the directory structure is not important).  You can map one or more drivers to a client using the Product-Property 'additional_drivers' and a list of driver directories under `./drivers/drivers/additional`.  The directories specified by 'additional_drivers' are searched recursively until all drivers are found.  This method can be used to make a specific directory based on the client type (i.e. dell-optiplex-815).

 * 'byAudit': The previously described mechanisms that directly map drivers to devices is automated since the 4.0.2 Release 2 of opsi.  Opsi will search the directory `./drivers/drivers/additional/byAudit` for a director name that matches the field 'Vendor' that was given in the Hardware Inventory. This 'Vendor' directory will be search for a 'Model' directory that corresponds to what is seen in Hardware Inventory.   If this directory is found, then it will be manually assigned to the product property 'additional_drivers'. The directory name 'byAudit' is case sensitive.  The directory names for 'Vendor' and 'Model' are not case sensitive ('Dell' and 'dELL' are treated the same way).

Some manufacturers use model names that are very delicate to this method, since some special characters such as / are not allowed to be used in files or directory names.
An example for a model name could be: "5000/6000/7000".
A directory with this name is not allowed because of the special characters. Since the third Service Release from opsi 4.0.3 the following special characters: < > ? " : | \ / * were replaced internally with an underscore "_" character.
 With this change can the above example be replaced with: "5000_6000_7000" the directory will automatically be shown, even though the directory structure information in the hardware inventory is not visually the same.

IMPORTANT: After the driver upload please execute `create_driver_links` in the '{opsi-depotserver}'.

[[opsi-manual-configed-softwareinventory]]
=== Software inventory

With this tab you get the last known software information for this client (only available if a single client is selected).

.'{opsi-configed}': Software information for the selected client
image::opsi-configed-softwareinventory.png["{opsi-configed}: Software information for the selected client", width=400]


[[opsi-manual-configed-logfiles]]
=== Logfiles: Logs from client and server

The client specific log files are stored on the server and visible with the opsi-configed via the Tab 'log files'.

The level up to which the log lines are seen can be chosen by a slider (wheel mouse enabled), so that errors can be easily found.

It's also possible to search in the log file (to continue the search press 'F3' or 'Ctrl-L' = last search repeated).


.'{opsi-configed}': Display of the log file in the opsi-configed
image::opsi-configed-logfiles.png["{opsi-configed}: Display of the log file in the opsi-configed", width=400]


[[opsi-manual-configed-product-defaultproperties]]
=== Product default properties
To change the default values of the products for one or more opsi-depots, there is a tab, called _Product default-properties_.
This is only available if you select _Properties of depots_ (which is the second button at the top right hand side). +
In the main table, all products are listed with the product version as well as the package version.

If a product is selected, at the top of the right side (as is customary for the client product configuration)
general information about the product packages is shown. Below is the list of all depots,
that have installed the selected product. The table below with the property keys and values
is also known from the client product configuration.

[[image-configed-product-defaultproperties]]
.'{opsi-configed}': product default properties
image::opsi-configed-produkt-defaultproperties-jedit-different-values_en.png["{opsi-configed}: Product default properties", width=400]

You can select a single depot or multiple depots to change the default values
(which are also called the depot values) of the product.
As the default, all available depots are preselected. With the usual shortcuts
(_Ctrl-a_, _Ctrl-Click_ or _Shift-Click_) multiple or all clients can be selected. +
If the property value is shown grayed (see <<image-configed-product-defaultproperties>> - ``gui_language''),
the values for that property differ on the selected depots.
On the right side of the depots are three buttons:

* (=+): Mark all depots that have identical values  +
All depots, that have the same default values, are marked.
* (++): All depots are marked.
* (globe): set the package default values +
The original package default values of the products will be set for the selected depot(s).



[[opsi-manual-configed-hostproperties]]
=== Host parameters in client and server configuration

There are many configuration options for the opsi server and the opsi clients
that may be set or changed via the tab 'Host parameters'. Server defaults are
set in the mode 'server configuration', client specific values
in the mode 'client configuration' plus manual selection of the 'Host parameters' tab
(see also <<opsi-manual-configed-mode-selection>>).

On principle, these configuration entries ('config objects' of the '{opsi-server}')
are conceived as lists of values. Therefore they are
edited via the list editor component (cf.
<<opsi-manual-configed-property-editing>>).

Depending on the specific type of a configuration object,

- the elements of the list can be of type text (`Unicode`) or of type `Boolean` (i.e. `true`/`false`);

- the set of all values from which elements can be selected may be fixed or extensible.

- the object has a defaultValues-entry, which comprises in the singleValue case exactly one
list element, in the multiValue case some partial list selected from the list of all possible values.

New configuration objects can be created via the context menu of the server host parameters.
At this place it is also possible to remove existing entries.

The relationship of server and client entries is a little bit complicated.

- Server entries hold the defaults for client entries (this is the defaultValues entry in the server configuration object)

- Consequentliy, if a client entry is needed a server configuration object must be created beforehand.

- And, when a server entry (a config object) is deleted,
the depending client entries (called config states) are (automatically) deleted as well.

- If the client related value is shown as identical with its (server based) default value this may be be
because there does not exist a client specific data base entry or because the client value is identical
with the server default value. In the first case the client value changes when the server default value
gets new contents, in the second case the client remains unchanged.

- In order to work comfortable with this situation since opsi-configed version 4.0.7.6.5 the context menus
of the client host properties offer the options (1) to remove the specific client values, so that from now on
only the current server values are decisive, (2) to fix the  specific client values to the current server values.

- if the currently presented client value iis not identical with the server default value it is given in a bold font.

- There are configurations objects for which client values can  be created and edited but in fact only the server
objects are used. In most cases, the current configed does not show them any more in the client parameters view.

To get more structure the configurations objects are categorized in some (predefined)
groups. The groups are listed in a tree-like manner on the left part of the panel. The entry name/value pairs
belonging to the selected group are shown in the right part of the panel. Wheel mouse scrolling is enabled
as well on the left as on the right side.

.'{opsi-configed}': Tab Host parameters (as server configuration)
image::opsi-configed-hostparameters-EN.png["{opsi-configed}: Tab Host parameters (Server- and Client configuration)", width=400]

.'{opsi-configed}': Tab Host parameters (context menü of a client entry)
image::opsi-configed-hostparameter_setting.png["{opsi-configed}:  Tab Host parameters (context menü of a client entry)", width=250]





[[opsi-manual-configed-hostproperties-userroles]]
==== Management of user rights and roles

Starting with version 4.0.7.5 the '{opsi-configed}' includes the user roles function.

CAUTION: In order to use this feature  the module _user roles_ must be activated in the modules_-file.

In the interface, in the overview of the server host parameters, the category _user_
shows the availability of the function (not necessarily active).
The _user_ branch of the properties tree starts with a boolean entry

[source,prompt]
----
user.{}.register
----

with default value _false_.

The other entries at this location represent the default values for the user-specific configurations of the server console (cf.  <<opsi-manual-configed-serverconsole>>).

To activate the user role extension you need to:

1. Set the value of _user. {}.register_ to _true_.
2. Load a modules file that has the _userroles_ extension temporarily or permanently activated.

When the user-role extension is activated, an entry is created in the properties tree for the logged-in user.
The default settings used for the administration of rights are like the "classic" requirements for an administrator,
that means, that this user has no restriction whatsoever. E.g., for a user named _admindepot1_ the following entries are generated:

[source,prompt]
----
user.{admindepot1}.privilege.host.all.registered_readonly	[false]
user.{admindepot1}.privilege.host.depotaccess.configured	[false]
user.{admindepot1}.privilege.host.depotaccess.depots		[]
user.{admindepot1}.privilege.host.opsiserver.write 		[true]
----


These four items mean:

- _admindepot1_ is _not_ restricted to read-only access to the server (a pure read-only access might be appropriate for a help desk staff member);
- depot restrictions do not exist or are not taken into account;
- consequently, the list of depots available to the user can stay empty
(and if some depots are entered, this has no effect);
- the user is allowed to edit config server settings of all kinds.

In the case that the access of _admindepot1_ is to be restricted to the computers in the depot server _depot1_, the following should be set:

- _host.depotaccess.configured_ is to be set to _true_;
- the value "depot1" is to be put into the list _host.depotaccess.depots_.

After a complete data reload, clients from other depots are not more visible to _admindepot1_
(and also only the depot settings for _depot1_ are accessible).

CAUTION: _admindepot1_ him/herself can change this settings as long as she/he owns the privilege _host.opsiserver.write_

In order to complete the restriction, it therefore is required to set

- _host.opsiserver.write_ to _false_.


CAUTION: The privileges which are set in this way restrict only the functionality of the '{opsi-configed}'.
Until further notice, they have no effect if the {json-rpc} interface of the opsi-server is accessed by other means.


[[opsi-manual-configed-depotconfiguration]]
=== Depot configuration

In the mode 'Properties of depots' you will see the tab 'Depots'. There is a drop down menu to select the depot. After selecting the depot you may change the properties of the '{opsi-depot}'.

see also:
////
<<opsi-manual-configed-mode-selection>>)
////

.'{opsi-configed}': Tab Depot configuration
image::opsi-configed-depotconfiguration.png["{opsi-configed}: Tab Depot configuration", width=400]

[[opsi-manual-configed-groupactions]]
=== Group actions

The button "group actions" in the main button bar (cf. <<opsi-manual-configed-mode-selection>>)
opens a window for group related functions.

At the moment, it provides only one function which is relevant for the opsi-localimage module.

* to search for an operating system, that had been installed on all of the clients of the selected group and therefore can be offered for all of the clients of that group.

.'{opsi-configed}': Group actions (for opsi-local-image)
image::configed_groupaction_localimage.png["{opsi-configed}: Group actions (for opsi-local-image)", width=400]


[[opsi-manual-configed-packageactions]]
=== Product actions

The button "product actions" in the main button bar (cf. <<opsi-manual-configed-mode-selection>>)
opens a window for functions related to products resp. packages.

Currently it offers two options:

* An .opsi file (opsi package) can be selected or entered and can be uploaded to the opsi server; the default upload directory on the server is the network (samba) share named opsi_workbench. The button click starts installing the package on the server, like invoking the opsi-package-manager.

* The WinPE files and install files for an Windows product (Windows Vista and above) can be uploaded to the server product directory (share opsi_depot), so that windows products do not have to be managed from the server side.

.'{opsi-configed}': package  and product actions
image::configed_package-actions.png["{opsi-configed}: packet actions", width=400]


[[opsi-manual-configed-serverconsole]]
=== Server-Console
CAUTION: Some of the following features require at least python-opsi version 4.0.7.38,
in particular defining you own commands as described in <<opsi-manual-configed-serverconsole-commandcontrol>> and using them via configed.

With version 4.0.7.5, the configed is extended with a new main menu entry, the "Server Console". At this place some options are bundled to access the opsi-server via a SSH-Connection.
It is as well possible to start a terminal as well as menu items are offered of some predefined commands on the opsi-server.

.'{opsi-configed}': Menu: Server Console
image::configed_serverkonsole.png["{opsi-configed}: Server Console", width=350]

[[opsi-manual-configed-serverconsole-permissions]]
==== Connection data and permissions

If not otherwise configured, it is tried to build a SSH connection with the same user/server pair for which to configed login was done.

Should this not be the case the connection can be also started via a SSH key (possibly with a password) when the configed starts.
In this case, the following start parameters can be used:

* --ssh-key PATH:  e.g. --ssh-key /home/user/.ssh/id_rsa
* --ssh-passphrase PASSPHRASE: e.g. --ssh-passphrase Password

The settings can be changed or adjust under the menu entry "Connection Information". +

The visibility of menu items in the server console menu is controlled by a series of server host parameters in the user section. If the user roles feature is used
(cf. <<opsi-manual-configed-hostproperties-userroles>>) the configs are specifically set for each user (the default values for a newly created user entry are taken from the top user level).

In order to be able to use different functions, the appropriate server settings must be activated. +

* user.{}.ssh.serverconfiguration.active: +
Activates the ssh connection settings menu. (Default: false)

* user.{}.ssh.commandmanagement.active: +
Activates the editing of commands and their menu entries. (Default: false)

* user.{}.ssh.menu_serverconsole.active: +
Deactivate the "Server Console" menu in principal. (Default: true)

* user.{}.ssh.terminal.active: +
Allows the usage of the ssh shell. (Default: true)

* user.{}.ssh.commands.active: +
Allows to execute all menu items displaying stored commands. (Default: true)

[[opsi-manual-configed-serveractions-terminal]]
==== SSH-Terminal
With the Terminal, Linux commands can be run from the connected SSH-Server. +
In addition to the possibility to replace the input with asterisks (*), which is strongly recommended for the input of passwords, a process can also be canceled by clicking the "End process / connection" button or by pressing "Ctrl + C". +
Just like in the Terminal, the "TAB" can be used to complete commands. Warning: Paths will not be completed - only Linux system commands. +
Besides it is also possible to specify data sources, that before the execution can be replaced by concrete data. More about this functionality:
<<opsi-manual-configed-serverconsole-commandcontrol>> - Item: Datasources)

.'{opsi-configed}': SSH-Terminal
image::configed_serverkonsole-terminal.png["{opsi-configed}: SSH-Terminal", width=350]


[[opsi-manual-configed-serveractions-parametercommands]]
==== Predefined commands with input masks
Under the menu group "opsi" a few commands are available independently of the self-defined commands with their own input interface. These simplify the handling of various scripts.

* Download from data ... +
Any data file which can be downloaded from the Internet can also be downloaded by the "wget"-command and stored in a certain path on the Server. This could be used for example to download opsi-packages from download.uib.de

* Create opsi product file ... +
Prerequisite for this command is an opsi-utils package with version >= 4.0.7.7. Using this menu item, an opsi package can be created, specifying the directory upon which must be stored. In addition, can the found versions (package and product version) be displayed and overwritten with a button. And also, a md5sum and/or a zsync file can be created.

* Set opsi-rights ... +
This menu item maps the opsi command opsi-set-rights. After entering a specific (optional) path in which the script is to be executed, the root password is prompted and the script is executed in a separate window.

* Package-Installation ... +
With this command, opsi packages can be installed on all depots or in one depot using "opsi-package-manager". You can also specify the server path to the package where the opsi package is located. +
By selecting a package from the Internet, the functionality of "File download ..." command is taken up and then the downloaded package is installed on the depot.
Additionally, the parameters "--update" and "--setup" of the opsi-package-manager are implemented.
If the zsync and md5 files of an opsi package are to be downloaded, the switch "zsync and md5 include" can be activated.
Then the url of the packages is added accordingly and the additional files are also obtained. +

You can find more about opsi-package-manager under <<opsi-manual-configuration-tools-opsi-package-manager>>

* Package-Deinstallation ... +
From a list of installed packages one can be selected and uninstalled. +
Please check <<opsi-manual-configuration-tools-opsi-package-manager>>

* Deployment opsi-client-agent ... +
If you want to add existing computers to opsi, the opsi-client-agent must be installed on the target computer. If you select the clients in the configed and execute this command, the client names are copied into the corresponding field. If the command is to be executed on several clients in a single call, the login data must be the same on all the participating computers. +
Attention: The location of the script have to be: "/var/lib/opsi/depot/opsi-client-agent/opsi-deploy-client-agent"
Detailed information can be found in the 'opsi-getting-started' manual on the 'First steps' chapter.

TIP:
Some user interfaces include a selection component for paths in the directory structure. If the button "Find
Subdirectories" is activated, all directories or files that are contained in the specified path will be listed. To visualize further sections, you can press the button several times. This functionality is, among others, in the
"Set Opsi rights" or the "Package installation" interface.

[[opsi-manual-configed-serverconsole-commandcontrol]]
=== Define commands
In addition to the predefined server console commands,
you can create or remove your own commands,
which can be accessed via menu items.
It should be noted that different Linux systems may not be able to execute the same commands.
Thus, the administrator must be sure that the commands can be executed on the addressed Linux system.


.'{opsi-configed}': Define commands
image::configed_serverkonsole-defcommands.png["{opsi-configed}: Define commands", width=400]

Following data must be or rather could be (marked with a "*") for a command:

* Menu-Text: +
When creating a new command you _must_ make sure that the menu text has not been used already for another command. If a menu text is to be changed, the command must be first deleted with the minus button, and then the new command can be entered.

* Description*: +
If a more detailed description is stored, then it appears as a tool tip text on the command.

* Superior menu*: +
Determines in which menu the new command should appear as a menu item. In the case that field is empty, then the menu entry will be directly assigned to the "Server console" menu.

* Position *: +
The position determines the order (small numbers comes first) of the menu points in total, and thus within each respective menu.
// First, sort everything by positions, with the lowest number being displayed first under the "Server console" menu item. Only all the individual commands, then the menu group "opsi" (which is always available) and other menu groups (arranged according to the position). It is thus only possible to create one level of menu groups under the "Server console". +
If alphabetical order should be displayed, all items must be set identically (e.g., all 0). Should the the field remain empty, then the position 0 is assigned by default.

* "Sudo" rights *: +
If one of the commands in the command list requires administrative rights, a check mark must be set on "Required root privileges" afterwards the commands in the list are automatically executed with the keyword "sudo".

* Command list: +
For the command list, the Linux commands must be entered line by line, so that they can be executed sequentially.
Caution: Command can be tested or executed on the SSH server by means of a button without creating an extra menu point.

* Data sources* (on the command list): +
Additionally methods can be stored as a data source. Before the command can be executed, the parameters are overwritten with the result of the applied method. The following parameters are possible:
  - Interactive input: +
  It is possible to specify parameters for the commands or to identify them for an interactive output. This is done with the following format $$ "<<< This text will be displayed to the user and replaced by the user input >>>" $$, it is recommended though to write a sample input for the parameter for the user text.
    - Selected client names / Selected client IP addresses
    - Selected depot names / Selected depot IP addresses
    - configserver name
    - Connected SSH servername +
Note: Except for "Interactive Input", the return of the methods can also be formatted, for example, into a comma separated list.
In the interface, the data source can be tested, and also insert it into the location marked in the field of the command list.

.'{opsi-configed}': Execute command - Parameter query
image::configed_serverkonsole-exec.png["{opsi-configed}: Execute command - Parameter query", width=400]

TIP: - On Linux, commands can be combined using two commercial ANDs ( "&&"). However, it must be ensured that the second command, if needed, is executed with administrative rights, since this is not done automatically. Example: Requires root privileges: "activated", command list: "apt-get update --yes && sudo apt-get upgrade --yes". + +
  - During the execution, no user input can be made. It is necessary to control all the inputs via the command \ parameters (example: "--yes" option for "apt-get upgrade") +
