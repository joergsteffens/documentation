////
; Copyright (c) uib gmbh (www.uib.de)
; This documentation is owned by uib
; and published under the german creative commons by-sa license
; see:
; https://creativecommons.org/licenses/by-sa/3.0/de/
; https://creativecommons.org/licenses/by-sa/3.0/de/legalcode
; english:
; https://creativecommons.org/licenses/by-sa/3.0/
; https://creativecommons.org/licenses/by-sa/3.0/legalcode
;
; credits: http://www.opsi.org/credits/
////

:Author:    uib gmbh
:Email:     info@uib.de
:Date:      19.10.2017
:Revision:  4.1
:toclevels: 6

include::../common/opsi_terms.asciidoc[]

[[opsi-manual-localimage]]
=== 'opsi local image'

[[opsi-manual-localimage-preconditions]]
==== Requirements for the opsi extension 'opsi local image'

This module is currently a
link:https://www.opsi.org/product/extensions-of-opsi/[cofunding project]. +
Some conditions have to be met to use this module. This means that you need an activation file to use it. You will receive this activation if you buy the extension. For evaluation purposes, we also provide a time-limited activation free of charge (-> mail to info@uib.de). +

Further details can be found in <<opsi-manual-modules>>.

With the permission to use opsi-local-image you also acquire the right to use the extension opsi-vhd-reset (see <<opsi-manual-vhd>>).

A technical requirement is opsi 4.0.3 with package versions:

.Required packages
[options="header"]
|==========================
|opsi package|version
|opsi-linux-bootimage|>= 20130207-1
|==========================

CAUTION: For the product `opsi-local-image-capture` the share `opsi_depot_rw` must have write permission for 'pcpatch'. Check your Samba configuration.


[[opsi-manual-localimage-introduction]]
==== Introduction

Opsi offers a good basis for the automated installation and maintenance of Windows clients - especially when there is heterogeneous hardware to be managed. But the opsi standard installation technique based on installation packages is not fast enough to restore class room workstations in a short time, during breaks between two classes, for example. So this module is introducing a new concept, by saving the result of the package based installation as an image on a second partition. From this partition a recovery can be performed in a small amount of time.

. Initial installation concluding with a local image backup
. Fast recovery based on different techniques
. System maintenance also concluding with a local image backup
. Integration of captured installations to WIM
. Integration of Linux clients into the Backup/Restore procedure.

[[opsi-manual-localimage-concept]]
==== Concept

The requirements of computer networks for education / trainings / class rooms differ from those of other networks. An important requirement, which will be discussed in the following, is the fast recovery of workstations to regain a clean and well known installation status, which has been spoiled by temporary use. This is required for workstations in class rooms, but also for computer pools at universities or any networks for commercial trainings.

The restore must be completed within a brief amount of time (about 15 minutes) and should also be able to switch the workstations to a different base installation (like Win XP / Win 7 / Linux). Also the continuous system maintenance by installing security updates must be included.

The standard approaches for the system maintenance have different advantages and disadvantages:

.Advantages and disadvantages from Unattended and Image based solutions
[options="header"]
|==========================
| Feature | Unattend | Image
| Performance | (-) slow | (+) fast
| Sensitivity to heterogenous Hardware | (+) low | (-) high
| Network load | (-) high | (-) high
|==========================

The concept of opsi-local-image tries to combine the advantages of the different approaches:

.opsi-local-image
[options="header"]
|==========================
| Feature | Unattend
| Performance | (+) fast
| Sensitivity to heterogeneous Hardware | (+) low
| Network load | (+) low
|==========================



The main features of this combined concept are:

* Initial Windows installation per PXE boot, based on packages with individual driver integration by using the opsi-Linux-Bootimage

* Storing the result of the initial installation as a backup image on another partition on the local disc by using the opsi-Linux-Bootimage

* Fast recovery of the installation by using the opsi-Linux-Bootimage

* Maintenance of the local installation (security updates) by using the opsi system and storing the updated system to the local backup-image by using the opsi-Linux-Bootimage

[[opsi-manual-localimage-concept-technical]]
==== Technical Concept

The workstation is being used with a static partition table of three or four partitions.:

* Partition 1 (System) +
holds the currently installed operating system (Windows / Linux). +
The size of this partition is set during partitioning by the product `opsi-local-image-prepare` according to the particular property state.

* Optional: Partition 2 (sysdata) +
These are user data that are to sustain during the restore. The format is NTFS. +
The size of this partition is set during partitioning by the product `opsi-local-image-prepare` according to the particular property state.

* Partition 3 (winpe / swap) +
The size of this partition is static and set to 4GB. +
With Windows XP this partition is not used. +
With NT6 (Windows 7) this partition is used during installation for the winpe (which is required for installation) and will not be visible during the operating state of the workstation. +
With Linux this partition is used as swap.

* Partition 4 (backup) +
This partition is used to hold the backup images and their meta data. +
The size of this partition is whatever is left by the other partitions.

The netboot products for the operating system installation use the first two or three partitions (XP the first one only) and do not interact with the last partition. So the backup images on the partition four are still available after the install of a new operating system.

[[opsi-manual-localimage-proceedings]]
==== Process steps

[[opsi-manual-localimage-proceedings-initial]]
===== Initial Installation

The product `opsi-local-image-prepare` first generates the required static partitioning.

.schema: static partitioning with opsi-local-image-prepare
image::oli-prepare.png["schema: static partitioning with opsi-local-image-prepare", width=332]

Then the products `opsi-local-image-win*` or others can install several operating systems with different client configuration and different application software.

.schema: OS installation with opsi-local-image-win*
image::oli-os-install.png["schema: OS installation with opsi-local-image-win*", width=332]

Per default after the installation they will be backuped as image.

.schema: image backup with opsi-local-image-backup
image::oli-backup-1.png["schema: image backup with opsi-local-image-backup", width=332]


[[opsi-manual-localimage-proceedings-restore]]
===== Restoring an image

Executing the product `opsi-local-image-restore` per default restores the image that has been generated recently. In case a different image is to be restored, the name of the image has to be specified on the property `imagefile`.

.schema: image restore with opsi-local-image-restore
image::oli-restore-image.png["schema: image restore with opsi-local-image-restore", width=332]

[[opsi-manual-localimage-proceedings-delete]]
===== Deleting an image

.Schema: Deleting an Image
image::oli-delete-image.png["Schema: Deleteing an Image", width=332]

By executing the product `opsi-local-image-delete` the image that is specified by the property `imagefile` will be deleted.


[[opsi-manual-localimage-proceedings-update]]
===== Updating an image: automatic work flow with opsi-auto-update

.Schema: Steps of automatic image upgrade work flow
image::oli-image-upgrade-flow.png["Schema: Steps of automatic image upgrade work flow", width=332]

`opsi-auto-update` ist ein Produkt um die Pflege der Clents zu vereinfachen.

Im Kern ist es die Aufgabe des Produktes dafür zu sorgen die installierten Produkte aktuell zu halten. +
Das Produkt setzt alle installierten Produkte, 
deren Version nicht identisch mit der auf dem Server ist, 
für den Client auf setup.

Da dises Produkt nicht nur im Kontext von 'opsi-local-image' eingesetzt werden kann, ist es im Kapitel 'opsi Standardprodukte' / 'opsi-auto-update' beschrieben: +
<<opsi-manual-localboot-opsi-auto-update>>

[[opsi-manual-localimage-components]]
==== The opsi-local-image products

The opsi-local-image products with version 4.1 and up are supporting systems with more than one harddisks. For more information to this topic please see here: <<opsi-manual-netboot-nt6>>


The packet 'opsi-local-image' consists of several products:

The netboot product used for partitioning

* `opsi-local-image-prepare`

The netboot products fr OS installation:

* `opsi-local-image-winxp`
* `opsi-local-image-win7`
* `opsi-local-image-win7-x64`
* `opsi-local-image-win81`
* `opsi-local-image-win81-x64`
* `opsi-local-image-win10`
* `opsi-local-image-win10-x64`

* `opsi-local-image-ubuntu`

The netboot products for the local image handling:
* `opsi-local-image-backup`
* `opsi-local-image-restore`
* `opsi-local-image-delete`

The local boot products for the process control:

* `opsi-local-image-backup-starter`
* `opsi-auto-update`


To install those products please set the attribute *active* of the repository *uib_local_image* in the file `/etc/opsi/package-updater.repos.d/uib-local_image.repo` to 'True'.
Executing `opsi-package-updater --repo uib_local_image install` will then install the new products.

[[opsi-manual-localimage-components-uefi]]
===== UEFI Compatibility

The opsi-local-image Products are UEFI enabled with some exceptions.

Not UEFI enabled are the following opsi-local-image products:




[[opsi-manual-localimage-components-part]]
===== netboot product for partitioning

* `opsi-local-image-prepare` +
To create the static partitioning of the hard disc for all other products. +
Properties:

ask_before_inst:: 
Should we ask to the client before we start. (Default='true')
system_partition_size::
The size of partition 1 (system). (Default = 30G)
data_partition_size::
The size of partition 2 (data). If set to '0G', no partition will be created for data (default = 0G).
start_os_installation::
selects a product for installing an operating system and to be started after the partitioning automatically.
When installing this product, the product properties 'imagefile' and 'imagefiles_list' of the product `opsi-local-image-restore` are deleted, for they have become invalid after the repartitioning.
delay_for_reboot::
Seconds between the end of the work and the reboot to give the opsi-server time to create the netboot pipes.
minimal_backup_partition_size::
This property is used for a plausibility check of the other partion size entries. +
The size of the backup partition is given by: +
Harddisk size - (`system_partition_size` + `data_partition_size` + `winpe_partition_size`). +
Normally opsi-local-image is used to have the posibility to make local backup. Therefor we need a backup partition which is at least a littl bit larger than the system partition. If the resulting backup partition size is smaller than the value of `minimal_backup_partition_size` the process stops with an error. +
(Default=55%)
winpe_partition_size:: Size of the winpe partition (Default=4G)

multi_disk_mode:: This property is used to select the target disk of the Windows installation. +
Possible values are: "0","1","2","3","prefer_ssd","prefer_rotational" +
The values "0","1","2","3" are the index of the hard disks ("0"= 1. harddisk) +
The value "prefer_ssd" selects the first SSD. +
The value "prefer_rotational" selects the first rotational ('classic') disk. +
This property is ignored on systems with only one disk. +
Default = "0"

backup_partition_on_same_disk::
true : create the backup partition on the system disk. false : create the backup partition on the first disk that is not the system disk. +
This property is ignored on systems with only one disk. +
Default = "true"


IMPORTANT: Use this product only for the initial preparation of the disc for it deletes all existing images.

[[opsi-manual-localimage-components-win]]
===== netboot products for the installation of Windows

The special netboot products for the installation of Windows are derived from the opsi standard products for windows installation. Therefore the structure and the driver integration are the same as with the standard. For details please refer to the 'opsi-getting-started' manual.

The properties of the opsi-local-image Windows NT6 products are a subset of the properties of the standard opsi NT6 products. So you should have a look to the description of these products in chapter: <<opsi-manual-netboot-nt6>>. 
You will find the missing properties for disk and partition information at the product `opsi-local-image-prepare`. These properties  will used by the other products to get informations about the disk and partition configuration.

ATTENTION:: Do not change the property values of opsi-local-image-prepare after you preparded the disk, because the subsequent products will access these properties.


* `opsi-local-image-winxp` +
Installation of Windows XP. Uses the first partition only.
Administrator password is empty.

* `opsi-local-image-win7` +
Installation of Windows7 32 Bit.

* `opsi-local-image-win7-x64` +
Installation of Windows 7 64 Bit.

* `opsi-local-image-win81` +
Installation von Windows 8.1 32 Bit.

* `opsi-local-image-win81-x64` +
Installation von Windows 8.1 64 Bit.

* `opsi-local-image-win10` +
Installation von Windows 10 32 Bit.

* `opsi-local-image-win10-x64` +
Installation von Windows 10 64 Bit.

The following products have special properties for 'opsi-local-image':

* 'backup_after_install' with default value 'true'. In this case this means, that after the OS installation at first the application software is being installed and then an image backup of the installation is generated. Furthermore the value of `imageFile` of the product `opsi-local-image-restore` will be deleted. So the generated backup will be named like the current netboot product (e.g. `opsi-local-image-win7`).

* 'setup_after_install' +
Here one or more products can be listed, that after the OS installation shall be set to 'setup'. This includes the dependencies of these products.

[[opsi-manual-localimage-components-linux]]
===== Netboot products for installing Linux

* `opsi-local-image-ubuntu` +
Installation of Ubuntu Linux 12.04/14.04 32Bit/64Bit. +
The installed system has 2 users: `root` and `user`. The password for 'root' will be set according to the product property `root_password` (default: `linux123`). For 'user' the password will be set according to `user_password` (default: `linux123`).
Details of the installation can be configured with some product properties. The main product properties are:
** `askbeforeinst`: +
Has the start of the installation to be confirmed at the client? (default='true')
** `architecture`: +
architecture selection, affects the selection of the bootimage and the installation architecture  (default='64bit')
** `additional_packages`: +
list of additional packets to be installed, separated by blanks (default = pass:[''])
** `language`: +
language / locale to be installed  (default='de')
** `console_keymap` +
keyboard layout to be installed  (default='de-latin1-nodeadkeys')
** `timezone`: +
timezone to be set  (default='Europe/Berlin')
** `online_repository` +
the online repository to get the install packets from. Default is 'http://de.archive.ubuntu.com/ubuntu'
** `proxy`: +
Proxystring (if required) with following syntax: `http://<ip>:<port>`  (default = pass:[''])
** `backup_after_install` +
('true'/'false') default = 'true'. If true, after the installation an image backup will be generated.
** `setup_after_install` +
Here one or more products can be listed, that are to be set to 'setup' and so will be installed after the OS installation. This also includes the dependencies of these products.
** `wget_and_execute`: +
Url (http) of a file to be fetched and executed at the end of the installation (default = pass:[''])
** `release`: +
Ubuntu release to be installed  (default="trusty")
** `install_opsi-client-agent`: +
The Linux opsi-client-agent is to be installed if 'true' (this is a cofunding project and requires activation by /etc/opsi/modules)  (default='false')
////
* `opsi-local-image-opensuse13-2` +
Installation of OpenSuse Linux 13.2 32Bit/64Bit. +
The installed system has 2 users: `root` and `user`. The password for 'root' will be set according to the product property `root_password` (default: `linux123`). For 'user' the password will be set according to `user_password` (default: `linux123`).
Details of the installation can be configured with some product properties. The main product properties are:
** `askbeforeinst`: +
Has the start of the installation to be confirmed at the client? (default='true')
** `architecture`: +
architecture selection, affects the selection of the bootimage and the installation architecture  (default='64bit')
** `language`: +
language / locale to be installed  (default='de')
** `console_keymap` +
keyboard layout to be installed  (default='de-latin1-nodeadkeys')
** `timezone`: +
timezone to be set  (default='Europe/Berlin')
** `partition_disk`: +
Which disk should be used? (Default='first')
** `proxy`: +
Proxystring (if required) with following syntax: `http://<ip>:<port>`  (default = pass:[''])
** `backup_after_install` +
('true'/'false') default = 'true'. If true, after the installation an image backup will be generated.
** `setup_after_install` +
Here one or more products can be listed, that are to be set to 'setup' and so will be installed after the OS installation. This also includes the dependencies of these products.
** `install_opsi-client-agent`: +
The Linux opsi-client-agent is to be installed if 'true' (this is a cofunding project and requires activation by /etc/opsi/modules)  (default='false')
////

[[opsi-manual-localimage-components-backuprestore]]
===== Netboot product for backup and restore

* `opsi-local-image-backup` +
This product saves the OS which is installed on partition 1 as an image on partition 3. The image name will be set according to the property `imageFile`. If this is empty, the name of the opsi netboot product will be used, that currently is set to 'installed' (e.g. `opsi-local-image-winxp`). This name also is set as the product property 'imagefile' of the product `opsi-local-image-restore`, so that a following call of `opsi-local-image-restore` is going to restore this image. This name also will be added to the product property 'imagefiles_list' of the product `opsi-local-image-restore`. So this property holds the list of all available images. Furthermore (for Windows products) the current opsi product settings will be saved together with the image, so they also can be restored. +
The backup tool in use is partclone. +
Properties:
** `askbeforeinst`: +
Has the start of the installation to be confirmed at the client? (default='false')
** `free_on_backup`: +
This is a read-only property which shows you the some infos about the backup partition: device, size, used, remaining, use in %, mount point
** `imagefile` +
name of the image file to be generated (default = empty = the name of the installed opsi-local-image operating system product will be used). The name may include spaces, but no umlauts (like ä, ö, ü). (In case of spaces they will internally be treated as underscore. So 'my image' = 'my_image'.
** `setup_after_install` +
Here one or more products can be listed, that are to be set to 'setup' and so will be installed after tis product is finished. This also includes the dependencies of these products.


* `opsi-local-image-restore` +
This product restores the image defined by the product property 'imagefile' to partition 1 and makes it bootable. Furthermore (for Windows products) the product settings connected with this image will be restored. +
Properties:
** `askbeforeinst`: +
Has the start of the installation to be confirmed at the client? (default='true')
** `architecture`: +
architecture selection, affects the selection of the bootimage and the installation architecture  (default='64bit')
** `imagefile` +
Name of the image to be restored. The value of this property has been set automatically by the last backup. The list of available images is to be found in the property `imagefiles_list`.
** `imagefiles_list` +
List of all available images. This list is managed automatically by the backup product.
** `update_and_backup` +
*The use of this property is discouraged* +
Please use instead the product `opsi-auto-update`. This product is described in chapter: 'opsi Standardprodukte' / 'opsi-auto-update'  <<opsi-manual-localboot-opsi-auto-update>> +
('true'/'false') default = 'false'. If set to 'true', after the restore all localboot products, that have a different version on the server, will be set to `setup` and the product `opsi-local-image-backup-starter` will be set to `once`. This results in installing all available updates of the products and then automatically generating a backup.
** `setup_after_restore` +
can be set to one or multiple opsi products, that after the restore are to be set to 'setup', so that after the reboot they will execute automatically. The default is set to the product 'windomain' to add the restored client to the Windows domain again.

* `opsi-local-image-delete` +
This product deletes the image given by the product property 'imagefile' from the backup partition +
** `imagefile` +
Name of the image to be deleted (default = empty, results in an error when executing)

[[opsi-manual-localimage-components-helper]]
===== Localboot products for process control

* `opsi-local-image-backup-starter` +
This localboot product sets the Netboot product `opsi-local-image-backup` to 'setup' and reboots the client. This product has a very low priority of -98. This means, that all usual localboot products will be installed first. 

* `opsi-auto-update` +
Im Kern ist es die Aufgabe des Produktes dafür zu sorgen die installierten Produkte aktuell zu halten. +
Das Produkt setzt alle installierten Produkte, 
deren Version nicht identisch mit der auf dem Server ist, 
für den Client auf setup. +
Da dises Produkt nicht nur im Kontext von 'opsi-local-image' eingesetzt werden kann, ist es im Kapitel 'opsi Standardprodukte' / 'opsi-auto-update' beschrieben: +
<<opsi-manual-localboot-opsi-auto-update>>

[[opsi-manual-localimage-service-methods]]
==== Extended opsi service methods

With this extension the clients of a training classroom can be listed as a opsi-client group. The following extensions have been implemented to provide comfortable collective action management for all clients of a classroom:

* `setProductActionRequestForHostGroup` +
Parameter: `hostGroupId, productId, actionRequest` +
allows to start a defined action (like image restore) for all members of a group (e.g. clients of a training classroom).

* `setProductPropertyForHostGroup` +
Parameter: `productId propertyId propertyValue hostGroupId` +
allows to set a given product property (like which image is to be restored) for all members of a group (e.g. clients of a training classroom).

* `getPossibleImagefileValuesForHostGroup` +
Parameter: `groupId` +
gets the list of present imagefile names that have been generated by `opsi-local-image-backup` on all members of the group. If a special image (like `opsi-local-image-winxp`) is not available on one or more of the clients, it will not be on the returned list.

These methods will be integrated into the opsi standard packets at a later date. Until then these extensions are available by executing the file `40_groupActions.conf`, which is part of this release. Please copy it with  'root' rights to `/etc/opsi/backendManager/extend.d` and execute:
`opsi-setup --set-rights /etc/opsi`.


[[opsi-manual-localimage-backuppartition]]
==== Backup partition

The backup partion is (with MBR BIOS without data partition and on one disk systems) the third partition of the system disk. +
On systems with more than one disk the system disk may be configured by the
opsi-local-image-prepare property: multi_disk_mode. +
On systems with more than one disk the backup partiton may according to the property backup_partition_on_same_disk the first partition of the first non system disk.

It contains:

* The file `master.log` with information about all image operations performed. This logfile is transfered to the bootimage logs.
* The image files +
The image directories have the same name as the image and hold the image and the meta files of the image. +
To give an idea about file sizes, here as an example the sizes of different image files with OS and standard software (Libreoffice, Adobereader, firefox, thunderbird, javavm, flashplayer):
* `opsi-local-image-ubuntu`: 3.6G
* `opsi-local-image-winxp`: 6.4G
* `opsi-local-image-win7`: 9.4G
* `opsi-local-image-win7-x64`: 13G

[[opsi-manual-localimage-wimcapture]]
==== Capture Images (WIM) generating and distribution

[[opsi-manual-localimage-wimcapture-introduction]]
===== Capture Images (WIM) Introduction

Starting with NT6 (Vista) Microsoft has introduced the new image format *Windows Imaging Format (WIM)* for installation.
A WIM image is not a disc or partition image anymore, but a file and meta archive. A WIM file can hold several images. The standard installation of a NT6 client is based on a setup.exe extracting an installation image from the file install.wim which is then to be configured and equipped with additional drivers.

From an existing client the Windows operating system including the installed software and configuration can be extracted and saved in form of a WIM. Then such a WIM can be the starting point for a new installation.

[[opsi-manual-localimage-wimcapture-components]]
===== Capture Images (WIM) Components

In order to create a captured WIM image you need with product version 4.1 and up only the product:

* `opsi-local-image-wim-capture`

The older products:

* `opsi-local-image-capture`

* `opsi-local-image-sysprep`

are obsolete and should be removed.
////
* `opsi-set-wim-imagenames`
* `opsi-del-wim-images`
////

In addition there are the 'target products' which should be used to hold the captured images:

* `opsi-local-image-win7-capture`
* `opsi-local-image-win7-x64-capture`
* `opsi-local-image-win81-capture`
* `opsi-local-image-win81-x64-capture`
* `opsi-local-image-win10-capture`
* `opsi-local-image-win10-x64-capture`

[[opsi-manual-localimage-wimcapture-proceedings]]
===== Capture Images (WIM) Processing

The configuration and process sequence of the product `opsi-local-image-wim-capture` is very similar to the product `opsi-wim-capture` which is described over here: <<opsi-manual-wimcap>>. A detailed description of the properies of the product `opsi-wim-capture` is placed here: <<opsi-manual-wimcap-products-main>>.

The main difference between these both products is the way how the backup and restore of the target partition is done:
`opsi-local-image-wim-capture` use the products. `opsi-local-image-backup`/`opsi-local-image-restore`.
For the same purpose `opsi-wim-capture` use the product `opsi-clonezilla`.


TIPP::`opsi-local-image-wim-capture` will fail if you setup your system with a data partition. Install your master system with the opsi-local-image-prepare property data_partition_size=0.

////
*Overview:* +
Do the following steps in this sequence:

. Initial prepare with `opsi-local-image-prepare`
. Install the OS with `opsi-local-image-win*`
. Install and configure additional software with 'opsi' or / and manually
. Configure the product properties of the netboot product `opsi-local-image-capture` (but do not switch it to setup)
. Start the localboot product `opsi-local-image-sysprep`
. `opsi-local-image-sysprep` starts (according to its product properties) an `opsi-local-image-backup` run
. `opsi-local-image-sysprep` runs sysprep in order to depersonalize the OS installation
. `opsi-local-image-sysprep` starts (according to its product properties) `opsi-local-image-capture`
. `opsi-local-image-capture` configures the winpe partition for boot and capture and reboots
. The PC boots from winpe and will do the capture process. The log is appended to the `opsi-local-image-capture` bootimage log


*Generating the master client:* +
this will be generated with 'opsi-local-image' as client and can get software and configuration per opsi as well as manually.

*sysprep: depersonalization of the master:* +
for that an image can be the starting point of an installation, at first it must be prepared. The client has to be depersonalised, so that the client has no identity anymore and so can be the template for new installations. But being depersonalised it can not be used as a working client anymore. +
So with the product 'opsi-local-image-sysprep' by special properties can be configured, whether there has to be created a backup before depersonalisation:

* `always_backup_before_sysprep`: +
(true/false), default=true, +
always make a backup before starting the sysprep.

[NOTE]
===============================
If `always_backup_before_sysprep`='true' then the product `opsi-local-image-backup`
will be set to 'setup' and a reboot will be performed. +
In order to avoid a never ending loop, we write a reboot flag, so that after writing the backup, we can see that this step has already been done.

Technical note: We do not want to reboot again after restoring the backup, though (but the reboot flag is contained in the backup). Thats why the reboot flag is being set as a time stamp. In case the time stamp is older than 0.1 days (i.e. 2.4 hrs), it will be ignored.
===============================


* `abort_on_no_backup`: +
(true/false) default=true, +
check whether the backup partition has a backup for this product and abort if not. After the sysprep usually the actual capture will be started, which is performed by the netboot product 'opsi-local-image-capture'. Whether it starts automatically is set by the property:

* `startcapture`: +
(true/false), default=true: set the product `opsi-local-image-capture` to 'setup' and reboots

* `disabled`: +
(true/false), Default=false, +
If true nothing will be done. This avoids loops that may start after restoring an image that has `opsi-local-image-sysprep` with action request `setup` in the restored meta data.

.capture images: configed: opsi-local-image-sysprep
image::oli-capture-configed-sysprep.jpg["capture images: configed: opsi-local-image-sysprep", width=500]

*capture: read the existing installation and provide for installation:* +
within this multi-stage process the existing client will be readout and integrated as WIM into an existing opsi Windows installation product. So there is a product property to define, in which product the image readout is to be integrated:

* `target_product`: +
name of target product (default = pass:[''])

IMPORTANT:  this property isn't smart, so it does not check whether the image matches the specified target. So you could by mistake integrate a Win7-32Bit into a Win81-64Bit product without getting an error or warning message. So you must take care not to do so. We recommend using special capture target products (like `opsi-local-image-win81-x64-capture`).

The target product, like the standard product for Windows installation must be prepared. The target file within the target product is `install.wim` (`installfiles/sources/install.wim`), that also includes the images provided by Microsoft. Whether the image readout has to be appended to this file or a new `install.wim` has to be generated, is defined by the property:

* `capture_mode`: +
(append/always_create) default = 'append': +
with `append` the new image will be appended to the existing `install.wim`.

IMPORTANT: In case the `install.wim` contains an image with the same name it will be *deleted without notice*. With `always_create` a new `install.wim` will be created. +
`always_create` does not works only with winpe that are based on windows < 8.x.

The `install.wim` file is a container that can hold several images. The images have a name and a description. The name and the description of the new created images is set by these properties:

* `imagename` +
default = pass:['']

* `image_description` +
default = pass:['']

* The property `start_after_capture` +
is a list of products, which have to be set to 'setup' after the capture. This could be for instance 'opsi-local-image-restore', which restores the client from the backup that had been generated before the sysprep.

.capture images: configed: opsi-local-image-capture
image::oli-capture-configed-capture.jpg["capture images: configed: opsi-local-image-capture", width=500]

.capture images: schema: sysprep
image::oli-capture-sheme-sysprep.png["capture images: schema: sysprep", width=500]

.capture images: opsi-local-image-sysprep 1 : start
image::oli-capture-sysprep1.jpg["capture images: opsi-local-image-sysprep 1 : start", width=350]

.capture images: opsi-local-image-sysprep 2 : backup before sysprep
image::oli-capture-sysprep1-backup.jpg["capture images: opsi-local-image-sysprep 2 : backup before sysprepp", width=350]

.capture images: opsi-local-image-sysprep 3 : deactivating the opsi-client-agent
image::oli-capture-sysprep2a.jpg["capture images: opsi-local-image-sysprep 3 : deactivating the opsi-client-agent", width=350]

.capture images: opsi-local-image-sysprep 4 : actual sysprep
image::oli-capture-sysprep2b.jpg["capture images: opsi-local-image-sysprep 4 : actual sysprep", width=350]

With the property `startcapture` the capture process can be started directly following the sysprep. +
The capture process basically consists of two phases: +
the actual capture process is performed by winpe on the disc. Therefore this must be prepared and this is phase one:

* Activating WinPE as bootable partition, generating the required boot records and, if necessary, deactivating the drive letter for other partitions.

* Reading the opsi meta data about installed products on the client and saving these date on the client in a temporary directory.

* Some cleanups on the readout system.

* Writing a command file, that initiates the capture process at the next start of WinPE.

* Providing some more files for the processing of WinPE like the list of products from the property `start_after_capture`

* Rebooting the client

.capture images: schema: capture 1
image::oli-capture-scheme-capture1.png["capture images: sSchema: capture 1", width=500]

During the second phase WinPE starts and executes the actual capture process. In detail:

* mount the opsi_depot_rw share for writing.

* check the architecture of WinPE (32/64 bit) and start the opsi-script in the corresponding architecture.

* connect to the opsi-webservice

* reactivating the drive letters

* in case of `append` mode: check whether an image with this name exists and in case delete this existing image.

* start the capture process. Doing so, depending on the Windows version of the WinPE, on Windows 7 the program imagex from the 'opsi-local-image-capture' product will be used. On Windows 8 the program dism from WinPE will be used (with fallback to imagex).

* The resulting logfiles will be merged.

* check the list of images in the modified install.wim and set this list as the product property `Imagenames` of the target product, so that the new created image can be selected for installation.

* set the product `start_after_capture` to 'setup'.

* deactivate the WinPE partition and activate the system partition (Windows). Including activating UEFI netboot if possible.

* write the logfile to the server. It will be attached to the logfile from the 'opsi-local-capture' bootimage process.

* reboot

.capture images: schema: capture 2
image::oli-capture-scheme-capture2.png["capture images: schema: capture 2", width=500]

.capture images: capture: delete an existing image
image::oli-capture-del-existing-image.jpg["capture images: capture: delete an existing image", width=350]

.capture images: capture: capture and append the new image
image::oli-capture-append-image-dism.jpg["capture images: capture: capture and append the new image", width=350]
////

////
To rollout the generated image use the target product defined as `target_product`. Set the `imagename` to the name of the generated image and then the product can be installed like any other Windows installation. So all the standards like driver integration and installation of the opsi-client-agent are performed like with using the original Microsoft image. +
One important aspect has to be taken into account: if on the client the image has been generated from, software had been installed per opsi, these installation files are restored when installing the 'opsi-client-agent'. This results in the side effect, that, differing from the standard installation, not all the products that have been set to installed before the installation are set to setup. Because this standard feature would result in installing again all the products that have been integrated into the image. So in this case only those products will be installed, that have explicitely been set to 'setup' before the OS installation.
////

[[opsi-manual-localimage-wimcapture-rollout]]
==== Restore from opsi metadata from Images


*Restore of the opsi metadata from installed Products*

*The Problem:*

If you reinstall a Windows with opsi, e.g. `win7-x64`, then during the installation of the opsi-client-agent all the local Boot products, which in this computer were previously marked as` installed`, will automatically be set to setup and thus reinstalled later. +
This can not be completely carried out exactly in the rolling of a 'captured' Image. +
In the image is the backup from the opsi data that was stored during the capture process. This will be discovered when you install the opsi-client-agent and re-imported into the depot server. With it the products that were installed in the 'captured' Image, now are on the newly installed computer mark as `installed`.
Should now all the products that are mark as `installed` set to` setup`, this would imply that all products installed already in the image will be re-installed. This is not desirable.


By the restoration of the opsi metadata of installed products there are two alternatives available now with opsi 4.0.7: +

* Alternative 1: +
Restoring the metadata and retention of 'setup' -Action Requests. +
Products that are mark as 'installed' will *not* be set to 'setup'. +
This is the default, and the behavior before opsi 4.0.7


* Alternative 2: +
Restoring the metadata. Products that are mark as 'installed' will be set to 'setup' except those which were contained in the restore metadata. +

*Alternative 1* +
By the deploy from a 'captured' image, after the install, only the products which were already from the beginning of the OS-install set to 'setup' will be automatically installed. These can be done through your intervention, or through the property 'setup_after_install'.
Therefore only the products which stood at `setup` before installing the operating system will be installed in this case. +
This is the default, and the behavior before opsi 4.0.7 +

*Alternative 2* +
Variant 2 behaves similar to what would be the case of an installation without a captured Image: +
* Restore of the metadata. +
* Products that are mark as 'installed' are then set to 'setup' except those which were contained in the restore metadata. +
This behavior is only available since opsi 4.0.7 and is not the default. Option 2 is made possible by enhancements to the opsi script and is part of the opsi-client-agent of 4.0.7. +
In order to be able to apply this behavior a 'config' must be set on ( 'Host parameters') : +
The Boolean configuration entry: `clientconfig.capture.switch_installed_products_to_setup`. If the entry for this client has the value 'true' then variant 2 is applied, otherwise variant 1 +

About this '{opsi-config-objects}' can then specific client events activated or deactivated.
The '{opsi-config-objects}' can be applied using the '{opsi-configed}' or '{opsi-admin}'.

To create the '{opsi-config-objects}' over the '{opsi-admin}' the following commands are to be executed on the'{opsi-configserver}':

[source,prompt]
----
opsi-admin -d method config_createBool clientconfig.capture.switch_installed_products_to_setup "capture.switch_installed_products_to_setup" true
----
With that you set for *all* computers 'Alternative 2'.

To create the '{opsi-config-objects}' over the '{opsi-server}' select there 'Server Configuration' / 'ClientConfig' / And on the right side with the right mouse button: `Add Boolean configuration entry`.



[[opsi-manual-localimage-wim-info]]
==== Helper product opsi-wim-info

The product `opsi-wim-info` is useful to gather information about the images that are stored inside a install.wim. These information is written to the logfile.
Properties:

* `target_produkt` +
ProductId of the product where the install.wim file is searched.

[[opsi-manual-localimage-ubuntumirror]]
==== Creating an own Ubuntu 'proxy'
For a helpful manual for creating an own Ubuntu proxy refer to:

http://wiki.ubuntuusers.de/Lokale_Paketquellen/Apt-Cacher-ng

http://www.gambaru.de/blog/2011/10/26/apt-cacher-ng-ein-proxy-server-fur-debian-und-ubuntu/
