////
; Copyright (c) uib gmbh (www.uib.de)
; This documentation is owned by uib
; and published under the German creative commons by-sa license
; see:
; https://creativecommons.org/licenses/by-sa/3.0/de/
; https://creativecommons.org/licenses/by-sa/3.0/de/legalcode
; english:
; https://creativecommons.org/licenses/by-sa/3.0/
; https://creativecommons.org/licenses/by-sa/3.0/legalcode
;
; credits: http://www.opsi.org/credits/
////

:Author:    uib gmbh
:Email:     info@uib.de
:Revision:  4.1
:toclevels: 6
:doctype:   book

// Include common opsi terms
include::../common/opsi_terms.asciidoc[]


= opsi Getting Started opsi-Version 4.1

// Include common opsi copyright
include::../common/opsi_manual_copyright.asciidoc[]

[[opsi-getting-started-introduction]]
== Introduction
These instructions explain in detail the installation and starting of an {opsi-server}. It starts from the provided installation package and leads to the test installation of a client.

The installation and commissioning of a {opsi-Server} is done in several steps:

. Basic installation of the server
. Configuration of the server (adaptation to network conditions, setting up users and passwords, installation of products to be distributed)
. Recording and integration of computers in opsi.
. Deploying Windows to Clients.
. Packaging and distribution of own software

Then an operating system including software can be automatically installed on a client and a hardware and software inventory can be perform.

Further features are described in the opsi manual.
There, you will also find explanations about the co-financed extensions and their setup.

The shown network configuration is exemplary and refers to a network without competing DHCP servers (e.g. an isolated test network in which the {opsi-Server} and its clients can be placed for the first tests).

We strongly suggest that you make your first tests with opsi in a test network that is separate from other DHCP servers, but which you can temporarily connect to your main network, e.g. to download updates and packages from the Internet.

For the integration into existing networks you can use link:https://uib.de/de/support-schulung/support/[consulting services by uib].

[[opsi-getting-started-convention]]
== Conventions of this document

Commands are highlighted separately:

[source,prompt]
----
this is a command
----

During installation and configuration, you can usually copy and execute the commands from these fields one after the other using _copy & paste_ from this document.


[[opsi-getting-started-requirements]]
== Requirements

Subsequently the requirements for the installation from opsi in a server will be described.

// Add the support matrix
include::../common/opsi_manual_supportmatrix.asciidoc[]


[[opsi-getting-started-requirements-hardware]]
=== Hardware requirements

For a {opsi-server} the following hardware is recommended:

* Intel-x86-compatible PC

* 2GB RAM or higher

* a hard disk with 60 GB capacity or more
** An {opsi-Server} should have at least a minimum free space of 16 GB in the directory '/var/lib/opsi'

The requirements of the server are moderate in testing environments. In the case of production environments it is recommended to increase the capabilities of the host system.

We recommend in the case of testing with a Virtual machine, that the host computer should have at least a dual core processor and at least 4GB of RAM.
For testing purposes, a test client can be run as another Virtual machine on the same host computer.


[[opsi-getting-started-requirements-software]]
=== Configuration Requirements

Your server and your network have to comply the following requirements to install and work with opsi:

[[opsi-getting-started-requirements-software-dns-domainname]]
==== Valid DNS domain name

Your DNS domain name must consist of at least one domain and one toplevel domain.
In other words: the fully qualified domain name must contain at least one point.  Furthermore, the toplevel domain must consist of at least two characters.

Valid domain names are e.g.: 'domain.local' , 'uib.de', 'subdomain.domain.de'.
An invalid example: 'mydomain.d' because this is only one character at the top-level domain
An invalid example: 'mydomain' because this is only a top-level domain +
see also: +
* https://en.wikipedia.org/wiki/Domain_name
* https://en.wikipedia.org/wiki/Hostname

[[opsi-getting-started-requirements-software-dns-hostname]]
==== Valid DNS hostname

The hostnames (also of the clients) must comply with the guidelines.
This includes, for example, that they must not contain any underscores.

Make sure that at your {opsi-Server}, returns a 'fully qualified domainname', in which at least come two dots, e.g. 'opsiserver.domain.local':

[source,prompt]
----
hostname -f
----

Should the result not look like this (e.g. '127.0.0.1' or 'localhost') then you check your '/etc/hosts' directory or the name  resolution first.

see also: +
* https://en.wikipedia.org/wiki/Hostname

[[opsi-getting-started-requirements-software-dns-resolving]]
==== Correct name resolution for the server

Check the entry for the {opsi-Server} in the file '/etc/hosts', or check the output of:

[source,prompt]
----
getent hosts $(hostname -f)
----

The result should look like the following example: +
'192.168.1.1 server.domain.tld server'

Dabei sollte die IP-Adresse der Netzwerkschnittstelle aufgeführt sein, zu der sich die Clients später verbinden sollen.

Sieht das Ergebnis nicht so aus (enthält z.B. '127.0.0.1', '127.0.0.2' oder 'localhost'), dann müssen Sie die Datei `/etc/hosts` oder Ihre Namensauflösung korrigieren.

The result has the scheme: +
'<IP-Number> <full qualified hostname> <hostname>' +
If the result looks different from the above example (contains eg. '127.0.0.1' or 'localhost'), or the full qualified hostname does not contain one or more dots, then you must correct your name resolution (DNS or `/etc/hosts` file).


NOTE: The names must be in accordance of the rules of a DNS system but a DNS server is not required for the usage of opsi.

NOTE: opsi does not required an _Active Directory_ or similar. Integrating opsi is possible but not required.

[[opsi-getting-started-requirements-software-lang]]
==== Localization settings

opsi requires configured language settings ('locale') on the server.
It is recommended to use an UTF-8 compatible locale.

The following command performs a simplified check:

[source,prompt]
----
test -e /etc/default/locale && echo "ok" || (echo "Check locales:" && locale)
----

If the output is _ok_ locales are set.
If the output is _check locales:_ you should check if the following list
has settings for _LANG_ or _LC_ALL_ that are according to your used language.
+
For English we recommend `en_GB.UTF-8` or `en_US.UTF-8`.
+
The following commands show how these settings can be changed if no or an
undesired value is set:
+
[source,prompt]
----
sudo locale-gen en_GB.UTF-8
update-locale LANG=en_GB.UTF-8
----
+
To apply these settings systemwide the server should be restarted.
+
For more information please consult the manuals of your Linux distribution.

[[opsi-getting-started-installation-config-ports]]
=== Needed Network Ports

This is an overview of the used ports and network protocolls.

* opsi-server web service: TCP 4447 +
Client to server, depot to server (bidirectional, connections via localhost).

* opsi-client web service: TCP 4441 +
Server to client, connection from client to itself via localhost.

* opsi-client web service: TCP 4442 +
Connection from client to itself via localhost.

* opsi-client Notifier: TCP 45000 - 65536 +
Connection from client to itself via localhost. +
A random port from the given range is selected.

* TFTP: UDP 69 +
Client to server.

* CIFS/SMB: UDP 137 / UDP 138 (netbios) / TCP 139 / TCP 445 +
Client to server (bidirectional). +
Depends on the version of the client operating system.

* WEBDAV: TCP 80
* WINEXE: UDP 137 / UDP 138 (netbios) / TCP 139 / TCP 445
Server to client (bidirectional). +
Depends on the version of the client operating system.

* SSH (optional): TCP 22

* DNS: TCP 53

* WakeOnLan (WOL): UDP 7 / UDP 9 / UDP 12287 +
Server to Client. These ports are configurable.

* HTTP: TCP 80 +
E.g. To download server updates from http://download.opensuse.org/

* HTTPS: TCP 443 +
To download updates from https://download.uib.de (opsi-package-updater)


[[opsi-getting-started-supportmatrix]]
== opsi Support Matrix (opsi runs on which server)

Here an overview on which distributions and releases the opsi-server will run:

[[opsi-getting-started-installation-base]]
=== {opsi-server} Base Installation

This chapter describes the installation and configuration of an opsi-Server.

After you have worked through this chapter, you have a functioning opsi-Server.
This serves as a basis for all further chapters.

In the following chapters we assume that you have a working network configuration on your server.

=== {opsi-Server} Basic installation

In this section different variants of the Installation of an '{opsi-server}s' are shown.
You'll end up with a server system ready for final configuration and commissioning.
To evaluate opsi we recommend using the <<opsi-getting-started-installation-base-vm,pre-installed virtual machine>>.
Otherwise, you should select the operating system you are most familiar with.

In this case please make sure that the packages of the server are up to date.

Please set the apropriate environment variables `http_proxy` and `https_proxy` on your {opsi-server} .

In case of problems you can check the link provided by the community: https://forum.opsi.org[free support].

[[opsi-getting-started-installation-base-vm]]
==== Starting up the uib preconfigured Virtual Machine

An '{opsi-server}' can be installed as a virtual machine, because the load on the system is low.
A ready-to-use and pre-configured virtual machine is provided by uib. You can download the VMware or Virtualbox files from the link:https://uib.de/[uib website] or link:https://opsi.org/[opsi.org].
The free of charge VMware player or Virtualbox is sufficient to run this machine.

You may also use VMware ESXi.


[[opsi-getting-started-installation-base-vm-start]]
===== First Start

*VMware*

If you have a server running VMware or a VMware player, it only takes a few mouse clicks to install a base '{opsi-server}':

* Download the opsi-ServerVM from link:https://opsi.org/try-opsi/[opsi.org]
* Unzip the file and a directory 'opsivm' will be generated.
* Start the VMware player. Open "Open a Virtual Machine" and search for the file `opsivm.ovf` in the 'opsivm' directory. You can import the server with an new name. The virtual machine will still boot.

*ESXi-Server*

* Download the opsi-ServerVM from link:https://opsi.org/try-opsi/[opsi.org]
* Unzip the file and a directory 'opsivm' will be generated.
* Start the vSphere Client. +
Install a new client with 'File' / 'Deploy OVF Template....' and answer the following questions.

*Virtualbox*

* Download the opsi-ServerVM from link:https://opsi.org/try-opsi/[opsi.org]
* Unzip the file and a directory 'opsivm' will be generated.
* Start the Virtualbox. +
At the menu 'File' / 'Import Appliance' select your `opsivm.ovf` file and import it.

*General*

The VMware player is free of charge and available for all common operating systems at link:https://www.vmware.com/[vmware.com]. Usually it can be installed without any problems, as long as the resources of the host computer (especially memory) meet the needs of running software systems in parallel.


[[opsi-getting-started-installation-base-vm-lang]]
===== Language selection
The first step is to choose the preferred language:

.Language selection
image::1stboot-language-selection.png["Screenshot: Language selection",width=400]

[[opsi-getting-started-installation-base-vm-1stboot]]
===== First boot
The {opsi-server} needs to be connected to the Internet to work properly. The script `1stboot.py` will automatically start at the first boot in order to configure the {opsi-server} network settings.

If something goes wrong while running '1stboot.py', then you may run `1stboot.py` again from the command line.

WARNING: You cannot use `1stboot.py` to rename your '{opsi-server}' afterwards!

The log file of `1stboot.py` is located at `/var/lib/1stboot/1stboot.log`.

.Startup mask
image::1st-startup-mask.png["Screenshot: 1stboot.py Startup mask",width=400]

Fill in the configuration information for your network and answer the questions.

.Input mask
image::1stboot-input-mask.png["Screenshot: 1stboot Input mask",width=400]

In the following, you will be asked for:

server name::		Name of this server (without domain) e.g. +opsidemo+

domain::		DNS-Domain (not Windows-Domain) the name has to include a dot e.g. +opsi.local+

ip address::		Address of this server e.g. +192.168.1.50+

netmask::		Net mask of this server e.g. +255.255.255.0+

windows domain::	Name of the Windows Domain (not the DNS domain)

country::		For the creation of the SSL-certificate: Identification of the nation (2 capital letter) e.g. +DE+

state::			For the creation of the SSL-certificate: Identification of the federal state e.g. +RPL+

city::	For the creation of the SSL-certificate: Identification of the city e.g. +Mainz+

organization::		For the creation of the SSL-certificate: Identification of the company e.g. +uib gmbh+

organizational unit:: For the creation of the SSL-certificate: Identification of 				the bureau (optional)

email address::	For the creation of the SSL-certificate: mail address (optional)

gateway::	IP-address of the Internet gateway e.g. +192.168.1.1+

proxy::	If required for the Internet access the proxy information: e.g. `http://myuser:mypass@192.168.1.5:8080`

DNS server:: ip address of the name server e.g. +192.168.1.1+

mail relay:: ip address of the mail server e.g. +192.168.1.1+

tftp server::	ip of the tftp server (usually the server)

Password of root::	Password of root

Password of adminuser::	Password of local opsi-admin.

After the program '1stboot.py' finishes, the virtual machine will be rebooted.


[[opsi-getting-started-installation-base-vm-second-start]]
===== Second Start

After the reboot, login as 'adminuser' with your password.

The graphical user interface of the {opsi-server} should have already started (implemented as a sustainable window manager). A "Firefox" browser window might appear at startup, and display further instructions and information. This information can serve as a reference to the getting started document (the document you are currently reading).

If you get a message that there is no network connection, try rebooting the server. This might solve the problem.

.View of fresh started opsi-server
image::opsiserver_start_gui.png["Screenshot: View of newly started opsi-server",400]

If the network was correctly configured in the previous steps, then you should be able to remotely access the {opsi-server}, for example:

* use 'ssh' at the command line to access to the server ('ssh' should already be installed on linux systems, for Windows use putty: https://www.chiark.greenend.org.uk/~sgtatham/putty/) +

Use 'root' as the user name, and authenticate with the root password.

[[opsi-getting-started-installation-base-vm-term]]
===== Terminal Window

In the following sections, some commands have to be entered into a command line interface. It may be the easiest way to work through these instructions.

The commands are input into a window called a "terminal window". Here are examples that explain how to access a terminal window:

* Remote access per ssh on the '{opsi-server}' (see Section 3.1.1.4 of the last chapter)

  * Open a terminal window in the {opsi-server} graphical interface with a click on the terminal icon in the icon bar.

* Open a terminal window in the {opsi-server} graphical interface with a right mouse click inside the interface, and choose "Terminal". +
Note: the graphical interface has many working applications that are reachable using the variety of buttons in the upper-left-hand corner of the display.

We recommend cutting and pasting commands from this handbook directly into the {opsi-server} terminal window (most applications support cut and paste).

Example snippets from configuration files are formatted like this:
[source,configfile]
----
depoturl = smb://smbhost/sharename/path
----

Example snippets for commands that you have to execute are formatted like this:
[source,prompt]
----
cd /tmp
ls -l
----

Angle brackets '< >' mark abstract names. When entering commands, please replace the '<abstract name>' with a real name. +
For example: The file share, where opsi places the software packages, may abstractly be noted as '<opsi-depot-share>'. If the real file share is `/var/lib/opsi/depot`, then you have to replace the abstract name by this exact string. The location of the package '<opsi-depot-share>/ooffice' becomes `/var/lib/opsi/depot/ooffice`. .

[[opsi-getting-started-installation-base-vm-network]]
===== Check the Network Connection

If the network configuration is correct, and the computer is connected to the Internet, then you can access any Internet address using the browser in the start window.

If the Internet connection is not working, then you have to open a terminal window (maybe remote access isn't possible, except using the server terminal window) and then perform the necessary network connection checks and fixes.

You can re-enter the network configuration by entering this command in the terminal window:
[source,prompt]
----
1stboot.py
----

A reboot is forced with the command:
[source,prompt]
----
reboot
----

If the network connection works, then you can install opsi packages or update them, and configure the environment for the first installation test. If you want to use the virtual machine (and not install the {opsi-server} directly to your host system), then skip to <<opsi-getting-started-installation-config>>.


[[opsi-getting-started-installation-base-vm-update-server]]
===== Update the opsi-Server

To update your opsi-Server you need to double click the Icon 'Update OS' on the desktop. To do this please introduce the current password for the adminuser.

include::opsi-getting-started-apt-proxy-config.adoc[]

[[opsi-getting-started-installation-base-vm-update-opsi-product]]
===== Install the standard opsi-products

By performing a double click the Icon 'First package installation' the minimal opsi Products will be installed. To do this please introduce the current password for the adminuser.
Through this installation the actual stock of opsi-products, incl. templates for OS deployments, will be downloaded from the opsi repositories and installed on the server.

For more information see <<opsi-getting-started-installation-config-get-essential-products>>.


[[opsi-getting-started-installation-base-vm-start-configed]]
===== Starting opsi-Server Interface

For a description of the Server Interface check <<opsi-getting-started-firststeps-software-deployment-configed-start>>.

You have a running opsi server now, i.e. the opsi application itself is fully configured.

You can now proceed with:

* <<opsi-getting-started-firststeps-software-deployment-client-integration>>

* <<opsi-getting-started-firststeps-osinstall>>


[[opsi-getting-started-installation-base-deb]]
==== Installation on a Debian / Ubuntu

In this chapter, we assume you are familiar with the debian-package system (you will find information about the debian-package in the appropriate Debian books, in the manual pages, or under https://www.debian.org/doc/[debian documentation]).

IMPORTANT: Please check the <<opsi-getting-started-requirements,requirements>>.

We recommend the following software installations:

[source,prompt]
----
apt install wget host pigz
----

opsi needs samba, which can be installed as:

[source,prompt]
----
apt install samba samba-common smbclient cifs-utils
----

Now install the MySQL-Server which is used for inventory- and license management as follows:

[source,prompt]
----
apt install mysql-server
----

Check the {opsi-server} entry in `/etc/hosts`, or the output of
[source,prompt]
----
getent hosts $(hostname -f)
----

The result should look like the following example: +
'192.168.1.1 server.domain.tld server' +
The result has the scheme: +
'<IP-Number> <full qualified hostname> <hostname>' +
If the result looks different than the above example (contains eg. '127.0.0.1' or 'localhost'), or the full qualified hostname does not contain one or more dots, then you must correct your name resolution (DNS or `/etc/hosts` file).

To start with the installation of opsi add the repository to apt:

*Ubuntu 18.04 LTS _Bionic Beaver_:*
[source,prompt]
----
echo "deb http://download.opensuse.org/repositories/home:/uibmz:/opsi:/4.1:/stable/xUbuntu_18.04/ /" > /etc/apt/sources.list.d/opsi.list
----

*Ubuntu 16.04 LTS _Xenial Xerus_:*
[source,prompt]
----
echo "deb http://download.opensuse.org/repositories/home:/uibmz:/opsi:/4.1:/stable/xUbuntu_16.04/ /" > /etc/apt/sources.list.d/opsi.list
----

*Debian 9 _Stretch_:*
[source,prompt]
----
echo "deb http://download.opensuse.org/repositories/home:/uibmz:/opsi:/4.1:/stable/Debian_9.0/ /" > /etc/apt/sources.list.d/opsi.list
----

*Debian 8 _Jessie_:*
[source,prompt]
----
echo "deb http://download.opensuse.org/repositories/home:/uibmz:/opsi:/4.1:/stable/Debian_8.0/ /" > /etc/apt/sources.list.d/opsi.list
----

Execute the following command in order to import the signature key of the repository:

*Ubuntu 18.04 LTS _Bionic Beaver_:*
[source,prompt]
----
wget -nv http://download.opensuse.org/repositories/home:uibmz:opsi:4.1:stable/xUbuntu_18.04/Release.key -O Release.key
apt-key add - < Release.key
----

*Ubuntu 16.04 LTS _Xenial Xerus_:*
[source,prompt]
----
wget -nv http://download.opensuse.org/repositories/home:uibmz:opsi:4.1:stable/xUbuntu_16.04/Release.key -O Release.key
sudo apt-key add - < Release.key
----

*Debian 9 _Stretch_:*
[source,prompt]
----
wget -nv http://download.opensuse.org/repositories/home:uibmz:opsi:4.1:stable/Debian_9.0/Release.key -O Release.key
apt-key add - < Release.key
----

*Debian 8 _Jessie_:*
[source,prompt]
----
wget -nv http://download.opensuse.org/repositories/home:uibmz:opsi:4.1:stable/Debian_8.0/Release.key -O Release.key
apt-key add - < Release.key
----

All: +
Check for key import success:
[source,prompt]
----
apt-key list
----
should contain the output: +
`pub   2048R/D8361F81 2017-09-30 [verfällt: 2019-12-09]
uid                  home:uibmz:opsi OBS Project <home:uibmz:opsi@build.opensuse.org>`

include::opsi-getting-started-apt-proxy-config.adoc[]

Execute the following commands in order to install opsi at your server:

[source,prompt]
----
apt update
apt remove tftpd
# Only needed when a tftp line is present in the inetd configuration
update-inetd --remove tftp
apt install opsi-tftpd-hpa
apt install opsi-server
apt install opsi-windows-support
----

If you are asked for the tftp directory during the tftpd-installation answer with `/tftpboot`.
`
During the installation of the opsiconfd, you will be asked for information for the creation of a local SSL certificate.

During the {opsi-server} installation, you have to allow the patching of the file `smb.conf`. Answer the question with 'yes'. Also, you will be asked for a password for the user 'pcpatch'. Set a new password, and please remember this password when continuing with the following sections.
``

.Debian 8 (Jessie) specialities: +

The bootimage has issues to mount the `opsi_depot`-Share over mount.cifs.
To avoid these problems you can either configure ID mapping in Samba or disable `winbind`.
If you do not rely on `winbind` we recommend to disable the daemon.

Disable starting of winbindd:
[source,prompt]
----
systemctl disable winbind
----
or
[source,prompt]
----
insserv -r winbind
----

For a sane ID mapping configuration specify a configuration with limited
mapping range in `smb.conf` and then restart Samba.

To configure ID mapping you can insert the following into the `[global]` section of `smb.conf`.
[source,prompt]
----
idmap config * : range = 1000-1999999
----

Assuming all of the above steps completed successfully, we can assume that the network is properly configured. Next continue on with <<opsi-getting-started-installation-config>>

[[opsi-getting-started-installation-base-ucs]]
==== Installation on a Univention Corporate Server (UCS)

IMPORTANT: *Check here if your Server Operating System Version is supported by opsi:*
<<opsi-getting-started-supportmatrix>> +
Please note the Configuration Requirements:  <<opsi-getting-started-requirements,preconditions>>!


The installation on a Univention Corporate Server is possible through the
Univention App Center as well as on the classic way by using the repositories maintained by uib.

Both are equally supported methods of installations. We recommend using only one method per server.
The difference is that an installation of opsi on a 'member' server is not possible if the App Center is used.
If new packages for an operating system are released they are available right away if the repositories maintained by uib are used.
If the installation is made through the App Center the change to a newer UCS version (i.e. from UCS 4.2 to UCS 4.3) will be blocked until all installed apps are supported on the new version of the operating system.

NOTE: Installations on a system with 32bit and 64bit are currently both supported. +
In the future the support for 32bit will be dropped. Therefore we recommend to only use opsi on a system with a 64bit architecture.

With all installation methods the package `opsi4ucs` will be installed.
This will prepare the use of opsi by using a join script.
This preparation includes adding required users, groups and shares.

The first opsi server in a domain will have it's backend configured to make use of the installed MySQL server.
All following servers will be registered as depots in opsi.

When updating from opsi 4.0 the join script will execute the migrations of the backends.


[[opsi-getting-started-installation-base-ucs-appcenter]]
===== Installation through Univention App-Center

In the Univention App-Center an automatic installation of the opsi-Server is available.
The installation-app for opsi can be found in the UCS-Management-Webinterface in the category 'System'.
Over the App-Center opsi can be installed on server roles 'master', 'backup' and 'slave'.

If you want to update a existing opsi4ucs-Installation please check the next chapter for further information.

Additional packages will be installed: 'opsi-tftpd-hpa', 'opsi-windows-support', 'univention-mariadb' respectively 'univention-mysql'.

If an existing {opsi-server} is detected 'opsi-package-updater' will be configured to retrieve packages from this server.
On installation 'opsi-package-updater' will be called to download and install opsi packages. This will not be done after an update.
On an major or minor update package updates will installed automatically.

Please note that no automatic transfer of clients to opsi takes place.
More information at <<opsi-getting-started-installation-base-ucs-listener>>.

The opsi installation on a UCS server via the Univention App Center is now complete.
Continue with <<opsi-getting-started-firststeps-software-deployment-client-integration>>


[[opsi-getting-started-installation-upgrade-appcenter]]
===== Upgrading an existing opsi-Installation from UCS 3 to UCS 4 (over the App-Center)

Since opsi 4.0.5 the group 'opsifileadmins' replaces the group 'pcpatch' in UCS.
This group has already been introduced with the support of UCS 3.0,
but only on installations that had Samba 4 and the Univention Directory Services (Samba4-AD). In all other variants and roles the group continues to be, as it was before 'pcpatch'.

Since this situation represents a problem not only on the installation, but could also lead to potential problems with migrations (especially of Samba3 on Samba4) since the release of 4.0.5 the group 'pcpatch' will be created as 'opsifileadmins'.

WARNING: To implement the integration package in a clean way, an already existing group 'pcpatch' will be renamed automatically to 'opsifileadmins'.
This is done via the join script. If your config server is run on role 'master' or 'backup' the join script will be executed automatic. +
 +
The main reason for this drastic measure is that the manual rename of this group is not trivial, because it is a primary group.
Therefore it is recommended before installing this update to make sure that your group is still named 'pcpatch'.
If so, the update should be started with the config server and soon afterwards on the depot servers as well.
Otherwise the operation on multi depot-environments could lead to issues. This should not be the case, if your group is already named 'opsifileadmins'.
Nevertheless, it is recommended after importing the update to check every opsi server to verify complete functionality.


[[opsi-getting-started-installation-base-ucs-manually]]
===== Manual opsi-installation on UCS (without App-Center)

IMPORTANT: Please check the <<opsi-getting-started-requirements,requirements>>.

Necessary preparations:

* The command
+
[source,prompt]
----
hostname -f
----
+
must return a full qualified domain name containing two dots, e.g. 'opsiserver.domain.local'

* The command
+
[source,prompt]
----
getent hosts $(hostname -f)
----
+
has to show the IP-adress of the network interface which the client has to connect with. If the command shows the address '127.0.0.1' or '127.0.0.2', you have to correct your name resolution in `/etc/hosts` file.

* Samba has to be configured. For the use of a server with the 'member' role `univention-samba` has to be used instead of `univention-samba4`.

* `univention-mariadb` or `univention-mysql` has to be installed.

* If the machine should also work as DHCP-server, then the daemon dhcpd has to be configured and should be running.

The installation of opsi is possible on the roles 'master', 'backup', 'slave' and 'member'.
For the installation on a 'member' you need to read <<opsi-getting-started-installation-base-ucs-member>>!

The following documentation describes an installation on a 'master' with Samba4.

CAUTION: When installing on role 'slave' the server must be already joined and Samba 4 has to be installed first. +
UCS configuration is usually done on the 'master' while the installation and configuration of opsi happen on the 'slave'.

The classic installation with the user: 'pcpatch' in the primary group: 'pcpatch' does not work with UCS. Samba4 has placed fundamental restrictions on the Active-Directory, so groups with the same name as a user are no longer allowed.
For this reason the configuration file `/etc/opsi/opsi.conf` has been introduced.
This file controls how the group used for Samba access will be named.
More specifically for UCS the group name 'pcpatch' will be renamed to 'opsifileadmins'.
This means that users that need clearance for opsi (opsi package builder for example) can't be members of the group 'pcpatch' but must be member of 'opsifileadmins'.
This peculiarity applies only to UCS and is different to other distributions and chapters in the opsi-documentation.
Furthermore, since UCS 3 the user 'pcpatch' is created as an domain user.
For more information about this new configuration file please refer the opsi-manual.

* Next add the opsi4ucs repository:*

*UCS 4.4:*
[source,prompt]
----
echo "deb http://download.opensuse.org/repositories/home:/uibmz:/opsi:/4.1:/stable/Univention_4.4/ /" > /etc/apt/sources.list.d/opsi.list
----

*UCS 4.3:*
[source,prompt]
----
echo "deb http://download.opensuse.org/repositories/home:/uibmz:/opsi:/4.1:/stable/Univention_4.3/ /" > /etc/apt/sources.list.d/opsi.list
----


Now import the key to the repository system with the following command:

*UCS 4.4:*
[source,prompt]
----
wget -nv https://download.opensuse.org/repositories/home:uibmz:opsi:4.1:stable/Univention_4.4/Release.key -O Release.key
apt-key add - < Release.key
----

*UCS 4.3:*
[source,prompt]
----
wget -nv https://download.opensuse.org/repositories/home:uibmz:opsi:4.1:stable/Univention_4.3/Release.key -O Release.key
apt-key add - < Release.key
----


For the installation the following commands must be entered:

*UCS 4.4:*
[source,prompt]
----
univention-install univention-mariadb
univention-install opsi-tftpd-hpa opsi4ucs
univention-install opsi-windows-support
----

*UCS 4.3:*
[source,prompt]
----
univention-install opsi-tftpd-hpa
univention-install univention-mariadb
univention-install opsi4ucs
univention-install opsi-windows-support
----


If the role of the target systems different than 'master' or 'backup' then the following commands run the opsi4ucs Join-Script:

[source,prompt]
----
univention-run-join-scripts
----

A link to the management interface can be found at the URL `https://<servername>:4447`.

To use the opsi configurations editor the user has to be a member of the group {opsi-admin-group}. The group membership can be edited by using Univention-Admin. The user administrator will automatically be added to this group during the opsi installation.

Finally the 'opsi_depot' release point must be released in UDM. To realize this settings set the link to 'yes' under Advanced Settings -> Advanced Samba Settings: 'follow symlinks'. The same should be done for the 'opsi_depot_rw', so the driver integration will run without problems. If the directory `/var/lib/opsi/depot` was found on an extra partition or hard disk then the option for wide links should be set to 'yes'.

To make sure that opsi is running with the proper settings restart opsi by entering the following commands:

[source,prompt]
----
opsi-setup --init-current-config
opsi-set-rights
systemctl restart opsiconfd.service
systemctl restart opsipxeconfd.service
----

Please be advised that samba4 will not be automatically restarted, since it is a important service with potential dependencies. You have to restart it manually.

Since UCS 3 there is no direct link between the Univention LDAP backend and opsi all Clients have to be created twice. First in the Univention-LDAP using udm and then in opsi including all system information (in particular the MAC address). Deleting the LDAP clients in Univention does not mean that the client was also deleted under opsi and vice versa.
This problem is further discussed in <<opsi-getting-started-installation-base-ucs-listener>>.

Since opsi was installed on an already running server we assume that the network configuration is correct. +
Continue with the installation be skipping forward to <<opsi-getting-started-installation-config>>.

WARNING: The Unix commands used in the following chapters are for Debian systems. You may have to change them to match your Linux system.

[[opsi-getting-started-installation-base-ucs-member]]
===== Hints about installing opsi on an UCS server with the role 'member'

WARNING: Running opsi on a 'member' server is affected by certain limitations. Therefore we recommend beginners to run their opsi systems on a different role.

Installing opsi on a server with the role 'member' is possible.
However an automated installation through the Univention App Center is currently not possible.

After an installation you need to make sure that the user that will be used to access the depot is set with the current domain.
Control the host parameter `clientconfig.depot.user` for this.
Let's assume that the domain is `backstage`, then the value has to be `backstage\pcpatch`. If it is `memberserver\pcpatch` then it has to be changed.

Setting the password for the user `pcpatch` through `opsi-admin` fails because of the missing AD write access of a 'member' server.
To change the password you have to do so *additionally* on a server with write access - a 'master', 'backup' or 'slave'.

[[opsi-getting-started-installation-base-ucs-pxepolicy]]
===== PXE-Boot configuration for operating system installation

If the PXE-Boot should be used for OS installations the DHCP-service on the relevant UCS-System has to be reconfigured. There are two characteristics which differentiate UCS from other supported distributions.

* The configuration is not made automatically during the opsi installation on an active UCS-Infrastructure because the configuration already exists.
* The opsi-tftpd-hpa is not configured as usual using the directory `/tftpboot` as base directory, instead the `/var/lib/univention-client-boot` is used. All important files of {opsi-linux-bootimage} will be moved from `/tftpboot` to the base directory. The side effect is that the DHCP-Option filename `pxelinux.0` will be replaced with `linux/pxelinux.0` instead.

You have to set guide lines to realize the mentioned configurations in the UCS-System. These guide lines are dependend on existent guide lines and have to be realized appropriately. If opsi was installed on an UCS-test system without existing guide lines you need to install DHCP-service at first. If the DHCP-service is already installed the easiest way to create guide lines in the UMC-web interface (Univention Management Console) is from UCS-server. Therefore choose the category "Domain" and subjacent the module DHCP-server. Next you have to choose the service (in a testing system you find only one entry usally). In the following detailed view choose guide lines in the menu. The needed guide line is a DHCP-Boot guide line. During the guide line configuration choose `cn=default-settings` as default entry (should be the only entry) and choose 'edit'. Under the basic settings DHCP-boot for the option Bootserver enter the IP from {opsi-server} and insert as boot-filename `pxelinux.0`.

WARNING: If the guide line is configured like mentioned above, this configuration <<opsi-getting-started-installation-config-backend>> affects every device whose IP is served by the DHCP from this server. So once again this instruction should only be used for evaluation purposes which will be also testing not only opsi but also UCS. In a productive UCS environment you should not configure the guide lines as described previously.

Optional you can run the udm-commands at the console. You can find more informations in the UCS-documentation.


[[opsi-getting-started-installation-base-ucs-listener]]
===== Synchronising data from LDAP to opsi

In an opsi4ucs installation Windows-Clients have to be created in the UDM first and in a second step they have to be created in {opsi-configed}.
Changes to the client in UDM will not be passed on to opsi.
For example if a client's MAC address changes in LDAP and in opsi a netboot-product is set to setup, the boot configuration would be provided with a wrong MAC address.

A solution for this is the extension 'opsi-directory-connector'.
Please consult the manual for more information.


[[opsi-getting-started-installation-base-opensuse-sles]]
==== Installation on openSUSE or Suse Linux Enterprise Server (SLES)

IMPORTANT: Please check the <<opsi-getting-started-requirements,requirements>>.

Necessary preparations:

* The command
+
[source,prompt]
----
hostname -f
----
+
has to return a full qualified domain name containing two dots, e.g. 'opsidemo.domain.local'

* The command
+
[source,prompt]
----
getent hosts $(hostname -f)
----
+
has to return the IP-adress of the networkinterface the clients should connect with. If the command returns the result '127.0.0.1' or '127.0.0.2' then file `/etc/hosts` has to be corrected.


* Samba has to be installed and configured.

* mariadb-server has to be installed.

* If the machine should also act as DHCP-server then the daemon dhcpd has to be configured and be active.

You can use zypper to add the opsi repositories:

*openSUSE Leap 42.3:*
[source,prompt]
----
zypper addrepo http://download.opensuse.org/repositories/home:uibmz:opsi:4.1:stable/openSUSE_Leap_42.3/home:uibmz:opsi:4.1:stable.repo
----
*SLES 12SP4:*
[source,prompt]
----
zypper addrepo http://download.opensuse.org/repositories/home:uibmz:opsi:4.1:stable/SLE_12_SP4/home:uibmz:opsi:4.1:stable.repo
----

*SLES 12SP3:*
[source,prompt]
----
zypper addrepo http://download.opensuse.org/repositories/home:uibmz:opsi:4.1:stable/SLE_12_SP3/home:uibmz:opsi:4.1:stable.repo
----

*SLES 12SP2:*
[source,prompt]
----
zypper addrepo http://download.opensuse.org/repositories/home:uibmz:opsi:4.1:stable/SLE_12_SP2/home:uibmz:opsi:4.1:stable.repo
----

*SLES 12SP1:*
[source,prompt]
----
zypper addrepo http://download.opensuse.org/repositories/home:uibmz:opsi:4.1:stable/SLE_12_SP1/home:uibmz:opsi:4.1:stable.repo
----

*SLES 12:*
[source,prompt]
----
zypper addrepo http://download.opensuse.org/repositories/home:uibmz:opsi:4.1:stable/SLE_12/home:uibmz:opsi:4.1:stable.repo
----

After adding the repository, you may start the opsi installation:

[source,prompt]
----
zypper refresh
  Do you want to (r)eject the Key, (t)emporary or (a)lways trust? [r/t/a/?] (a): a
zypper -v install opsi-server
zypper -v install opsi-windows-support
----

Please make sure that your firewall configuration allows the connection to the following ports:

* tftp: 69/UDP
* opsi: 4447/TCP und 4441/TCP

In case you used a tool like yast or autoyast to help you with your network configuration it's possible the tool may have created an entry in your `/etc/hosts` file like:
[source,configfile]
----
127.0.0.2 <fqdn> <hostname>
----

If you want to leave the configuration of the DHCP server to opsi, this entry has to be changed to the public IP address, where the server can be reached.

Please continue with <<opsi-getting-started-installation-config>>.

WARNING: The unix commands used in the following chapters are working on Debian systems. You may have to change them to match your linux system.

[[opsi-getting-started-installation-base-centos-rhel]]
==== Installation on CentOS or RedHat Enterprise Linux (RHEL)

The installation from opsi on CentOS or Red Hat Enterprise Linux (RHEL) differs only on the applied repository.
IMPORTANT: *Check here if your Server Operating System Version is supported by opsi:*
<<opsi-getting-started-supportmatrix>> +
Please note the Configuration Requirements:  <<opsi-getting-started-requirements,preconditions>>!

Necessary preparations:

* The command
+
[source,prompt]
----
hostname -f
----
+
returns a fully qualified domain name containing two dots, e.g. 'opsidemo.domain.local'

* The command
+
[source,prompt]
----
getent hosts $(hostname -f)
----
+
has to return the IP-adress of the network interface the clients should connect to. If the command returns the result '127.0.0.1' or '127.0.0.2' then file `/etc/hosts` has to be corrected.

* Install Samba and a database server:
+
[source,prompt]
----
yum install mariadb-server samba samba-client
----

* Configure samba and database server:
+
[source,prompt]
----
systemctl start smb.service
systemctl start nmb.service
systemctl start mariadb.service
systemctl enable smb.service
systemctl enable nmb.service
systemctl enable mariadb.service
mysql_secure_installation
----

* If the machine should also act as DHCP-server then the daemon dhcpd has to be configured and be running.

* In the case of Red Hat Enterprise Linux, you must register with the Read Hat Network to have access to all required packages in Red Hat repositories:

[source,prompt]
----
rhn_register
----

Add the CentOS Repository:

*CentOS 7:*
[source,prompt]
----
cd /etc/yum.repos.d/
wget https://download.opensuse.org/repositories/home:uibmz:opsi:4.1:stable/CentOS_7/home:uibmz:opsi:4.1:stable.repo
yum makecache
----

Add the opsi RHEL Repository:

*RHEL 7:*
[source,prompt]
----
cd /etc/yum.repos.d/
wget https://download.opensuse.org/repositories/home:uibmz:opsi:4.1:stable/RHEL_7/home:uibmz:opsi:4.1:stable.repo
yum makecache
----

After adding the repository you may start the opsi installation:

[source,prompt]
----
yum remove tftp-server
yum install opsi-server
yum install opsi-windows-support
----

You may be asked to import the GPG key of the repository.
The message is pretty similar to the following one:

[source,prompt]
----
   Importing GPG key 0xD8361F81 "home:uibmz OBS Project <home:uibmz@build.opensuse.org>" from http://download.opensuse.org/repositories/home:/uibmz:/opsi:/4.1:/stable/CentOS_7/repodata/repomd.xml.key
   Is this ok [y/N]: y
----
Please answer with 'y'.


Please make sure that your iptables and SELinux configuration allow access to the following ports:

* tftp: 69/UDP
* opsi: 4447/TCP and 4441/TCP

Assuming all of the above steps were completed successfully we can assume that the network is properly configured.
Next continue on with <<opsi-getting-started-installation-config>>

WARNING: The unix commands used in the following chapters are working on Debian systems. You may have to change them to match your CentOS- /RHEL system.


[[opsi-getting-started-installation-config]]
=== Update and Configuration of the {opsi-server}

In this chapter, the installed {opsi-Server} is set up.

[[opsi-getting-started-installation-config-update]]
==== Update of the {opsi-server}

Update the {opsi-server} with the commands:

[source,prompt]
----
apt update
apt upgrade
----

TIP: During the installation, you may be asked to modify the `smb.conf` file. Please select 'Yes'. If you have modified the `smb.conf` file before you should save the default and make a diff on both files later. If you answered the question with default before reading this tip with 'no' you can reconfigure samba from an {opsi-Server} console with following command: `opsi-setup --auto-configure-samba`


[[opsi-getting-started-installation-config-backend]]
==== Backend Configuration

opsi supports different backends for data management.

The most important backends are:

* *file* - storage in files
* *mysql* - storage in a MySQL database

Besides these main backends there are some special backends:

* *opsipxeconfd* - the service used for network boots with opsi
* *dhcpd* - used for configuring and restarting the local dhcp service at {opsi-server}
* *jsonrpc* - redirects all calls to another server via {json-rpc}


The default is to use the {mysql-backend} for inventory data.
The usage of the {file-backend} for inventory data is possible but noticeably slower and therefore not recommended.

NOTE: The use of the {mysql-Backend} for inventory data is free and does not require activation. +
More information about the activation of co-financed modules can be found on the opsi manual.

NOTE: Some distributions use _MariaDB_ instead of _MySQL_. +
The _mysql_ backend will also work with MariaDB.


CAUTION: Since MySQL server version 5.7 the 'strict mode' is enabled by default. +
This mode prevents the command `opsi-setup --configure-mysql` from finishing properly. +
To disable the 'strict mode' please edit the file `/etc/mysql/mysql.conf.d/mysqld.cnf`. +
In the `[mysqld]` section add the following line underneath the section name: +
`sql_mode=NO_ENGINE_SUBSTITUTION` +
 +
Now the service `mysql` has to be restarted: `systemctl restart mysql.service`


We will now configure the {mysql-backend}.
It is assumed that a MySQL server is installed and configured.
We require the credentials for an database administrator.
For specific information on installation and configuration of your database please refer to the manuals of your distribution.

For the initial configuration of the {mysql-Backend} use the command:
[source,prompt]
----
opsi-setup --configure-mysql
----

The command will ask for information to database access and then use the provided credentials to create a database and an user with appropriate rights to access that database for opsi.

The following screen shots show example parameters for a MySQL configuration setup:

.Dialog opsi-setup --configure-mysql: Input mask
image::mysql-config-input-mask.png["Dialog opsi-setup --configure-mysql: Input mask",width=400]

.Output: opsi-setup --configure-mysql: Output
image::mysql-config-output.png["Output: opsi-setup --configure-mysql: Output",width=400]

You may accept the defaults for all questions except the 'Database Admin Password'.
The 'Database Admin Password' is `linux123` on the pre-installed opsi-VM, otherwise it is the password you entered during the mysql-server installation.

Different kinds of data may be stored in different types of backends.
For some actions (such as method calls) more than one backend has to be involved.
Therefore, the different method calls can be used by more than one backend.
These method-to-backend(s) calls are configured in the file `/etc/opsi/backendManager/dispatch.conf.`

Here an example:
[source,configfile]
----
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# =      backend dispatch configuration                                     =
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
#
# This file configures which methods are dispatched to which backends.
# Entries has to follow the form:
# <regular expression to match method name(s)> : <comma separated list of backend name(s)>
#
# Backend names have to match a backend configuration
# file basename <backend name>.conf beneath /etc/opsi/backends.
# For every method executed on backend dispatcher
# the first matching regular expression will be decisive.

# Recommended standard configuration (dhcpd not at the opsi server)
#    file as main backend, mysql as hw/sw invent
#     and license management backend and opsipxeconfd backend:
backend_.*         : file, mysql, opsipxeconfd
host_.*            : file, opsipxeconfd
productOnClient_.* : file, opsipxeconfd
configState_.*     : file, opsipxeconfd
license.*          : mysql
softwareLicense.*  : mysql
audit.*            : mysql
.*                 : file
----

You will find explanations and examples at the top of this file.
At the first column is the name of the opsi method being called (with wildcard `.*`) and after the colon is the list of backends used by that opsi method.
For every called method procedure the first column of this list is proved to determine which backend have to be used.
The last line (`.*`) matches all opsi method calls.

The default configuration after the installation is the usage of the {file-backend} as main backend and the {mysql-backend} for license management and inventory data.

CAUTION: Make sure that every backend used is listed in the line starting with `backend_.*`.

Whenever you changed the file `dispatch.conf` you should execute the following commands.
Even if you have not changed the file during the initial setup execute these commands now.

[source,prompt]
----
opsi-setup --init-current-config
opsi-set-rights
systemctl restart opsiconfd.service
systemctl restart opsipxeconfd.service
----


[[opsi-getting-started-installation-config-passwords]]
==== Set Samba Configuration and Change Passwords
Opsi requires certain samba shares. To ensure that they are configured please enter the following command:

[source,prompt]
----
opsi-setup --auto-configure-samba
----

Please restart the samba services using the following commands:

[source,prompt]
----
systemctl restart smbd.service
systemctl restart nmbd.service
----

TIP: If the server update asks if the file smb.conf should be overwritten, you have to confirm this. +
If the smb.conf has been changed before, you should keep the default and synchronize the files later. +
If this question has already been answered with No, you can do this later on the {opsi-Server} by running `opsi-setup --auto-configure-samba`.

A 'pcpatch' user is created on the system. This user can install software on a client PC. The 'pcpatch' user allows access to the configuration data on the host shares. The user 'pcpatch' needs to get a correct password - once as system user, as samba user and as opsi user.

In a terminal window the program '{opsi-admin}' should be called which will set the pcpatch-password for opsi, unix and samba.

[source,prompt]
----
opsi-admin -d task setPcpatchPassword
----

After sending the command enter the password.

[[opsi-getting-started-installation-config-users-and-groups]]
==== Create Users and administrate the groups opsiadmin / pcpatch

The opsi administration is only allowed for members of the UNIX-group '{opsi-admin-group}'.

In the following example, we create the user 'adminuser', which is a similar procedure to creating an account for yourself.

Let's create the user:
[source,prompt]
----
useradd -m -s /bin/bash adminuser
----

now set the unix password:
[source,prompt]
----
passwd adminuser
----

and now the samba password:
[source,prompt]
----
smbpasswd -a adminuser
----

CAUTION: Do not use the char '§' as part of the passwords. It becomes impossible to login at the opsi web service.

Create and test the group membership:
[source,prompt]
----
usermod -aG opsiadmin adminuser
getent group opsiadmin
----

the getent command should have a result like:
[source,prompt]
----
opsiadmin:x:1001:opsiconfd,adminuser
----

NOTE: In you want 'root' to use the opsi administration commands, then 'root' has to be a member of the group '{opsi-admin-group}'.

To perform everyday tasks on your opsi server, usually it is not necessary to
be logged in as 'root'.
Our suggestion is to use a normal user and make use of the `sudo` command
whenever adminstrative privileges are required.


All users who build opsi packages (`opsi-makepackage`), install opsi packages (`opsi-package-manager`), or manually edit the configuration files have to also be in the group 'pcpatch' :

[source,prompt]
----
usermod -aG pcpatch adminuser
----

Test the results by entering:

[source,prompt]
----
getent group pcpatch
----
The result should look like +
'pcpatch:x:992:adminuser'

To make `sudo opsi-set-rights` available for users of the group 'pcpatch', please execute:
[source,prompt]
----
opsi-setup --patch-sudoers-file
----

`opsi-set-rights`, which does the same as `opsi-setup --set-rights`, can then be executed not only as root, but also with sudo from members of the group 'pcpatch' (or 'opsi-file-admins'):

Example: +
[source,prompt]
----
sudo opsi-set-rights .
----


[[opsi-getting-started-installation-config-dhcp]]
==== DHCP Configuration

It is essential for opsi that the DNS in combination with DHCP can be used for address lookups.
To simplify the setup the {opsi-server} VM is delivered with a running DHCP server.
In the situation where a DHCP server already exists, it should be configured to work with opsi.
Both alternatives are described below.


[[opsi-getting-started-installation-config-dhcp-at-opsi]]
===== Using a DHCP Server at the {opsi-server}

.Using the opsi-Server VM:
The opsi server VM has an installed DHCP server. +
The DHCP server on the {opsi-server} VM is configured with no free leases, so no unknown clients will get an IP-Number from this DHCP server. +
If you create a client at the {opsi-server} using the {opsi-configed}, it will also create a dhcp entry for this client in the `/etc/dhcp/dhcpd.conf` and the DHCP server task will be restarted.
Therefore you have to supply the IP-number and the MAC-address.

.Your own installation:
If you want to use the opsi server as DHCP server, you have to install the DHCP server package.

e.g.
[source,prompt]
----
apt install isc-dhcp-server
----

After the installation you must configure the dhcp configuration for opsi. This is done by the following command:
[source,prompt]
----
opsi-setup --auto-configure-dhcpd
----
To execute the command to restart the DHCP server from opsiconfd listed in the configuration file `/etc/opsi/backends/dhcpd.conf`, an entry under `/etc/sudoers` is required. This is created using the command
[source,prompt]
----
opsi-setup --patch-sudoers-file
----
If deemed necessary, the permissions of the DHCPD configuration file can be checked, which should look like this, for example:
[source,prompt]
----
-rw-r--r-- 1 opsiconfd opsiadmin 80174 Dec 22 14:37 /etc/dhcp/dhcpd.conf
----

[[opsi-getting-started-installation-config-at-other-server]]
===== Using an External DHCP Server

.Using the opsi-Server VM:
If you use an external DHCP server, then you may want to uninstall the DHCP server at the {opsi-server}, which is done by entering:

[source,prompt]
----
apt remove isc-dhcp-server
----

.Your own installation:
You have to configure your external DHCP server, and provide the client information to the external DHCP server, such that clients know that our {opsi-server} is now the boot server.
If your external DHCP runs on Linux, then you need the following entries for the clients in the DHCP daemon configuration file (i.e. `etc/dhcp/dhcpd.conf`):

[source,configfile]
----
next-server <ip of opsi-server>;
filename "linux/pxelinux.0";
----

Replace '<ip of {opsi-server}>' with the IP-address of your {opsi-server}.

If the opsi server runs on openSUSE or SLES, then `filename=opsi/pxelinux.0`. +
If the opsi server runs on UCS, then `filename=pxelinux.0`.

If you are using a Windows server, then the corresponding entries may be 'bootserver' or 'startserver' and 'bootfile' or 'startfile' ('Options 66 / 67').

If you create a client at the {opsi-server}, then you only have to supply the MAC-address, but not the IP-number.

[[opsi-getting-started-installation-config-dhcp-backend]]
===== Checking the Backend Configuration for DHCP Entries

Regardless of whether or not you use the dhcp of the {opsi-server}, you have to configure the {opsi-server}.

The file `/etc/opsi/backendManager/dispatch.conf` defines which opsi method uses which backends (i.e. 'file', 'mysql').

The lines with `backend_.*` and `host_.*` entries configure how changes at host entries are handled. If you are using the DHCP server on the {opsi-server}, then the backend dhcpd has to be added here. +
The according entry using the `file` backend is (e.g.):
[source,configfile]
----
backend_.*         : file, opsipxeconfd, dhcpd
host_.*            : file, opsipxeconfd, dhcpd
----

If the local DHCP isn't used, then the backend `dhcpd` is not required:
[source,configfile]
----
backend_.*         : file, opsipxeconfd
host_.*            : file, opsipxeconfd
----

After adapting the correct backend configuration, you should execute:

[source,prompt]
----
opsi-setup --init-current-config
opsi-set-rights
systemctl restart opsiconfd.service
systemctl restart opsipxeconfd.service
----


[[opsi-getting-started-installation-config-nameresolution]]
==== Configure how the opsi-server gets the Client's IP-Address

In the default method of the opsi software deployment, only the client must know how to contact the {opsi-server}.

However, if you would like to use one of the opsi 'push' features (like send messages to the client, or fire 'on_demand' events, or get session information, or start remote control software), then the server needs to know how to get the IP-Address of the client.

How the opsi server does this, depends on your DNS/DHCP configuration and policy. There are a large number of possible configurations. So here we show two different example configurations:

. The clients are not known by the DNS (only by netbios), and they get dynamically assigned frequently changing IP-Numbers by the DHCP.

. The DNS always provides the correct IP-Address of a client.

To configure the opsi server to your situation, you may change the following parameters:

* The entry +resolveHostAddress+ in the file `/etc/opsi/backends/hostcontrol.conf` +
This option controls whether the name resolution of a opsi-client address is primarily done by the opsi database or by the name resolution of the operating system of the '{opsi-server}'. +
If this option is +True+, the '{opsi-server}' first tries to get the IP-Address of an '{opsi-client}' using the name resolution from the operating system (DNS, /etc/hosts).  If the operating system DNS name resolution fails, then the opsi database is used. +
To use the opsi database during the first attempt, you have to set this option to +False+.

* The entry +update ip+ at the file `/etc/opsi/opsiconfd.conf` +
If this entry is 'yes', then the opsi-server will update it's own IP database whenever the opsi-server gets a client IP-Address (e.g. at every web service contact of a client). The default is 'yes'.

If you are running configuration example 1, then you should probably set +resolveHostAddress+ to 'False' and +update ip+ to 'yes'.

If you are running configuration example 2, then the best configuration is to set  +resolveHostAddress+ to 'True' and +update ip+ to 'no'.

You should decide for yourself which combination fits the needs of your situation.

If you changed anything while configuring your environment, then you should reload the opsiconfd:

[source,prompt]
----
systemctl restart opsiconfd.service
----


[[opsi-getting-started-installation-config-get-essential-products]]
=== Install the minimal opsi-products

To deploy software with opsi prepared packages exist.
They contain amongst other things the ('opsi-client-agent'), which is required for managing clients.

It is possible to install the packages in automated or manual fashion.
The automated way is recommended.

[[opsi-getting-started-installation-config-get-essential-products-automatic]]

==== Automatic import of the minimal opsi products

For the automatic installation of opsi products the `opsi-package-updater` tool is available, which configures as in '/etc/opsi/opsi-package-updater.conf', automatically fetches the current packages from the opsi repository and installs them on the server.

You should now download and install the opsi products with the command:
[source,prompt]
----
opsi-package-updater -v install
----

If the `opsi-package-updater` fails, it may be necessary to add a required proxy to the `.repo` configuration files under `/etc/opsi/package-updater.repos.d/`.
Since opsi-utils version 4.1.1.33 a global proxy can be configured in `/etc/opsi/opsi-package-updater.conf`.

[source,configfile]
----
[repository_uib_windows]
…
proxy =
----

If you want to update installed packages sometime later you can use the following command:
[source,prompt]
----
opsi-package-updater -v update
----

More information on `opsi-package-updater` can be found in the manual.

NOTE: Please notice that the OS-Installation products like win10 aren't ready for action after installation. The installation has to be supplemented by the installation files from the corresponding installation media (i.e. DVD, see <<opsi-getting-started-firststeps-osinstall-fill-base-packages>>).


[[opsi-getting-started-installation-config-get-essential-products-manually]]
==== Manual Installation of opsi-products

There is also the possibility to manually download and install the packages.

Download the current opsi packages in the `.opsi` package format.
The packages can be found at https://download.uib.de/opsi4.1/stable/packages/windows in the directories `netboot/`, `localboot/` and for Linux-clients also in `https://download.uib.de/opsi4.1/stable/packages/linux`.

We recommend storing the .opsi-files at `/var/lib/opsi/repository`.
To make sure the access rights allow opsiconfd to access these files run `opsi-set-rights /var/lib/opsi/repository`.

After the download you must to manually install the packages on your server with the command `opsi-package-manager -i <packagename>.opsi`.

If the packages are stored under `/var/lib/opsi/repository`, the following command can be used for the initial installation:

[source,prompt]
----
opsi-package-manager --install /var/lib/opsi/repository/*.opsi
----

[[opsi-getting-started-firststeps-software-deployment-configed]]
=== Management interface {opsi-configed}

Opsi offers with the {opsi-configed} a comfortable management interface.
It communicates via HTTPS with the opsi server and can therefore be used on any computer that can establish a corresponding connection.

TIP: When using a virtual machine, make sure that the virtual screen has a sufficient screen resolution.
For the {opsi-configed} a resolution of 1024x768 pixels (at least) is required.
To improve the graphics and mouse driver integration at a higher resolution, it is helpful to install the 'VMware Tools' on a VMware machine or the virtual guest additions on a VirtualBox machine.

[[opsi-getting-started-firststeps-software-deployment-configed-installation]]
==== Installation of the management interface {opsi-configed}

The management interface is installed as a local a application on the administration PCs.
In your web browser, call up the address `https://<opsidepotserver>:4447/`.
There you will find links to installers for different operating systems.

Alternatively you can find corresponding installer under link:https://download.uib.de/opsi4.1/misc/helper/[].

IMPORTANT: The Windows installer must be executed with administrative rights.
To do this, right click to open the context menu of the installer and then select 'Run as administrator'.

Once a PC is equipped with the management interface, further PCs can have the interface installed <<opsi-getting-started-firststeps-software-deployment-product-tests-configed>>, if the <<opsi-getting-started-adding-clients,opsi agent>> is already installed on the PC.

[[opsi-getting-started-firststeps-software-deployment-configed-start]]
==== Start of the management interface {opsi-configed}

Start {opsi-configed} from the shortcut in your Start menu.
Login as a user who is a member of the group {opsi-admin-group}.

The operation of the management interface is pretty much self explanatory.
You will find detailed instructions in the opsi manual.

NOTE: Changes in the opsi management interface must be saved before they take effect and changes in the data must be retrieved from the server via 'Reload data' button.

[[opsi-getting-started-adding-clients]]
== Add clients to opsi

To be able to manage computers with opsi, they must be known to the system.
Besides, the agent must run on these computers so that communication between server and client is possible.
No administration is possible without the client agent.

Depending on the environment in which opsi is to be used, there are different procedures.
If clients already exist in the environment with an installed operating system that are to be managed with opsi immediately, they can be integrated in different ways <<opsi-getting-started-firststeps-software-deployment-client-integration,>>.

The alternative to this is that the computers to be managed by opsi are equipped with a new operating system.
Within the scope of this operating system installation, opsi installs the required agent at the same time, but removes all previously existing software (incl. operating system).
With this procedure you first add a <<opsi-getting-started-firststeps-osinstall-create-client,Client to opsi>> and then do a <<opsi-getting-started-firststeps-osinstall,Operating system installation>>.

[[opsi-getting-started-firststeps-osinstall-create-client]]
=== Creation of a new opsi client

To manage computers, they must be known to the {opsi-Server}.
This chapter describes different ways to create a client in opsi for a later administration.
This is particularly helpful if you want to install an <<opsi-getting-started-firststeps-osinstall,operating system>> on your computer using opsi.
For the integration of clients with an already installed operating system, please read <<opsi-getting-started-firststeps-software-deployment-client-integration,chapter integration of existing Clients>>.

[[opsi-getting-started-firststeps-osinstall-create-client-configed]]
==== Creating a new opsi client via the graphical management interface

A client can be added through the graphical user interface '{opsi-configed}'.

From the menu, choose 'OpsiClient/Create new opsi client' and enter the following for the client:

* Client-name
* DNS domain (if different from the default),
* client description
* IP-Address (required if you can not use DNS to resolve the address of the client)
* MAC-address (required if the {opsi-Server} is also your DHCP server or if you want to use PXE boot with this client)

The client will be created in opsi.
If the client is configured as a PXE-client, then it will also be configured in the DHCP on the {opsi-server} if the {opsi-server} also is DHCP-server.

To see all created clients in '{opsi-configed}' choose the tab 'Clients', which puts '{opsi-configed}' in the mode 'Configuration of clients', and reload the data by pressing F5 or use the context menu.


[[opsi-getting-started-firststeps-osinstall-create-client-commandline]]
==== Creating a new opsi client via the command line

A client can added to opsi through the command line using the tool `opsi-admin`

The syntax is the following:

[source,prompt]
----
opsi-admin -d method host_createOpsiClient <client-id> [opsiHostKey] [description] [notes] [hardwareAddress] [ipAddress] [inventoryNumber] [oneTimePassword] [created] [lastSeen]
----

Missing values will usually resort to a default - for most this will be empty.

The following command will create the client `testclient.domain.local` with a random host key,
the description `Testclient`, no notes, the MAC address of `00:53:00:00:00:00` and the IP address `192.0.2.1`.

[source,prompt]
----
opsi-admin -d method host_createOpsiClient testclient.domain.local "null" "Testclient" "" 00:53:00:00:00:00 192.0.2.1
----

[[opsi-getting-started-firststeps-osinstall-create-client-bootcd]]
==== Create a New Client using the opsi-client-bootcd

On the download page of uib you will find various ISO images of the 'opsi-client-boot-cd' at link:https://download.uib.de/opsi4.1/boot-cd/[].

Download the latest and burn it to a CD.

Start the computer from the CD.

You should see the following picture:

.Start image opsi-client-boot-cd
image::opsi-client-boot-cd.png["Screenshot: Start image opsi-client-boot-cd",width=400]

Choose 'Start opsi (English)'. After a while, the following screen will appear. If your DHCP server assigns IP-addresses to unknown DHCP clients, then most fields will already have valid values. You have to complete the missing data. You must at least give the hostname.

.bootimage/boot-cd configuration screen
image::boot-cd-config.png["Screenshot: bootimage/boot-cd configuration screen",width=400]

Confirm with 'OK'.

.bootimage/boot-cd:  Choose how to create Client
image::boot-cd-select.png["Screenshot: bootimage/boot-cd:  Choose how to create Client",width=200]

Choosing 'Admin account' the client will register itself at the {opsi-server} using provided credentials.

.bootimage / boot-cd: Authenticate as member of {opsi-admin-group} group
image::boot-cd-authent.png["Screenshot: bootimage / boot-cd: Authenticate as member of {opsi-admin-group} group",width=400]

Therefore you will get a login window, where you should authenticate yourself as a member of the {opsi-admin-group} group. If the authorization is successful, then the client gives its data to the server, at which point the client will be created at the server. In the next step, the server provides a list of Netboot products to the client.

.bootimage/boot-cd: netboot product list
image::boot-cd-product.png["Screenshot: bootimage/boot-cd: netboot product list",width=200]

Now you may choose the operating system that you would like to install (or e.g. <<opsi-getting-started-firststeps-osinstall-tests-hwinvent,hwinvent>> for testing).


[[opsi-getting-started-installation-config-modules]]
=== Installing and Checking the Activation File

Even though opsi is open source, there are some components which are not free at the moment. These components are developed in a project that is co-funded by various partners.  Which means that until the complete development costs are recuperated by the co-funders, the modules are only allowed to be used by the co-funders or for evaluation purposes. Once the costs of development have been financed, these modules will be released for free. To control the use of these components until they are free, there is an activation file `/etc/opsi/modules`, which is protected against changes via electronic signature. If this activation file doesn't exist, then only the modules which are part of the free core of opsi will be available.

If you would like to evaluate opsi's modules, then a temporary activation file can be obtained by contacting 'info@uib.de'.

If you become a co-funder, you will get an unlimited activation file. Copy the file to `/etc/opsi` as root.

Then execute the following command:

[source,prompt]
----
opsi-set-rights
----

You may check your activation state with one of the following methods:

Using '{opsi-configed}', choose the menu entry 'Help/status of opsi-modules' to check the activation state.

Or at the command line, you can enter `opsi-admin` with the method 'backend_info'. (Remark: Never give your activation file or the output of this command to a third party without deleting the signature).
[source,prompt]
----
opsi-admin -d method backend_info
----

Example:
[source,configfile]
----
{
"opsiVersion" : "4.0.1",
"modules" :
          {
          "customer" : "uib GmbH",
          "dynamic_depot" : true,
          "vista" : true,
          "treeview" : true,
          "license_management" : true,
          "swondemand" : true,
          "expires" : "2011-04-30",
          "valid" : true,
          "multiplex" : true,
          "signature" : "THIS-IS-NOT-A-VALID-SIGNATURE",
          "vpn" : true,
          "mysql_backend" : true,
          "high_availability" : true
          }
}
----

Note that you only need the modules-file for additional usage, and not for the general use of opsi.

[[opsi-getting-started-firststeps-software-deployment-client-integration]]
=== Integration of Existing Clients

To include existing Windows clients in opsi, the {opsi-client-agent} must be installed on them.
This can be done in several ways. After you have installed the {opsi-client-agent} as described below, the client will also appear in the client list of the {opsi-configed}.
This can be realized in several ways.
 After you have installed the {opsi-client-agent} as described below, the client will also appear in the client list of the {opsi-configed}, unless you haven't done that already.

[[opsi-getting-started-firststeps-software-deployment-client-integration-service-setup]]
Basically there is the possibility to install the agent <<opsi-getting-started-firststeps-software-deployment-client-integration-service-setup,on the client>> or <<opsi-getting-started-firststeps-software-deployment-client-integration-opsi-deploy,from the server>> start the installation.

Executing the installation directly on the client is suitable for individual computers.
For a mass agent rollout, <<opsi-getting-started-firststeps-software-deployment-client-integration-opsi-deploy,opsi-deploy-client-agent>>.
If there is other way to distribute software already, it is also possible to distribute the opsi-client-agent through it and execute the script `silent_setup.cmd` included in the package.

Once the agent is installed, existing opsi products can be <<opsi-getting-started-firststeps-software-deployment-product-tests,installed>> on these clients.


[[opsi-getting-started-firststeps-software-deployment-client-integration-service-setup_nt6]]
==== Usage of the service_setup.cmd on Windows NT6


. logon to the Windows client with administrative privileges
. mount the shared directory on the opsi server at `\\<opsiserver>\opsi_depot` to a drive letter
. on the drive letter from the previous step, start the script `opsi-client-agent\service_setup.cmd` +
Do not start the script elevated (via right mouse click: 'as Administrator') because an elevated script may have no access to the network share.
. The script copies the needed files to a temporary local directory and starts from there the opsi-script (winst32.exe) elevated in order to do the installation. Therefore you may see here an UAC Message.
. The script connects to the opsi-webservice in order to create the client on the server side and get the pckey. The first connection is established with the user/password combination provided in the config.ini. If the connection fails, a login window will pop up, where the user can type in a Service-URL ({opsi-configserver}), with a user and a password. The provided user needs to be member of the group 'opsiadmin'. It is also possible to provide a user which has only the rigth to call the method `host_createOpsiClient`.

CAUTION: During installation the client reboots without notice!


[[opsi-getting-started-firststeps-software-deployment-client-integration-service-setup_nt5]]
==== Usage of the service_setup_NT5.cmd on Windows NT5


. logon to the Windows client with administrative privileges
. mount the shared directory on the opsi server at `\\<opsiserver>\opsi_depot` to a drive letter
. on the drive letter from the previous step, start the script `opsi-client-agent\service_setup_NT5.cmd`
. The script copies the needed files to a temporary local directory and starts from there the opsi-script (winst32.exe) in order to do the installation.
. The script connects to the opsi-webservice in order to create the client on the server side and get the pckey. The first connection is established with the user/password combination provided in the config.ini. If the connection fails, a login window will pop up, where the user can type in a Service-URL ({opsi-configserver}), with a user and a password. The provided user needs to be member of the group 'opsiadmin'.

WARNING: During installation, the client reboots without notice!

[[opsi-getting-started-firststeps-software-deployment-client-integration-opsi-deploy]]
==== Usage of the opsi-deploy-client-agent

The `opsi-deploy-client-agent` script installs the {opsi-client-agent} directly from the {opsi-server} to the clients. It is now easier to integrate a large number of clients from the server into an opsi environment. Requirements for the clients are:

* an open C$ share
* an open admin$ share
* an administrative account
* a non interfering solution when using the `winexe`

On the server side we require the program `winexe`.
This one is part of the package `opsi-windows-support`.

The `opsi-deploy-client-agent` script can be found at `/var/lib/opsi/depot/opsi-client-agent` +
Execute the script with 'root' privileges.
If the script is not executable, you can solve this issue by executing the following command: +
`opsi-set-rights /var/lib/opsi/depot/opsi-client-agent/opsi-deploy-client-agent`.

The script creates the client on the server, then copies the installation files and the configuration information including the pckey to the client.  After copying the necessary information, `opsi-deploy-client-agent` starts the installation on the client.

Two copy methods are possible.
The first method will use the 'mount'-command to locally mount the C$ share of the client on the server.
The second variant will use 'smbclient' for mounting.
After mounting the client the files will be copied.

The script can work with IP addresses, hostnames or FQDNs.
It will automatically detect what type of address
it is processing.

With the `opsi-deploy-client-agent` script you can batch install a list of clients. Therefore you can give the FQDNs of multiple clients as last argument or you give with the opsion `-f` the name of a text file which has one FQDN per line.

The script itself is located in `/var/lib/opsi/depot/opsi-client-agent`.

Run this script with 'root' privileges.

It may be possible that you have to make the script executable with: +
`opsi-set-rights /var/lib/opsi/depot/opsi-client-agent/opsi-deploy-client-agent`

Possible parameters can be found by using the `--help`:

[source,prompt]
----
bonifax:/home/uib/oertel# cd /var/lib/opsi/depot/opsi-client-agent
bonifax:/var/lib/opsi/depot/opsi-linux-client-agent# ./opsi-deploy-client-agent --help
usage: opsi-deploy-client-agent [-h] [--version] [--verbose]
                                [--debug-file DEBUGFILE] [--username USERNAME]
                                [--password PASSWORD]
                                [--use-fqdn | --use-hostname | --use-ip-address]
                                [--ignore-failed-ping]
                                [--reboot | --shutdown | --start-opsiclientd]
                                [--hosts-from-file HOSTFILE]
                                [--skip-existing-clients]
                                [--threads MAXTHREADS] [--smbclient | --mount]
                                [--keep-client-on-failure | --remove-client-on-failure]
                                [host [host ...]]

Deploy opsi client agent to the specified clients. The c$ and admin$ must be
accessible on every client. Simple File Sharing (Folder Options) should be
disabled on the Windows machine.

positional arguments:
  host                  The hosts to deploy the opsi-client-agent to.

optional arguments:
  -h, --help            show this help message and exit
  --version, -V         show program's version number and exit
  --verbose, -v         increase verbosity (can be used multiple times)
  --debug-file DEBUGFILE
                        Write debug output to given file.
  --username USERNAME, -u USERNAME
                        username for authentication (default: Administrator).
                        Example for a domain account: -u
                        "<DOMAIN>\\<username>"
  --password PASSWORD, -p PASSWORD
                        password for authentication
  --use-fqdn, -c        Use FQDN to connect to client.
  --use-hostname        Use hostname to connect to client.
  --use-ip-address      Use IP address to connect to client.
  --ignore-failed-ping, -x
                        try installation even if ping fails
  --reboot, -r          reboot computer after installation
  --shutdown, -s        shutdown computer after installation
  --start-opsiclientd, -o
                        start opsiclientd service after installation
  --hosts-from-file HOSTFILE, -f HOSTFILE
                        File containing addresses of hosts (one per line).If
                        there is a space followed by text after the address
                        this will be used as client description for new
                        clients.
  --skip-existing-clients, -S
                        skip known opsi clients
  --threads MAXTHREADS, -t MAXTHREADS
                        number of concurrent deployment threads
  --smbclient           Mount the client's C$-share via smbclient.
  --mount               Mount the client's C$-share via normal mount on the
                        server for copying the files. This imitates the
                        behaviour of the 'old' script.
  --keep-client-on-failure
                        If the client was created in opsi through this script
                        it will not be removed in case of failure. (DEFAULT)
  --remove-client-on-failure
                        If the client was created in opsi through this script
                        it will be removed in case of failure.
----


[[opsi-getting-started-firststeps-software-deployment-product-tests]]
== Rollout existing products

For the rollout of software on clients the 'opsi-client-agent' must be installed.
This can be rolled out on <<opsi-getting-started-firststeps-software-deployment-client-integration,existing computers>>.
If <<opsi-getting-started-firststeps-osinstall,operating system installation>> via opsi, 'opsi-client-agent' will be installed automatically.

Subsequently the management interface <<opsi-getting-started-firststeps-software-deployment-configed,{opsi-configed}>> is used to distribute software to clients.

[[opsi-getting-started-firststeps-software-deployment-product-tests-configed]]
=== Usage of opsi standard products: opsi-configed

One of the opsi standard products is the product `opsi-configed`. This product installs the opsi Management Interface. This Application is a Java Program therefore the Java Runtime Engine is bundled within the product.

Using '{opsi-configed}', choose the client by pressing the tab 'Clients', which puts '{opsi-configed}' in the mode 'Configuration of clients'.

If you haven't done so yet, reload all the data by clicking the reload button at the top left corner of the '{opsi-configed}' interface (or use the 'File' menu).

Switch to the tab 'Product configuration', look for the line with the product-id `opsi-configed`. Go to the column 'Requested Action', and select the action 'setup' using a left mouse click. Finally, save the new action with a click on the checkmark button at the top (or by right clicking the mouse and selecting 'save').

Restart the client.

The opsi-client-agent should start and install the product +opsi-configed+.
After the installation you should find the `opsi-configed` in the `start menu`.

[[opsi-getting-started-firststeps-software-deployment-product-tests-inventory]]
=== Hard- and Software Inventory with the Products hwaudit and swaudit

Using '{opsi-configed}', choose the client by pressing the tab 'Clients', which puts '{opsi-configed}' in the mode 'Configuration of clients'.

If you haven't done so yet, reload all the data by clicking the reload button at the top left corner of the '{opsi-configed}' interface (or use the 'File' menu).

Switch to the tab 'Product configuration', look for the lines that audit the software and hardware of the system ('hwaudit' and/or 'swaudit'). Go to the column 'Requested Action', and select the action 'setup' using a left mouse click. Finally, save the new action with a click on the checkmark button at the top (or by right clicking the mouse and selecting 'save').

Now reboot the client, +opsi-client-agent+ executes the 'hwaudit' and/or 'swaudit' which should automatically start. The client scans the hardware and/or software inventory and sends the results back to the server.

To see the changes at the '{opsi-configed}' management interface, select reload with the button at the top or with a right mouse click. You may see the update after selecting the tabs 'Hardware information' and/or 'Software inventory'.


[[opsi-getting-started-firststeps-software-deployment-product-tests-hwinvent]]
[[opsi-getting-started-firststeps-osinstall-tests-hwinvent]]
==== Hardware Inventory with the Netboot Product hwinvent

If the product 'hwinvent' is already installed on your opsi server and you have added a client <<opsi-getting-started-firststeps-osinstall-create-client>> which is configured to boot over the network, you can do something else useful: Hardware inventory without an existing operating system installed.

Using '{opsi-configed}', choose the client by pressing the tab 'Clients', which puts '{opsi-configed}' in the mode 'Configuration of clients'.

If you haven't done so yet, reload all the data by clicking the reload button at the top left corner of the '{opsi-configed}' interface (or use the 'File' menu).

Switch to the tab 'Netboot products', look for the line that has 'hwinvent'. Go to the column 'Requested Action', and select the action 'setup'. Finally, save the new action with a click on the checkmark button at the top (or by right clicking the mouse and selecting 'save').

Then reboot the client. It should now use a PXE Linux image over the network, to scan the hardware of the PC and then reboot it (if the computer was not already set up, the message that no operating system is installed on the disk will be displayed).

To see the changes at the '{opsi-configed}' management interface, select reload with the button at the top or with the mouse.  You may see the update after selecting the tab 'Hardware information'.

NOTE: In case the screen only turns black after booting the bootimage or a network error occurs, the startparameters of the bootimage have to be adjusted. +
This can be achieved using the '{opsi-configed}' in the tab 'Hostparameter' by editing the entry 'opsi-linux-bootimage.append'.

[[opsi-getting-started-firststeps-osinstall]]
== Installation of a new Windows PC through opsi (OS Installations)

The following describes how a computer with no operating system can get a Windows OS installed via opsi.

Suitable clients are real or virtual computers with at least 2048 MB RAM and a network card with network boot support:
This means that they support the PXE protocol for loading boot systems via the network.
The network boot has to be activated in the BIOS menu or moved to the first position of the boot options.

Virtual hardware is usually well supported by the Windows standard drivers if you later perform a test installation of Windows.
To install Windows on newer real-world machines, you may need to integrate additional drivers first.
For an initial test, you can use a link:https://download.uib.de/vmware_pxeclient.zip[VMware Appliance] that maps an _empty_ machine and can run in _VMware Workstation Player_.

For the following chapter you should create the corresponding client in opsi <<opsi-getting-started-firststeps-osinstall-create-client>>.
Take a look here <<opsi-getting-started-firststeps-osinstall-create-client, through {opsi-configed}>>.


NOTE: Some tools useful for deploying Windows with opsi are installed through the 'opsi-windows-support' package.


[[opsi-getting-started-firststeps-osinstall-fill-base-packages]]
=== OS-Installation: Complete the Base Package for Windows

The opsi win-OS-packages contain only the files that are necessary to perform our automated OS installation, but not the operating system software itself.

If you want to make use of fully automated OS installations of {client-os}, you have to complete these packages as described below.

[[opsi-getting-started-firststeps-osinstall-fill-base-packages-nt6]]
==== NT6 family: as of Win7 / 2008R2

In order to perform an OS Installation, a so-called WinPE is being used as a 'Live OS'. You can create it using an opsi package (+opsi-winpe+), or do it all yourself manually following the steps described.
Generally speaking, the Windows-Version of the PE does not matter with regard to the Windows OS version being installed. Still, working drivers should be present for at least disk and network devices.
Microsoft recommends 32-Bit PE for x86 installations , and 64-Bit PE for x64 installations.

'"To install a 64-bit version of Windows you must use a 64-bit version of Windows PE. Likewise, to install a 32-bit version of Windows, you must use a 32-bit version of Windows PE."' +
https://technet.microsoft.com/en-us/library/cc766093.aspx

Regardless of how you want to create your PE, you'll need an installed "Assessment and Deployment Kit" (ADK, Win8.1 bzw 10), or its predecessor "Windows Automated Installation Kit" (Windows AIK; since Windows 7): +

* link:https://docs.microsoft.com/en-us/windows-hardware/get-started/adk-install[Windows 10 / 8.1 ADK]

It's sufficient to install 'Windows PE add-on for the ADK' and the dependencies automatically selected. Stick with the suggested install path in `Program Files (x86)`. +

* link: https://www.microsoft.com/downloads/details.aspx?displaylang=en&FamilyID=696dd665-9f76-4177-a811-39c26d3b3b34[WAIK Windows 7]

This site provides you with an ISO file, which may then be burnt to a CD or mounted. The content of this CD must be installed in an OS mentioned in the previous system requirements.


[[opsi-getting-started-firststeps-osinstall-fill-base-packages-nt6-pe]]
==== Creating a PE

The easiest available method for tweaking your PE requires a computer that has opsi-client-agent installed, as well as a Windows ADK (Win8.1, Win10).
Doing all steps manually is being described below at <<opsi-getting-started-firststeps-osinstall-fill-base-packages-nt6-pe-manual>>.


[[opsi-getting-started-firststeps-osinstall-fill-base-packages-nt6-pe-opsi]]
===== Automated PE creation using opsi

* Using the {opsi-configed} set the localboot-product `opsi-winpe` to `once` for the client you intend to use, if desired adjust the produkt properties to `x86` instead of `x64` at the lower right side, and save (right click > save)
* in case the opsi-product `opsi-winpe` is missing, install it onto your opsi server via CLI `opsi-package-updater -v install opsi-winpe`
* launch an installation event for the client (right click > on-demand , or reboot)
* after successful run of this action move or copy the contents of the now existing folder on your client `C:\winpe_<ARCH>\media\` into the folder (already existing) within the OS folder you want to use at `\\opsiserver\opsi_depot_rw\<OS>\winpe\`
* finally run the following command on the CLI of your opsi server. Done.
[source,prompt]
----
opsi-set-rights
----


[[opsi-getting-started-firststeps-osinstall-fill-base-packages-nt6-pe-manual]]
===== Manual PE creation for Windows 10 & Windows 8 (ADK)

The console commands are very similar in 32- or 64-bit versions, except for the *<ARCH>* entries. These have to be set to either *x86* , *amd64* or *ia64*.

Run Start => "Windows Kits" => "Windows ADK" => "Deployment and Imaging Toolkits Environment" from the Start Menu. A command prompt will open with required environment variables set.

* Copy the WinPE
[source,prompt]
----
copype.cmd <ARCH> C:\winpe
----

* Mount the Image
[source,prompt]
----
dism /Mount-Wim /WimFile:C:\winpe\media\sources\boot.wim /index:1 /MountDir:c:\winpe\mount
----

* replace startnet.cmd
[source,prompt]
----
echo c:\opsi\startnet.cmd > "C:\winpe\mount\Windows\System32\startnet.cmd"
----
(Remark: The file `c:\opsi\startnet.cmd` will be created by the opsi linux boot image after the script `setup.py` is executed. The `startnet.cmd` contains the call to wpeinit.)

* Unmount the Image
[source,prompt]
----
dism /Unmount-Wim /MountDir:c:\winpe\mount /Commit
----

* Copy the contents of `C:\winpe\media` to `/var/lib/opsi/depot/<productid>/winpe` . +
Adjust the file access rights by entering:
[source,prompt]
----
opsi-set-rights /var/lib/opsi/depot/<productid>/winpe
----


===== Manual PE creation for Windows 7 (WAIK)

The console commands are very similar in 32- or 64-bit versions, except for the *<ARCH>* entries. These have to be set to either *x86* , *amd64* or *ia64*.

Start a terminal as Administrator with elevated rights (Start => Programs => Accessories => right click on "Command Prompt" => "Run as" => Administrator)

* Copy the WinPE
[source,prompt]
----
"%ProgramFiles%\Windows AIK\Tools\PETools\copype.cmd" <ARCH> C:\winpe
----

* Mount Image: +
[source,prompt]
----
"%ProgramFiles%\Windows AIK\Tools\<ARCH>\imagex.exe" /mountrw "C:\winpe\winpe.wim" 1 "C:\winpe\mount"
----

* replace startnet.cmd
[source,prompt]
----
echo c:\opsi\startnet.cmd > "C:\winpe\mount\Windows\System32\startnet.cmd"
----
(Remark: The file `c:\opsi\startnet.cmd` will be created by the opsi linux boot image after the script `setup.py` is executed. The `startnet.cmd` contains the call to wpeinit.)

* Unmount the Image
[source,prompt]
----
"%ProgramFiles%\Windows AIK\Tools\<ARCH>\imagex.exe" /commit /unmount "C:\winpe\mount"
----

* Move the WinPE now. From the target dir more files will be moved to the server.
[source,prompt]
----
move "C:\winpe\winpe.wim" "C:\winpe\ISO\sources\boot.wim"
----

* Copy the contents of `C:\winpe\ISO` to `/var/lib/opsi/depot/win7/winpe` (or `/var/lib/opsi/depot/win2008/winpe`). +
Adjust the file access rights by entering e.g.:
[source,prompt]
----
opsi-set-rights /var/lib/opsi/depot/<productid>/winpe
----


[[opsi-getting-started-firststeps-osinstall-fill-base-packages-nt6-extendpe]]
==== Extending a PE

In some cases it is useful to extend a PE. Especially when using Dell-Hardware. Dell provides special network and storage drivers for use in PE. These instructions only work with Windows 7. (Windows Vista does not inherit the needed DISM- Deployment Image Servicing and Management.) These instructions assume that you have already completed the chapter "Creating a PE".

NOTE: The Windows Automated Installation Kit is not needed for following instructions.

The first step is to download Dell-PE-drivers from the Dell-Website. For Windows 7, you will need the WINPE 3.0 Drivers from Dell. The downloaded CAB-File must be extracted to the local disk. This can be done with 7zip or the command-line-tool Expand.exe. For simplicity, we recommend creating a directory called "dell-driver" on the local disk, and then extracting the CAB-File into this directory.

* Use dism to scan the image, in order to determine the required index number. Normally a PE-image is a one-image-file, so you can use the index 1, but it is better to check at first. Start a terminal as administrator (Start => Programs => Accessories => right click on "Command Prompt" => "Run as" => (Administrator) and run the following command:
[source,prompt]
----
dism /Get-WimInfo /WimFile:C:\winpe\ISO\sources\boot.wim
----

In the output of this command, you can see which images are included in the image file.

* The next command mounts the image for modification:
[source,prompt]
----
dism /Mount-Wim /WimFile:C:\winpe\ISO\sources\boot.wim /index:1 /MountDir:c:\winpe\mount
----

* To integrate the extracted drivers into the mounted image, you need to execute this command:
[source,prompt]
----
dism /Image:C:\winpe\mount /Add-Driver /Driver:c:\dell-driver\winpe\x64 /Recurse
----

If the architecture is 32Bit, the `x64` must be replaced with `x86`. The Driver-CAB from Dell inherits drivers for both architectures.

NOTE: If only one driver has to be integrated, then leave out the option `/Recurse`, and point directly to the driver-inf-File instead of the driver-directory. With the option `/ForceUnsigned` it is possible to integrate unsigned drivers to the image.

* For the changes to be committed, the images must be unmounted:
[source,prompt]
----
dism /Unmount-Wim /MountDir:c:\winpe\mount /Commit
----

* Copy the directory `C:\winpe\ISO` with the target name `winpe` to `/var/lib/opsi/depot/win7/` (or `/var/lib/opsi/depot/win2008`). +
Adjust the file access rights by entering(e.g.):
[source,prompt]
----
opsi-set-rights /var/lib/opsi/depot/win7/winpe
----

[[opsi-getting-started-firststeps-osinstall-fill-base-packages-nt6-unattend]]
==== unattend.xml

The control file for the unattended installation is the XML file `unattend.xml`, which you can find under `/var/lib/opsi/depot/win7/custom`. If you would like to make any modifications to this file, then do it in this directory and not in the opsi directory.

The file `unattend.xml` that comes with the opsi package, contains links to the Netboot-Productproperties which are responsible for activating the Administrator account with the password 'nt123'.

Documentation of the file `unattend.xml` can be found (after the installing WAIK) in the directory `c:\Program Files\Windows\Waik\docs\chms`.

[[opsi-getting-started-firststeps-osinstall-fill-base-packages-nt6-drivers]]
==== Driver Integration

The driver integration in WinPE is similar to {client-os}. Place your driver directories in `/var/lib/opsi/depot/<product-id>/drivers/drivers`.
Then call the script `create_driver_links.py` in the folder `/var/lib/opsi/depot/<product-id>/`.

Please keep in mind that only signed drivers are accepted.
Therefore, if you want to use driver packs like the driver packs from driverpacks.net, be sure to use only the {client-os} versions.


[[opsi-getting-started-firststeps-osinstall-fill-base-packages-nt6-installfiles]]
==== Providing the Installation Files

Copy the complete installation DVD to +
`/var/lib/opsi/depot/<productid>/installfiles`
Adjust the file access rights by entering:
[source,prompt]
----
opsi-set-rights /var/lib/opsi/depot/<productid>/installfiles
----

[[opsi-getting-started-firststeps-osinstall-fill-base-packages-nt6-logfiles]]
==== Installation Log files

* `c:\Windows\Panther\setupact.log`: +
Logs until the end of setup phase 4 (running under WinPE)

* `c:\Windows\Panther\setupact.err`: +
Error log including the end of setup phase 4 (running under WinPE)

* `c:\Windows\Panther\UnattendGC\setupact.log`: +
Logs a specialize phase

* `c:\Windows\Panther\UnattendGC\setupact.err`: +
Error log for a specialize phase

* `c:\Windows\System32\Winevt\Logs\*`

* `c:\Windows\ntbtlog.txt` (only when the startup protocol is activated)

[[opsi-getting-started-firststeps-osinstall-productkey]]
==== Windows Product Key

If you are using the opsi license management module, then you may administrate your Windows product keys using the license management software. Information on how to do this can be found in the opsi manual.

If you don't want to use the license management module, then the product key can simply be made up using the product properties.

While creating a client, you can use the opsi management interface to enter the product key:

* choose a client
* change to the tab 'netboot products'
* select the product (e.g. {opsi-client-os})
* change to the product property 'productkey' (on the right lower corner of the opsi management interface)
* type in your key
* leave the input field and save the changes

Another possibility is to use the command line. While working with an opsi server, you can read and/or change the server defaults.
To read the server default use (you may need to modify the productId and you must change '<opsiserver.domain.local>' with the fqdn from your opsiserver. Be sure that you enter the commands in one line):
[source,prompt]
----
opsi-admin -d method productPropertyState_getObjects [] '{"productId":"win10-x64","objectId":"opsiserver.domain.local"}'
----

The easiest way to modify the defaults, is to modify the file, and then update the objects with the modified file.

The first step would be to view the contents of an actual configuration file (you may need to modify the productId and you must change '<opsiserver.domain.local>' with the fqdn from your opsiserver. Be sure that you enter the commands in one line):
[source,prompt]
----
opsi-admin -d method productPropertyState_getObjects [] '{"productId":"win10-x64","objectId":"opsiserver.domain.local"}' > /tmp/property_config.json
----

The second step would be to modify the file `/tmp/property_config.json`, and change the entries and values. Finally, you must update the objects using this modified file (enter this command in one line):
[source,prompt]
----
opsi-admin -d method productPropertyState_updateObjects < /tmp/property_config.json
----

You can check that the modifications were successful using the following command (you may need to modify the productId and you must change '<opsiserver.domain.local>' with the fqdn from your opsiserver. Be sure that you enter the commands in one line):
[source,prompt]
----
opsi-admin -d method productPropertyState_getObjects [] '{"productId":"win10-x64","objectId":"opsiserver.domain.local"}'
----

[[opsi-getting-started-firststeps-osinstall-start]]
==== Start the Windows Installation

To start a Windows installation:

* choose a client

* change to the tab 'netboot products'

* select the product (e.g. {opsi-client-os})

* set the 'action request' to 'setup'

* save the changes by clicking the red check mark (which then changes to green)

Now the client should load the {opsi-linux-bootimage} via the network and start it up. Before the Windows installation starts, you might have to confirm.

CAUTION: This refers to clients with a hard drive larger than 2 terabyte. On a non UEFI-system the possible largest partition size is 2 terabyte. When you have a larger partiton scheme the installation will fail. This is a technical restriction. You have to configure the system partition with a maximal size of 2 terabyte and therefore configure two partitions. This can be done with the product-properties. On the other hand the UEFI-module bypasses this restriction by using another partition table.

[[opsi-getting-started-firststeps-osinstall-structure]]
=== Structure of the Unattended Installation Products

This chapter describes the Windows netboot products.

[[opsi-getting-started-firststeps-osinstall-structure-dirs]]
==== Directory Tree Overview

[source,configfile]
----
<productid>-
           |-i386/				NT5 only: Installations files
           |-installfiles/			NT6 only: Installations files
           |-winpe/				NT6 only
           |-opsi/				scripts and templates by opsi.org
           |  |-$oem$/					NT5 only: $oem$ according to MS
           |  |-postinst.d/				scripts after OS-install by opsi.org
           |  !-unattend.(txt/xml).template	  	Template by opsi.org
           |-custom/				scripts and templates by customer
           |  |-$oem$/					NT5 only: $oem$ according to MS by customer
           |  |-postinst.d/				scripts after OS-install by customer
           |  !-unattend.(txt/xml)			unattend.txt by customer
           |-drivers/				drivers directory
           |  |-drivers/			drivers directory
           |  |-pciids/				symbolic links to drivers
           |  |-vendors/			symbolic links to drivers
           |  |-classes/			symbolic links to drivers
           |  |-usbids/				symbolic links to drivers
           |  |-hdaudioids/			symbolic links to drivers
           |  |-pci.ids				PCI-IDs DB
           |  !-usb.ids				USB-IDs DB
           |-setup.py				installation script
           |-<productid>_<version>.control	meta data (only for info)
           |-<productid>.files		    	file list (created automatically)
           |-create_driver_links.py		driver management script
           |-show_drivers.py			driver management script
           |-download_driver_pack.py		driver management script
           !-extract_driver_pack.py		driver management script
----

[[opsi-getting-started-firststeps-osinstall-structure-files]]
==== File Descriptions

* `setup.py` +
This is the installation script which is executed by the boot image.

* `<productid>_<version>.control` +
Contains the meta data of the product as prepared from the package maintainer. These files are here for information purposes only. There will be no effect after changing these files.

* `<productid>.files` +
This file is created automatically and should not be changed.

* `create_driver_links.py` +
`show_drivers.py` +
`download_driver_pack.py` +
`extract_driver_pack.py` +
These are scripts for the simplified driver integration, which is described in its own chapter (<<opsi-getting-started-firststeps-osinstall-driverintegration,"Simplified driver integration for the automatic OS installation">>).

[[opsi-getting-started-firststeps-osinstall-structure-i386]]
==== Directory installfiles / winpe

* `installfiles` +
This directory contains all files from the windows installation DVD (NT6 = Windows 7 and above).

* `winpe` +
This directory contains a bootable winpe image among other files.

[[opsi-getting-started-firststeps-osinstall-structure-opsicustom]]
==== Directories opsi and custom

Both directories contain scripts and configuration files for the OS installation. During the installation process, the directories work together in such a way that they give the priority usage to the files in the custom directories.

The opsi directory contains files and templates that are maintained by opsi.org, and maybe replaced during the next update. So it's not a good idea to make specific (or customized) changes to these files in this location. Please use the custom directory for this purpose, because that directory is not subject to any changes by opsi.org.

The subdirectory `postinst.d` contains scripts which are executed after the OS installation is completed by the `postinst.cmd` program. These scripts are needed to install the opsi-client-agent, among other software. The scripts will be executed in alphabetic order. To make it easier to see the order in which the scripts will be executed, the name always starts with a 2 digit number (`10_dhcp.cmd`). If you want to make extensions, then please do so in the custom/postinst.d directory and start numbers between the 10, 20, 30 ,... (e.g. `13_myscript.cmd`). The starting numbers 10, 20, 30,... are reserved for use by opsi org / uib gmbh. The script `99_cleanup.cmd` is the last one and initiates a reboot.

[[opsi-getting-started-firststeps-osinstall-structure-drivers]]
==== Directory drivers

This directory is used for the integration of drivers and is described in the following chapter.

[[opsi-getting-started-firststeps-osinstall-driverintegration]]
=== Simplified Driver Integration during the unattended Windows Installation

If a pool of computers needs drivers that are not part of the Windows default installation, it's best to integrate their drivers during installation time.

Opsi supports the automatic integration of drivers into the installation, and therefore simplifies driver deployment. In order to integrate drivers with opsi, the drivers simply need to be placed into the correct directory.  When the installation script is called it parses through these directories and creates a catalog. The boot image automatically uses this catalog to embed the correct drivers. Opsi supports the automatic installation of standard drivers, USB drivers, HD audio drivers, and disk controller drivers (text-mode drivers).

In order for a driver to be immediately installed with the Windows installation, you must place the drivers on the server in a specific format. The drivers must be placed in the drivers directory, with the format '\*.inf' , where the file name describes the driver for the Windows setup program. Drivers packed like 'setup.exe' or '*.zip' are not used here. If you have a computer that already has the drivers installed, then you can extract the appropriate drivers using the program 'double driver' (http://www.boozet.org/dd.htm).

There are many levels of driver integration:

* General driver packages

* Preferred drivers that belong to your hardware, but are not assigned to specific computers

* Drivers that will be manually assigned to computers

* Drivers that will be automatically assigned to the computers using the fields <vendor>/<model>

Below is a detailed discussion about how to include each of these drivers

[[opsi-getting-started-firststeps-osinstall-driverintegration-generaldrivers]]
==== General Driver Packages

When the hardware configuration across your pc-pool is very heterogeneous, then it may be reasonable to work with general driver packages. +
General drivers can be placed under `./drivers/drivers`. +
You can find such general driver packages here http://driverpacks.net/ . +
Download the appropriate driver package to a temporary directory, and then unpack the driver package using the opsi script extract_driver_pack.py as such:
[source,prompt]
----
./extract_driver_pack.py <path to the temporary directory with the compressed driverpacks>
----
This will unpack and store the drivers in the directory `./drivers/drivers/`. +
It may be the case that the drivers found by opsi in this location do not necessarily work with your hardware. +
For the drivers which are found in `./drivers/drivers/`, the driver will be matched to the corresponding hardware using the PCI IDs (i.e. USB- or HD_Audio-ID) in the description file, and then integrated into the Windows setup as needed.

[[opsi-getting-started-firststeps-osinstall-driverintegration-preferred]]
==== Preferred Drivers

In case you have to support special hardware, where additional drivers are provided by the manufacturer, then you can use the following procedure to include them in the installation. +
Place the additional drivers in their own directory under: +
`./drivers/drivers/preferred`. +
(the naming and depth of the directory structure is not important).  Drivers that are found in the directory `./drivers/drivers/preferred` will be integrated into the Windows setup, assuming that opsi finds a suitable match for the hardware based on the PCI IDs (i.e. USB or HD_Audo-ID) in the description file of the driver. +
Problems can occur when the same PCI ID can be found in the description file of multiple drivers in `preferred`. In this case, a direct mapping of the drivers to the client is needed.

[[opsi-getting-started-firststeps-osinstall-driverintegration-additional]]
==== Drivers that will be manually assigned to clients

When installing additional drivers not based on the PCI-IDs or USB-IDs, they should be installed under the directory `./drivers/drivers/additional` (where name and depth of the directory structure is not important).  You can map one or more drivers to a client using the Product-Property 'additional_drivers' by supplying one or multiple paths of driver directories under `./drivers/drivers/additional` as value.  The directories specified by 'additional_drivers' are searched recursively and all located drivers will be installed. The usage of symbolic links is also permitted, this can be used to create a specific directory based on the client type (i.e. dell-optiplex-815).

When a driver is found in one of the driver directories that is specified by 'additional_drivers' and matches the PCI identifier, then other drivers in `drivers/preferred` or `drivers/` will not be used ('additional_drivers' can be thought of as 'super-preferred').  Therefore the drivers under 'additional_drivers'  are installed even when the corresponding devices are not found.

[[opsi-getting-started-firststeps-osinstall-driverintegration-byaudit]]
==== Drivers which will be Automatically Assigned to the Clients using the Fields <vendor>/<model>

The previously described mechanism that directly maps drivers to devices is automated since the 4.0.2 Release 2 of opsi. The {opsi-linux-bootimage} will search the directory `./drivers/drivers/additional/byAudit` for a directory name that matches the field 'Vendor' that was given in the Hardware Inventory. This 'Vendor' directory will be searched for a 'Model' directory that corresponds to what is seen in Hardware Inventory. If this directory is found, it will be treated as if it was manually assigned to the product property 'additional_drivers'. +
The directory name 'byAudit' is case sensitive.  The directory names for 'Vendor' and 'Model' are not case sensitive ('Dell' and 'dELL' are treated the same way).

Since opsi 4.0.5 one can use {opsi-configed} for uploading the drivers Automatic driver upload (see opsi-manual "Automatic driver upload")

The {opsi-linux-bootimage} looks for drivers successively in the following directories

* `<vendor>/<model> (<sku>)`
* `<vendor>/<model>`
* `<vendor>/<motherboard-model>`

Some vendors use model identifiers containing special characters. Opsi replaces <,>,?,",:,|,\,/ and * with _ therefore a model identifier like "5000/6000/7000" will match a directory identifier like "5000_6000_7000".

[[opsi-getting-started-firststeps-osinstall-driverintegration-structure]]
===== Structure of the Driver Directory and Driver Files:

[source,configfile]
----
/var/
  !-lib/
     !-opsi/depot/
        !-<productid>/
           !-drivers
              |-classes/		(Links to driver device classes)
              |-hdaudioids/		(Links to HD-Audio drivers)
              |-pciids/			(Links to PCI-ID drivers)
              |-pci.ids			(PCI database)
              |-usbids/			(Links to USB-ID drivers)
              |-usb.ids			(USB database)
              |-vendors/		(Links to manufacturer drivers)
              !-drivers			(place for general driver packages)
                 |-additional/		(manually assigned drivers)
                    |-byAudit/		Model-specific drivers that
                       |-<vendor>		will be assigned by
                          |-<model>		the Hardware Inventory
                 |-buildin/		(data for the i386 version)
                 |-preferred/		(certified drivers)
                 |-exclude/		(excluded drivers)
                 !-mydriverpacks/	(example driver packages)
----

[[opsi-getting-started-firststeps-osinstall-driverintegration-processing]]
===== Processing of the Different Levels of Driver Integration

The top priority is given to drivers which are found using the property 'additional_drivers' or using the inventory data in `./drivers/drivers/additional/byAudit`. When installing a client these drivers will be prefered. If a device is not matched by a driver the following methods are used in order to find a matching driver.

For devices where no matching driver was found using 'additional_drivers' or 'byAudit', opsi will search for and integrate an appropriate driver based on the PCI-ID (respectively USB-, HD_Audio-ID).

'Integration' of drivers means the following:

* The driver will be copied to the local hard drive at `c:\drv\<num>`.

* The Windows Setup will search for the drivers in `c:\drv\`, this is specified in the unattended file.

[[opsi-getting-started-firststeps-osinstall-driverintegration-drivercheck]]
===== Driver Addition and Checking

After any changes in the directory `./drivers/drivers` have been made, call the following command from the Netboot Product root directory in order to set the permissions:
[source,prompt]
----
opsi-set-rights ./drivers
----

Then call the script `./create_driver_links.py`.  The script searches through the directories under './drivers/drivers' and generates a list of links using PCI-IDs, USB-IDs, HD-Audio-IDs. This list is used to match drivers and devices.  The script will prioritize the drivers in the preferred directories.

The script `setup.py` examines the hardware of the installed computers and identifies the necessary drivers.  These will be copied to the disk and the file unattended.xml will be patched.  The script `create_driver_links.py` examines the NT5 products one at a time in the 'i386' tree and extracts the .inf files of the necessary drivers into 'windows_builtin'.  If you make a change to the i386 directory tree (i.e. after installing a service pack), then delete that directory and run `create_driver_links.py` again.  The recognized drivers for NT6 products are found in WinPE at 'windows_builtin'.

With the following command, matching drivers for a existing hardware inventory for a client can be shown:
[source,prompt]
----
./show_drivers.py <clientname>
----
Furthermore devices without a matching driver will be shown.

Use the output of `show_drivers.py` to check if the desired drivers will be integrated.

It is possible that manufacturers include different drivers for different operating systems (i.e. {client-os}) or different configurations (i.e. SATA vs. SATA RAID) in one directory.  The `create_driver_links.py` cannot make this distinction.  If you think the wrong driver will be used, you can move the driver to the 'drivers/exclude' directory and then call `create_driver_links.py` again.  Drivers in the directory 'drivers/exclude' are not used during the integration.

Example output of a `show_drivers.py` call for a client:

[source,prompt]
----
./show_drivers.py pcdummy

PCI-Devices
   [(Standardsystemgeräte), PCI Standard-PCI-zu-PCI-Bridge]
      No driver - device directory  /var/lib/opsi/depot/<productid>/drivers/pciids/1022/9602 not found
   [ATI Technologies Inc., Rage Fury Pro (Microsoft Corporation)]
      Using build-in windows driver
   [(Standard-IDE-ATA/ATAPI-Controller), Standard-Zweikanal-PCI-IDE-Controller]
      /var/lib/opsi/depot/<productid>/drivers/drivers/D/M/N/123
   [Realtek Semiconductor Corp., Realtek RTL8168C(P)/8111C(P) PCI-E Gigabit Ethernet NIC]
      /var/lib/opsi/depot/<productid>/drivers/drivers/preferred/realtek_gigabit_net_8111_8168b
   [IEEE 1394 OHCI-konformer Hostcontroller-Hersteller, OHCI-konformer IEEE 1394-Hostcontroller]
      No driver - device directory '/var/lib/opsi/depot/<productid>/drivers/pciids/197B/2380' not found
   [Advanced Micro Devices, Inc., AMD AHCI Compatible RAID Controller]
      /var/lib/opsi/depot/<productid>/drivers/drivers/preferred/ati_raid_sb7xx
   [(Standard-USB-Hostcontroller), Standard OpenHCD USB-Hostcontroller]
      No driver - device directory '/var/lib/opsi/depot/<productid>/drivers/pciids/1002/4397' not found
   [ATI Technologies Inc, ATI SMBus]
      /var/lib/opsi/depot/<productid>/drivers/drivers/preferred/ati_smbus

USB-Devices
   [(Standard-USB-Hostcontroller), USB-VerbundgerÃ¤t]
      /var/lib/opsi/depot/<productid>/drivers/drivers/preferred/brother_844x_pGerb
   [Microsoft, USB-Druckerunterstützung]
      /var/lib/opsi/depot/<productid>/drivers/drivers/preferred/brother_844x_pGerb

Additional drivers
   [ati_hdaudio_azalia]
     /var/lib/opsi/depot/<productid>/drivers/drivers/additional/ati_hdaudio_azalia
----

Example for a client with 'additional_drivers':
[source,prompt]
----
 ./show_drivers.py e5800
Manually selected drivers (additional)
   [hp_e5800]
      [/var/lib/opsi/depot/<productid>/drivers/drivers/additional/hp_e5800/sp52852/Vista64/HDXHPAI3.inf]
      [/var/lib/opsi/depot/<productid>/drivers/drivers/additional/hp_e5800/sp52852/Vista64/HDX861A.inf]
      [/var/lib/opsi/depot/<productid>/drivers/drivers/additional/hp_e5800/sp52852/Vista64/HDXHPAI1.inf]
      [/var/lib/opsi/depot/<productid>/drivers/drivers/additional/hp_e5800/sp52852/Vista64/HDXCPC.inf]
      [/var/lib/opsi/depot/<productid>/drivers/drivers/additional/hp_e5800/sp52852/Vista64/HDXHPAI2.inf]
      [/var/lib/opsi/depot/<productid>/drivers/drivers/additional/hp_e5800/sp50134/autorun.inf]
      [/var/lib/opsi/depot/<productid>/drivers/drivers/additional/hp_e5800/sp50134/ibxHDMI/IntcDAud.inf]
      [/var/lib/opsi/depot/<productid>/drivers/drivers/additional/hp_e5800/sp50134/HDMI/IntcHdmi.inf]
      [/var/lib/opsi/depot/<productid>/drivers/drivers/additional/hp_e5800/sp50134/Graphics/kit24890.inf]
      [/var/lib/opsi/depot/<productid>/drivers/drivers/additional/hp_e5800/sp50134/IIPS/Impcd.inf]
      [/var/lib/opsi/depot/<productid>/drivers/drivers/additional/hp_e5800/sp54284/Realtek 64bit/hp64win7.inf]

PCI-Devices
   [8086:27C8]  Intel : Intel(R) N10/ICH7 Family USB Universal Host Controller - 27C8
      /var/lib/opsi/depot/<productid>/drivers/drivers/preferred/R293337/WIN7
   [8086:27DA]  Intel : Intel(R) N10/ICH7 Family SMBus Controller - 27DA
      /var/lib/opsi/depot/<productid>/drivers/drivers/preferred/R293337/WIN7
   [8086:27C9]  Intel : Intel(R) N10/ICH7 Family USB Universal Host Controller - 27C9
      /var/lib/opsi/depot/<productid>/drivers/drivers/preferred/R293337/WIN7
   [8086:27DF]  Intel : Intel(R) ICH7 Family Ultra ATA Storage Controllers - 27DF
      /var/lib/opsi/depot/<productid>/drivers/drivers/preferred/R293337/WIN7
   [8086:27CA]  Intel : Intel(R) N10/ICH7 Family USB Universal Host Controller - 27CA
      /var/lib/opsi/depot/<productid>/drivers/drivers/preferred/R293337/WIN7
   [8086:2E30]  Intel : Intel(R) 4 Series Chipset Processor to I/O Controller - 2E30
      /var/lib/opsi/depot/<productid>/drivers/drivers/not_preferred/x64/C/Intel/1
   [8086:27CB]  Intel : Intel(R) N10/ICH7 Family USB Universal Host Controller - 27CB
      /var/lib/opsi/depot/<productid>/drivers/drivers/preferred/R293337/WIN7
   [8086:2E32]  Intel Corporation : Intel(R) G41 Express Chipset
      Manually selected [hp_e5800] /var/lib/opsi/depot/<productid>/drivers/drivers/additional/hp_e5800/sp50134/Graphics
   [8086:27CC]  Intel : Intel(R) N10/ICH7 Family USB2 Enhanced Host Controller - 27CC
      /var/lib/opsi/depot/<productid>/drivers/drivers/preferred/R293337/WIN7
   [8086:244E]  Intel : Intel(R) 82801 PCI-BrÃ¼cke - 244E
      Using build-in windows driver
      This driver will not be integrated, because same device already integrated in: '/var/lib/opsi/depot/<productid>/drivers/drivers/not_preferred/x64/C/Intel/1/dmi_pci.inf'
   [8086:27D0]  Intel : Intel(R) N10/ICH7 Family PCI Express Root Port - 27D0
      /var/lib/opsi/depot/<productid>/drivers/drivers/preferred/R293337/WIN7
   [8086:27B8]  Intel : Intel(R) ICH7 Family LPC Interface Controller - 27B8
      /var/lib/opsi/depot/<productid>/drivers/drivers/preferred/R293337/WIN7
   [8086:27D2]  Intel : Intel(R) N10/ICH7 Family PCI Express Root Port - 27D2
      /var/lib/opsi/depot/<productid>/drivers/drivers/preferred/R293337/WIN7
   [8086:27C0]  Intel : Intel(R) N10/ICH7 Family Serial ATA Storage Controller - 27C0
      /var/lib/opsi/depot/<productid>/drivers/drivers/preferred/R293337/WIN7
   [8086:27D8]  Microsoft : High Definition Audio-Controller
      No driver - device directory '/var/lib/opsi/depot/<productid>/drivers/pciids/8086/27D8' not found
   [10EC:8136]  Realtek : Realtek RTL8102E/RTL8103E-Familie-PCI-E-Fast-Ethernet-NIC (NDIS 6.20)
      Manually selected [hp_e5800] /var/lib/opsi/depot/<productid>/drivers/drivers/additional/hp_e5800/sp54284/Realtek 64bit

USB-Devices
   [0461:0010]  (StandardsystemgerÃ¤te) : USB-EingabegerÃ¤t
      No driver - vendor directory '/var/lib/opsi/depot/<productid>/drivers/usbids/0461' not found
   [0461:4D20]  (StandardsystemgerÃ¤te) : USB-EingabegerÃ¤t
      No driver - vendor directory '/var/lib/opsi/depot/<productid>/drivers/usbids/0461' not found
   [058F:6366]  Kompatibles USB-SpeichergerÃ¤t : USB-MassenspeichergerÃ¤t
      No driver - vendor directory '/var/lib/opsi/depot/<productid>/drivers/usbids/058F' not found
   [0461:0010]  (Standard-USB-Hostcontroller) : USB-VerbundgerÃ¤t
      No driver - vendor directory '/var/lib/opsi/depot/<productid>/drivers/usbids/0461' not found

HD-Audio-Devices
   [10EC:0662]  Realtek High Definition Audio
      Manually selected [hp_e5800] /var/lib/opsi/depot/<productid>/drivers/drivers/additional/hp_e5800/sp52852/Vista64
----

Example with 'byAudit':
[source,prompt]
----
 ./show_drivers.py pctry5detlef
Manually selected drivers (additional)
   [/var/lib/opsi/depot/<productid>/drivers/drivers/additional/byAudit/nvidia/awrdacpi]
      [/var/lib/opsi/depot/<productid>/drivers/drivers/additional/byAudit/nvidia/awrdacpi/pctry5detlef/Display/Radeon X300-X550-X1050 Series Secondary (Microsoft Corporation - WDDM)/atiilhag.inf]
      [/var/lib/opsi/depot/<productid>/drivers/drivers/additional/byAudit/nvidia/awrdacpi/pctry5detlef/Display/Radeon X300-X550-X1050 Series (Microsoft Corporation - WDDM)/atiilhag.inf]
      [/var/lib/opsi/depot/<productid>/drivers/drivers/additional/byAudit/nvidia/awrdacpi/pctry5detlef/MEDIA/Realtek AC'97 Audio/oem21.inf]

PCI-Devices
   [1002:5B70]  ATI Technologies Inc. : Radeon X300/X550/X1050 Series Secondary (Microsoft Corporation - WDDM)
      Manually selected [/var/lib/opsi/depot/<productid>/drivers/drivers/additional/byAudit/nvidia/awrdacpi] /var/lib/opsi/depot/<productid>/drivers/drivers/additional/byAudit/nvidia/awrdacpi/pctry5detlef/Display/Radeon X300-X550-X1050 Series Secondary (Microsoft Corporation - WDDM)
      Multiple selected [/var/lib/opsi/depot/<productid>/drivers/drivers/additional/byAudit/nvidia/awrdacpi] /var/lib/opsi/depot/<productid>/drivers/drivers/additional/byAudit/nvidia/awrdacpi/pctry5detlef/Display/Radeon X300-X550-X1050 Series (Microsoft Corporation - WDDM)
   [10DE:0053]  (Standard-IDE-ATA/ATAPI-Controller) : Standard-Zweikanal-PCI-IDE-Controller
      No driver - device directory '/var/lib/opsi/depot/<productid>/drivers/pciids/10DE/0053' not found
   [10DE:005D]  (Standardsystemgeräte) : PCI Standard-PCI-zu-PCI-Brücke
      No driver - device directory '/var/lib/opsi/depot/<productid>/drivers/pciids/10DE/005D' not found
   [1022:1100]  AMD : AMD HyperTransport(tm)-Konfiguration
      Using build-in windows driver
   [10DE:0054]  (Standard-IDE-ATA/ATAPI-Controller) : Standard-Zweikanal-PCI-IDE-Controller
      /var/lib/opsi/depot/<productid>/drivers/drivers/preferred/fsc__esprimo_p625/FTS_NVIDIASATAAHCIDRIVERVISTA64V103042MCP78__1026963/NVIDIA_SATA_AHCI_DRIVER_Vista64_V10.3.0.42_MCP78 (textmode capable)
   [1022:1101]  AMD : AMD-Adresszuordnungskonfiguration
      Using build-in windows driver
   [10DE:0055]  (Standard-IDE-ATA/ATAPI-Controller) : Standard-Zweikanal-PCI-IDE-Controller
      /var/lib/opsi/depot/<productid>/drivers/drivers/preferred/fsc__esprimo_p625/FTS_NVIDIASATAAHCIDRIVERVISTA64V103042MCP78__1026963/NVIDIA_SATA_AHCI_DRIVER_Vista64_V10.3.0.42_MCP78 (textmode capable)
   [1022:1102]  AMD : AMD DRAM und HyperTransport(tm)-Nachverfolgungsmoduskonfiguration
      Using build-in windows driver
   [10DE:0057]  NVIDIA : NVIDIA nForce-Netzwerkcontroller
      Using build-in windows driver
   [1022:1103]  AMD : Sonstige AMD-Konfiguration
      Using build-in windows driver
   [10DE:0059]  Realtek : Realtek AC'97 Audio
      Manually selected [/var/lib/opsi/depot/<productid>/drivers/drivers/additional/byAudit/nvidia/awrdacpi] /var/lib/opsi/depot/<productid>/drivers/drivers/additional/byAudit/nvidia/awrdacpi/pctry5detlef/MEDIA/Realtek AC'97 Audio
   [10DE:005E]  NVIDIA : NVIDIA nForce4 HyperTransport-Brücke
      /var/lib/opsi/depot/<productid>/drivers/drivers/preferred/ga-ma78-pcbon4/chipset_win7-64/SMBUS
   [104C:8025]  Texas Instruments : OHCI-konformer Texas Instruments 1394-Hostcontroller
      No driver - device directory '/var/lib/opsi/depot/<productid>/drivers/pciids/104C/8025' not found
   [10DE:005A]  (Standard-USB-Hostcontroller) : Standard OpenHCD USB-Hostcontroller
      No driver - device directory '/var/lib/opsi/depot/<productid>/drivers/pciids/10DE/005A' not found
   [10DE:0050]  (StandardsystemgerÃ¤te) : PCI Standard-ISA-Brücke
      No driver - device directory '/var/lib/opsi/depot/<productid>/drivers/pciids/10DE/0050' not found
   [10DE:005B]  (Standard-USB-Hostcontroller) : Standard PCI-zu-USB erweiterter Hostcontroller
      No driver - device directory '/var/lib/opsi/depot/<productid>/drivers/pciids/10DE/005B' not found
   [1002:5B60]  ATI Technologies Inc. : Radeon X300/X550/X1050 Series (Microsoft Corporation - WDDM)
      Manually selected [/var/lib/opsi/depot/<productid>/drivers/drivers/additional/byAudit/nvidia/awrdacpi] /var/lib/opsi/depot/<productid>/drivers/drivers/additional/byAudit/nvidia/awrdacpi/pctry5detlef/Display/Radeon X300-X550-X1050 Series Secondary (Microsoft Corporation - WDDM)
      Multiple selected [/var/lib/opsi/depot/<productid>/drivers/drivers/additional/byAudit/nvidia/awrdacpi] /var/lib/opsi/depot/<productid>/drivers/drivers/additional/byAudit/nvidia/awrdacpi/pctry5detlef/Display/Radeon X300-X550-X1050 Series (Microsoft Corporation - WDDM)
   [10DE:0052]  NVIDIA : NVIDIA nForce PCI-Systemverwaltung
      Using build-in windows driver
   [10DE:005C]  (Standardsystemgeräte) : PCI Standard-PCI-zu-PCI-Brücke
      No driver - device directory '/var/lib/opsi/depot/<productid>/drivers/pciids/10DE/005C' not found

USB-Devices
   [1241:1111]  (Standardsystemgeräte) : USB-EingabegerÃ¤t
      No driver - vendor directory '/var/lib/opsi/depot/<productid>/drivers/usbids/1241' not found

HD-Audio-Devices
   No devices installed
----

TIPS::
* Directory names `NDIS1` contain Vista-Drivers ; `NDIS2` contain Win7-Driver

* Some chipset drivers contain description files, which specify hardware without actually providing drivers. An example would be the `cougar.inf` or `ibexahci.inf` from Intel. If such a 'pseudo-driver' were to be placed in 'additional_drivers' (or 'byAudit'), then other drivers in the 'preferred' subdirectory will be ignored.

* SATA drivers and SATA-RAID drivers refer to the same PCI ID. A SATA-RAID driver will not function with a single-disk system.

* Check the output of `./show_drivers.py` carefully !

include::opsi-packaging-tutorial-windows.adoc[]

[[opsi-getting-started-more-info]]
== More Information
The link:https://download.uib.de/opsi_stable/doc/opsi-manual-stable-en.pdf[opsi manual] contains a wide array of additional information that is important for productive operations.
If you are using your opsi server productively, we recommend that you familiarize yourself with the 'opsi-backup' tool in order to create a backup of your data.

If you do not find what you are looking for or need help, please contact link:https://forum.opsi.org[the opsi community].

For productive installations we recommend professional support by uib within the framework of a link:https://uib.de/en/support-training/support/[maintenance and support contract].
