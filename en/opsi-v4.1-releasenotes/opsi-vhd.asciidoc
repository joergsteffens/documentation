////
; Copyright (c) uib gmbh (www.uib.de)
; This documentation is owned by uib
; and published under the german creative commons by-sa license
; see:
; https://creativecommons.org/licenses/by-sa/3.0/de/
; https://creativecommons.org/licenses/by-sa/3.0/de/legalcode
; english:
; https://creativecommons.org/licenses/by-sa/3.0/
; https://creativecommons.org/licenses/by-sa/3.0/legalcode
;
; credits: http://www.opsi.org/credits/
////

:Author:    uib gmbh
:Email:     info@uib.de
:Date:      25.1.2018
:Revision:  4.1.0
:toclevels: 6

include::../common/opsi_terms.asciidoc[]

[[opsi-manual-vhd]]
== opsi vhd reset

[[opsi-manual-vhd-preconditions]]
=== Preconditions for the opsi extension 'opsi vhd reset

This module currently is a
link:https://www.opsi.org/product/extensions-of-opsi/[cofunding project]. +
Some preconditions have to be met to use this module. So it requires a special modules file to activate this feature. This module file can be obtained by buying the extension module. For evaluation purposes we also provide a temporary modules file free of charge ( -> mail to info@uib.de). +
This extension is bundled with the extension 'opsi-local-image', which means that in order to use it, you need an activation for 'opsi-local-image'.
If you have one, you may use it without any additional costs.

////
Weitere Details hierzu finden Sie in <<opsi-manual-modules>>.
////

As a technical precondition opsi >= 4.0.7 is required with the package versions:

.Required packages
[options="header"]
|==========================
|opsi package|version
|opsi-winst |>= 4.12.0.13
|==========================


[[opsi-manual-vhd-introduction]]
=== Introduction

The requirements of computer networks for education / trainings / class rooms differ from those of other networks. An important requirement, is the fast recovery of workstations to regain a clean and well known installation status, which has been altered by temporary use. +
opsi has with the extension 'opsi-local-image' the solution for this problem. +
With the extension 'opsi-vhd-reset' there is another solution which have a different technical approach. +
So both solutions have their specific advantages and disadvantages.

The technical approach here is:
* Installation of a windows 10 into a vhd container
* Snapshot of the original installation by creating a child vhd, which records any future changes.
* Fast recovery by replacing the old child vhd with a new empty one.
* Upgrade of the initial installation by merging updates from the child VHD to the parent VHD
* In a nutshell we use the well known snapshot features found in virtualization engines just without virtualization.


[[opsi-manual-vhd-proceedings]]
=== Process steps

[[opsi-manual-vhd-proceedings-initial]]
==== Initial Installation

By running the netboot product `opsi-vhd-win10-x64` a Windows 10 will be installed directly into a VHD file.

.Scheme: Initial Installation 1: Creation of the VHD
image::opsi-vhd-inst1.png["Scheme: Initial installation with opsi-vhd-win10-x64", width=400]

.Scheme: Initial Installation 2: Windows Installation
image::opsi-vhd-inst2.png["Scheme: Initial installation with opsi-vhd-win10-x64", width=400]

The next step is the installation of the application software.

.Scheme: Initial Installation 3: Software Installation
image::opsi-vhd-inst3.png["Scheme: Initial installation with opsi-vhd-win10-x64", width=400]

By running the localboot product 'opsi-vhd-control' the following actions will be done:

* The opsi meta data (which products are installed on which version) will be stored on the client.
* The Windows-PE partition will be activated for the next boot and reboot is triggered.

The product 'opsi-vhd-control' has a very low installation sequence priority (-97). Therefore this product will start after all the normal applications software is installed. So it's possible to switch this product to setup together with the applications.

.Scheme: Initial Installation 4: Activating the PE partition
image::opsi-vhd-inst4.png["Scheme: Initial installation with opsi-vhd-win10-x64", width=450]

After the Windows-PE boots, the second part of 'opsi-vhd-control' starts to work and creates a child VHD which seals the initial installation and records all further changes.

.Scheme: opsi-vhd-control: Sealing the initial installation
image::opsi-vhd-control-1stsnap.png["Schema: Sealing the inital installation  with opsi-vhd-control", width=400]

All changes while working are stored in the child VHD.

.Scheme: Working with the 'sealed' system
image::opsi-vhd-control-work.png["Schema: Working with the 'sealed' system", width=400]


[[opsi-manual-vhd-proceedings-restore]]
==== Fast recovery

In order to recover the sealed installation you have to run 'opsi-vhd-control' again. The stored opsi-meta data will be restored to the opsi server and a reboot to the Windows-PE is performed.

.Scheme: opsi-vhd-control: Recovery of the initial installation 1
image::opsi-vhd-control-activatepe.png["Scheme: Recovery of the inital installation with opsi-vhd-control 1", width=400]

From the Windows-PE the child VHD is replaced by a new empty one and we can reboot to the cleaned initial installation.

.Scheme: opsi-vhd-control: Recovery of the initial installation 2
image::opsi-vhd-control-resnap.png["Scheme: Recovery of the inital installation with opsi-vhd-control 2", width=400]


[[opsi-manual-vhd-proceedings-update]]
==== Updating an image

In order to update the initial installation with patches and software updates you need to start the following workflow:

* Recover the initial installation with opsi-vhd-control
* Install all the updates (They will be stored in the child VHD)
* Integrate the changes in the child to the parent by running 'opsi-vhd-control' with the property 'upgrade=true'. This will also store the new meta data to the client for the next recovery.


[[opsi-manual-vhd-components]]
=== The opsi-vhd products

The extension 'opsi-vhd-reset' consists of the following products:

The netboot product for the initial installation:

* `opsi-vhd-win10-x64`

The localboot product to control the creation, the exchange and merge of the child VHD's:

* `opsi-vhd-control`


[[opsi-manual-vhd-components-uefi]]
==== UEFI Compatibility

All opsi-vhd-reset products are UEFI compatible.


[[opsi-manual-vhd-components-netboot]]
==== The opsi netboot product 'opsi-vhd-win10-x64' and its properties

This netboot products are very similar to the standard netboot products (4.1.0) for the Windows installation.
After installation on the server it has to be filled like it's described for the windows netboot products in the 'getting-started' manual. +
Also most of the properties are equal.

The following properties are special for opsi-vhd-reset:

* `windows_vhd_size` +
This propery gives the size of the base (parent) VHD in absolute sizes or in percent of the disk size minus the size of the windows PE partition. +
The default value of 100% will be shortened to 80% in order to get space for the child VHD. If you give any other value which lead to a size of above 80% it will be also shortened to 80%. +
This property replaces the standard property `windows_partition_size` +
(Default = 100%)

* `installto`: +
The value is 'vhd' and you should not try to change this.

The following standard properties are not existing at 'opsi-vhd':

* `windows_partition_size`, `windows_partition_label` +
see above. The Label of the partition which holds the VHD files is 'CONTAINER'.
* `data_partition_size`, `data_partition_letter`, `data_partition_create`, `data_partition_preserve` +
There is no possibility for a data partitions in opsi-vhd-reset currently.
* `boot_partition_size`, `boot_partition_letter`, `boot_partition_label` +
There is no possibility for a boot partitions in opsi-vhd-reset currently.
* `pre_format_system_partitions`, `preserve_winpe_partition` +
The value for this property is always 'true' at opsi-vhd-reset.

[[opsi-manual-vhd-components-control]]
==== The opsi localboot product 'opsi-vhd-control' and its properties

The product 'opsi-vhd-control' has a very low installation sequence priority (-97). Therefore this product will start after all the normal applications software is installed. So it's possible to switch this product to setup together with the applications.

* `disabled` +
This property is for debugging. +
If 'true' no actions will be done. +
Default = 'false'

* `upgrade` +
If 'true': Merge the changes that are collected in the child VHD to the parent VHD. Afterwards replace the child VHD with an empty one. +
If 'false': Replace the child VHD with an empty one. +
At the end of a successful 'upgrade' run this property will switch back to 'false'. +
Default = 'false'

* `stop_on_no_network_in_pe` +
This property is for debugging. +
If 'true': Abort with an error message if there is no network connection to the server, so it's possible to analyze where the problem is.
Default = 'false'


[[opsi-manual-vhd-restrictions]]
==== Known Problems and Restrictions

* There is also an experimental 32 Bit version. But a bug in the merge command of the windows PE 32 bit diskpart.exe restricts the use of this version. So it stays in experimental (at least for the time being).

* Implementations for Windows 8.1 or Windows 7 Enterprise are possible. We'll build them at request. Windows 7 Professional does not support installations to VHD.

* It's known that the last Windows 10 Release Upgrade (1709) crashes on VHD based installations. So it's possible that this is a principle restriction. +
(https://www.heise.de/newsticker/meldung/VHD-Boot-Windows-Update-demoliert-Aktivierung-3806023.html)
