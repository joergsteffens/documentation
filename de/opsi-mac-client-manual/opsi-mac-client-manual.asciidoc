////
; Copyright (c) uib gmbh (www.uib.de)
; This documentation is owned by uib
; and published under the german creative commons by-sa license
; see:
; https://creativecommons.org/licenses/by-sa/3.0/de/
; https://creativecommons.org/licenses/by-sa/3.0/de/legalcode
; english:
; https://creativecommons.org/licenses/by-sa/3.0/
; https://creativecommons.org/licenses/by-sa/3.0/legalcode
;
////

:Author:    uib gmbh
:Email:     info@uib.de
:Revision:  4.2
:toclevels: 6
:doctype:   book
//:date:      26.01.2021

// Include common opsi terms
include::../common/opsi_terms.asciidoc[]


= opsi MacOS client manual

// Include common opsi copyright
include::../common/opsi_manual_copyright.asciidoc[]


[[opsi-macclient-introduction]]
== Einführung MacOS Clients in opsi

Diese Anleitung beschreibt den Betrieb von MacOS Clients in opsi.

Es wird voraus gesetzt, das die Installation und Inbetriebnahme eines {opsi-Server}s bereits erfolgt ist.

Wesentliche Themen dieser Anleitung:

. Aufnahme und Einbindung von Mac-Rechnern in opsi
(Installation des opsi-mac-client-agent)
. Bereitstellung von opsi Standarsoftware für Mac auf dem opsi-server
. Installation von Standard Software auf den Mac-Clients
. opsi-Standardsoftware für Mac unter opsi
. Paketierung eigener Software 
. Erstellung von opsi-Paketen
. Hinweise zu Mac Clients
.. Spezielle Befehle für MacOS
.. Directories die Sie verwenden dürfen
.. Der pseudo user opsi-setup-admin

[[opsi-macclient-convention]]
== Konventionen dieses Dokuments

Befehle werden gesondert hervorgehoben:

[source,prompt]
----
dies ist ein Befehl
----

Im Rahmen der Installation und Konfiguration können Sie die Befehle aus diesen Feldern in der Regel der Reihe nach per _copy & paste_ aus diesem Dokument kopieren und ausführen.

Das ist ein opsi-script Code:

[source,winst]
----
Message "Installing "+ $ProductId$ +" ..."
----

Kapitel welche den Namen einer bestimmten Plattform enthalten sind spezifisch für diese Plattform. Die unterstützen Plattformen sind:

* *Windows*

* *Linux*

* *MacOS*


[[opsi-macclient-requirements]]
== Voraussetzungen für MacOS Clients

Nachfolgend werden die Voraussetzungen für das Management von MacOS Clients unter opsi beschrieben.

Der opsi-mac-client-agent ist eine
http://uib.de/de/opsi-erweiterungen/erweiterungen/[kofinanzierte opsi Erweiterung]. +
Das bedeutet, dass Sie zum Einsatz eine Freischaltdatei benötigen. Diese Freischaltung erhalten Sie wenn Sie die Erweiterung kaufen. Zu Evaluierungszwecken stellen wir Ihnen auch eine zeitlich befristete Freischaltung kostenlos zur Verfügung ( -> mail an info@uib.de). +
Weitere Details hierzu finden Sie in +
https://download.uib.de/opsi_stable/doc/html/opsi-manual/opsi-manual.html#opsi-manual-modules

Technische Voraussetzungen ist ein opsi-server mit opsi 4.1.

Als Mac-Clients werden unterstützt:

* MacOS Versionen von 10.13 bis 11.0 +
(`High Sierra` bis `Big Sur`) in der intel x64 Architektur

* Bei Verwendung der arm64 Architectur (Apple Silicium, M1) ist derzeit die Installation des opsi-client-agent der 'Dynamic Binary Translators' namens `rosetta2` notwendig. Diesen können Sie Installieren mit: +
`softwareupdate --install-rosetta --agree-to-license`
Die erfolgreiche Installation können Sie Überprüfen mit: +
`pkgutil --pkgs | grep Rosetta` +
`com.apple.pkg.RosettaUpdateAuto`.

Die native Unterstützung der arm64 Architectur (Apple Silicium) ist in Planung. Hierzu sind die notwendigen Referenz Geräte bestellt. Aussagen wann die Bereistellung für diese Platform erfolgt können im Moment (Januar 2021) noch nicht getroffen werden.


[[opsi-macclient-installation-config-get-essential-products]]
== Einspielen der minimalen MacOS opsi-Produkte

Zur Verteilung von Software mit opsi stehen fertige Produkte zur Installation bereit.
Diese beinhalten unter anderem den Agent ('opsi-client-agent'), welcher für das Management auf Clients installiert werden muss.

Es gibt eine automatische und manuelle Möglichkeit dies zu tun.
Der automatisierte Weg wird empfohlen.

[[opsi-macclient-std-packages]]
=== opsi-Standardsoftware für MacOS unter opsi

Folgende Produkte werden von opsi für macos als standard zur Verfügung gestellt:

* `opsi-mac-client-agent`
* `swaudit`
* `hwaudit`
* `m-homebrew`
* `m-system-update`
* `opsi-configed`
* `opsi-logviewer`
* `opsi-auto-update`
* `m-javavm`

////
* `opsi-client-kiosk`
* `opsi-setup-detector`
* ``
////


[[opsi-macclient-installation-config-get-essential-products-automatic]]
=== Automatisches Einspielen der minimalen MacOS opsi-Produkte

Zur automatischen Installation der opsi-Produkte gibt es das Werkzeug `opsi-package-updater`, welches wie in '/etc/opsi/opsi-package-updater.conf' bzw. `/etc/opsi/package-updater.repos.d/` konfiguriert, automatisch die aktuellen Pakete vom opsi Repository holt und auf dem Server installiert.

Die Konfiguration der opsi Repositories für Mac-Clients findet sich im Verzeichnis `/etc/opsi/package-updater.repos.d/` in den Dateien `uib-mac-testing.repo` und `uib-mac.repo`.

Sollten diese Dateien bei Ihnen noch nicht installiert sein,
so finden Sie diese unter: +
####################

Aktivieren Sie die gewünschten repos in dem Sie in der gewünschten *.repo Datei den Eintrag `active = true` setzen.

.`/etc/opsi/package-updater.repos.d/uib-mac-testing.repo`

[source,configfile]
----
; This repository provides testing opsi products for managing MacOS
; clients with opsi.

[repository_uib_macos_testing]
description = opsi macos packages in testing
active = true
baseUrl = http://download.uib.de
dirs = opsi4.1/testing/packages/macos/localboot/
autoInstall = false
autoUpdate = true
autoSetup = false
; Set Proxy handler like: http://10.10.10.1:8080
proxy =
----


.`/etc/opsi/package-updater.repos.d/uib-mac.repo`

[source,configfile]
----
; This repository provides table opsi roducts for managing MacOS
; clients with opsi.

[repository_uib_macos_stable]
description = opsi macos packages in stable
active = true
baseUrl = http://download.uib.de
dirs = opsi4.1/stable/packages/macos/localboot/
autoInstall = false
autoUpdate = true
autoSetup = false
; Set Proxy handler like: http://10.10.10.1:8080
proxy =
----

Installieren Sie die Pakete auf dem Server durch die Ausführung des Befehls als root:

[source,prompt]
----
opsi-package-updater -v --repo uib_macos_stable install
----

bzw.

[source,prompt]
----
opsi-package-updater -v --repo uib_macos_testing install
----

Nach erfolgreicher Installation müssen Sie beim `opsi-configed` ein erneutes laden aller Daten ausführen, damit die neuen Produkte dort sichtbar werden.

Muss für den Zugriff auf das Internet die Verbindung über einen Proxy geleitet werden, so muss dieser in den `.repo`-Konfigurationsdateien unter `/etc/opsi/package-updater.repos.d/` als Wert für `proxy` eingetragen werden.
Ab Version 4.1.1.33 von opsi-utils kann ein globaler Proxy in `/etc/opsi/opsi-package-updater.conf` konfiguriert werden.

[source,configfile]
----
[repository_uib_macos_stable]
…
proxy =
----

Sollen später installierte Pakete aktualisiert werden, so kann dies mit dem folgenden Befehl gemacht werden:
[source,prompt]
----
opsi-package-updater -v update
----

Weitere Informationen zum `opsi-package-updater` können im Handbuch gefunden werden.



[[opsi-macclient-installation-config-get-essential-products-manually]]
=== Manuelles Einspielen der MacOS opsi-Produkte

Es gibt außerdem die Möglichkeit manuell die Pakete herunter zu laden und zu installieren.

Holen Sie sich die aktuellen opsi-Pakete im `.opsi`-Paketformat.
Die Pakete finden Sie unter https://download.uib.de/opsi4.1/stable/packages/macos/localboot bzw. unter `https://download.uib.de/opsi4.1/testing/packages/macos/localboot`.

Wir empfehlen die .opsi-Dateien unter `/var/lib/opsi/repository` zu speichern.
Zum Sicherstellen, dass opsiconfd auf die Dateien zugreifen kann, sollte `opsi-set-rights /var/lib/opsi/repository` ausgeführt werden.

Nach dem Download müssen Sie die Pakete auf dem Server mit dem Befehl `opsi-package-manager -i <paketname>.opsi` installieren.

[[opsi-macclient-firststeps-software-deployment-client-integration]]
== Integration vorhandener MacOS-Clients in opsi

Um vorhandene Mac-Clients in opsi aufzunehmen, muss auf diesen der {opsi-client-agent} installiert werden.
Dies kann auf mehrere Arten durchgeführt werden.
Nachdem Sie, wie im Folgenden beschrieben, den {opsi-client-agent} installiert haben, erscheint der Client auch in der Client-Liste des {opsi-configed}, sofern Sie ihn dort noch nicht hinzugefügt hatten.


Grundsätzlich gibt es die Möglichkeit die Installation des Agents <<opsi-macclient-firststeps-software-deployment-client-integration-service-setup,auf dem Client auszuführen>> oder <<opsi-macclient-firststeps-software-deployment-client-integration-opsi-deploy,vom Server aus>> die Installation anzustoßen.

Das Ausführen der Installation direkt auf dem Client eignet sich für einzelne Rechner.
Für einen Massen-Rollout des Agents eignet sich grundsätzlich der <<opsi-macclient-firststeps-software-deployment-client-integration-opsi-deploy,opsi-deploy-client-agent>>
besser, wenn die dazu nötigen Freischaltungen auf den Mac-Clients vorhanden sind.

Falls bereits eine andere Möglichkeit existiert Software zu verteilen, so ist es ebenfalls möglich darüber den opsi-client-agent zu verteilen und das im Paket mitgelieferte Script `silent_setup.sh` auszuführen.

Sobald der Agent installiert ist, können vorhandene opsi-Produkte auf diesen Clients <<opsi-macclient-firststeps-software-deployment-product-tests,installiert>> werden.




[[opsi-macclient-firststeps-software-deployment-client-integration-service-setup]]
=== Verwendung von service_setup.sh auf MacOS


[[opsi-macclient-firststeps-software-deployment-client-integration-service-setup1]]
==== Verwendung von service_setup.sh auf MacOS (Erstinstallation)

Aufgrund der Sicherheitsrestriktionen von macOS ist die Möglichkeit Scripte von gemounteten shares auszuführen eingeschränkt. Der Versuch den im folgenden beschriebenen Vorgang mit über den `Finder` nach `/Volumes` (oder so) gemounteten share zu machen wird daher (je nach macOS Version) scheitern.

* Loggen Sie sich auf dem Client ein.
* Starten Sie das Terminal-Programm
* Für die folgenden Befehle müsen Sie die folgenden Platzhalter ersetzen:
**  `<username>` mit Ihrem login Namen
** `<mnt>` durch ein Verzeichnisnamen der noch nicht existiert z.B. 'mnt'
** `<serviceuser>` durch einen Usernamen der auf dem opsi-server bekannt ist.
** `<servicepass>` durch das Passwort des <serviceuser>. Sie können `:<servicepass>` zusammen mit der mount-Option `-N` auch weglassen, dann werden Sie nach dem Passwort gefragt
** `<opsi-server>` durch den Namen oder die IP-Nummer des opsi-servers

[source,prompt]
----
sudo su
cd /Users/<username>
mkdir <mnt>
mount_smbfs //<serviceuser>@<opsi-server>/opsi_depot /Users/<username>/<mnt>
cd /Users/<username>/<mnt>/opsi-mac-client-agent
./service_setup.sh
cd
umount /Users/<username>/<mnt>
----

bzw. ohne Passwortabfrage

[source,prompt]
----
sudo su
cd /Users/<username>
mkdir <mnt>
mount_smbfs -N //<serviceuser>:<servicepass>@<opsi-server>/opsi_depot /Users/<username>/<mnt>
cd /Users/<username>/<mnt>/opsi-mac-client-agent
./service_setup.sh
cd
umount /Users/<username>/<mnt>
----

Beispiel:

[source,prompt]
----
sudo su
cd /Users/uib
mkdir mnt
mount_smbfs  //adminuser@sepia/opsi_depot /Users/uib/mnt
cd /Users/uib/mnt/opsi-mac-client-agent
./service_setup.sh
cd
umount /Users/uib/mnt
----


. Starten Sie von dem gemounteten share das Script `opsi-mac-client-agent\service_setup.sh` +
Bestätigen Sie mit 2 x Enter
. Das Skript kopiert die notwendigen Dateien in ein temporäres lokales Verzeichnis und startet dann zur eigentlichen Installation opsi-script. 
. Das Skript nimmt per opsi-Webservice Kontakt zum Server auf um serverseitig den Client zu erzeugen und den pckey zu erfahren. Dies erfolgt zunächst mit der in der config.ini eingetragenen user/password Kombination. Schlägt dies fehl, so erscheint ein Login-Fenster mit Service-URL ({opsi-configserver}), Benutzername und Passwort. Hier wird ein Benutzer benötigt, der Mitglied der Gruppe 'opsiadmin' ist. Möglich ist auch ein Benutzer, welcher nur die Methode `host_createOpsiClient` ausführen darf.

CAUTION: Der Client rebootet nach der Installation.

[[opsi-macclient-firststeps-software-deployment-client-integration-service-setup2]]
==== Verwendung von service_setup.sh auf MacOS (Reperaturinstallation)

* Loggen Sie sich auf dem Client ein.
* Starten Sie das Terminal-Programm
* Für die folgenden Befehle müsen Sie die folgenden Platzhalter ersetzen:
** `<serviceuser>` durch einen Usernamen der auf dem opsi-server bekannt ist.
** `<servicepass>` durch das Passwort des <serviceuser>. Sie können `:<servicepass>` auch weglassen, dann werden Sie nach dem Passwort gefragt
** `<opsi-server>` durch den Namen oder die IP-Nummer des opsi-servers
* Bei der Erstinstallation hat opsi einen Versteckten Pseudo user Namens opsisetupadmin angelegt, in dessen 'HeimatVerzeichnis' `/var/opsisetupadmin` sich auch das mount directory befindet.

[source,prompt]
----
sudo su
mount_smbfs -N //<serviceuser>:<servicepass>@<opsi-server>/opsi_depot /var/opsisetupadmin/opsi_depot
cd /var/opsisetupadmin/opsi_depot/opsi-mac-client-agent
./service_setup.sh
cd
umount /var/opsisetupadmin/opsi_depot
----

Beispiel:

[source,prompt]
----
sudo su
mount_smbfs -N //adminuser:linux123@sepia/opsi_depot /var/opsisetupadmin/opsi_depot
cd /var/opsisetupadmin/opsi_depot/opsi-mac-client-agent
./service_setup.sh
cd
umount /var/opsisetupadmin/opsi_depot
----


. Starten Sie das Script `opsi-mac-client-agent\service_setup.sh` +
Bestätigen Sie mit 2 x Enter
. Das Skript kopiert die notwendigen Dateien in ein temporäres lokales Verzeichnis und startet dann zur eigentlichen Installation opsi-script. 
. Das Skript nimmt per opsi-Webservice Kontakt zum Server auf um serverseitig den Client zu erzeugen und den pckey zu erfahren. Dies erfolgt zunächst mit der in der config.ini eingetragenen user/password Kombination. Schlägt dies fehl, so erscheint ein Login-Fenster mit Service-URL ({opsi-configserver}), Benutzername und Passwort. Hier wird ein Benutzer benötigt, der Mitglied der Gruppe 'opsiadmin' ist. Möglich ist auch ein Benutzer, welcher nur die Methode `host_createOpsiClient` ausführen darf.

CAUTION: Der Client benötigt nach der Installation ein Reboot um aktiv zu werden. +
Der Reboot wird *nicht* automatisch ausgelöst.


[[opsi-macclient-firststeps-software-deployment-client-integration-opsi-deploy]]
=== Verwendung von opsi-deploy-client-agent für MacOS

Das `opsi-deploy-client-agent` Skript verteilt den {opsi-client-agent} direkt vom {opsi-server} auf die Clients.
Es ist hiermit einfach möglich eine große Menge an Clients vom Server aus in eine opsi-Umgebung zu integrieren.
Voraussetzung hierfür sind bei den Clients:

* ein aktivierter ssh Zugang

Leider sind bei MacOS die ssh Zugänge per default deaktiviert.
Zur Verwendung des `opsi-deploy-client-agent` Befehls müssen diese Zugange daher erst aktiviert werden.
 
Die kann interaktiv in den 'System preferences / sharing' gemacht werden:

image::macos_sharing_ssh_login.png["Aktivierung des ssh Zugangs",width=300]

Auf der Kommandozeile kann dies wie folgt gemacht werden:

[source,prompt]
----
sudo launchctl load -w /System/Library/LaunchDaemons/ssh.plist
----

Eine Konrolle des aktuellen Status des ssh Zugangs ist möglich mit dem Befehl:

[source,prompt]
----
sudo systemsetup -getremotelogin
----

Die deaktivierung des ssh zugangs auf der Kommandozeile sieht wie folgt aus:

[source,prompt]
----
sudo launchctl unload /System/Library/LaunchDaemons/ssh.plist
----

Das `opsi-deploy-client-agent` Skript findet sich unter `/var/lib/opsi/depot/opsi-client-agent` +
Führen Sie das Script mit 'root' Rechten aus.
Falls das Script nicht ausführbar ist, so können Sie dieses Problem mit dem folgenden Befehl beheben: +
`opsi-set-rights /var/lib/opsi/depot/opsi-client-agent/opsi-deploy-client-agent`

Das Skript erzeugt serverseitig den Client, kopiert die Installations-Dateien und Konfigurationsinformationen, wie bspw. den pckey, auf den Client und startet dort die Installation. +
Die Installation läuft im Hintergrund ohne das ein User davon etwas bemerken muß.

This chapter has to written for macos ##############

////

Das `opsi-deploy-client-agent` Skript verteilt den {opsi-client-agent} direkt vom {opsi-server} auf die Clients.
Es ist hiermit einfach möglich eine große Menge an Clients vom Server aus in eine opsi-Umgebung zu integrieren.
Voraussetzung hierfür sind bei den Clients:

* ein offener c$ share
* ein offener admin$ share
* ein administrativer account
* keine oder eine nicht interferierende Antivirus-Lösung bei Benutzung der `winexe`

Auf dem Server muss das Programm `winexe` vorhanden sein.
Diese ist Teil des Pakets `opsi-windows-support`.

Das `opsi-deploy-client-agent` Skript findet sich unter `/var/lib/opsi/depot/opsi-client-agent` +
Führen Sie das Script mit 'root' Rechten aus.
Falls das Script nicht ausführbar ist, so können Sie dieses Problem mit dem folgenden Befehl beheben: +
`opsi-set-rights /var/lib/opsi/depot/opsi-client-agent/opsi-deploy-client-agent`

Das Skript erzeugt serverseitig den Client, kopiert die Installations-Dateien und Konfigurationsinformationen, wie bspw. den pckey, auf den Client und startet dort die Installation.

Das Kopieren der Installationsdateien kann auf zwei Wegen geschehen.
Die erste Variante wird mittels 'mount' C$ auf dem Server verfügbar machen und dort die Daten zur Installation hin kopieren.
Die zweite Variante wird den c$-Share des Clients mittels 'smbclient'
auf dem Server einhängen und dann die Installationsdateien dorthin
kopieren.

Mit dem `opsi-deploy-client-agent` Skript kann auch eine ganze Liste von Clients bearbeitet werden.
Dazu können entweder beliebig viele Clients als letzter Parameter übergeben werden oder mit der Option '-f' die Clients aus einer Datei eingelesen werden.
Bei der Verwendung einer Datei, muss in jeder Zeile ein Client stehen.

Das Script kann mit IP-Adressen, Hostnamen und FQDNs arbeiten. Es wird versuchen automatisch zu erkennen welche Art von Adresse übergeben wurde.

Mögliche Parameter können Sie mit dem Parameter `--help` in Erfahrung bringen:
[source,prompt]
----
bonifax:/home/uib/oertel# cd /var/lib/opsi/depot/opsi-client-agent
bonifax:/var/lib/opsi/depot/opsi-client-agent# ./opsi-deploy-client-agent --help
usage: opsi-deploy-client-agent [-h] [--version] [--verbose]
                                [--debug-file DEBUGFILE] [--username USERNAME]
                                [--password PASSWORD]
                                [--use-fqdn | --use-hostname | --use-ip-address]
                                [--ignore-failed-ping]
                                [--reboot | --shutdown | --start-opsiclientd]
                                [--hosts-from-file HOSTFILE]
                                [--skip-existing-clients]
                                [--threads MAXTHREADS] [--smbclient | --mount]
                                [--keep-client-on-failure | --remove-client-on-failure]
                                [host [host ...]]

Deploy opsi client agent to the specified clients. The c$ and admin$ must be
accessible on every client. Simple File Sharing (Folder Options) should be
disabled on the Windows machine.

positional arguments:
  host                  The hosts to deploy the opsi-client-agent to.

optional arguments:
  -h, --help            show this help message and exit
  --version, -V         show program's version number and exit
  --verbose, -v         increase verbosity (can be used multiple times)
  --debug-file DEBUGFILE
                        Write debug output to given file.
  --username USERNAME, -u USERNAME
                        username for authentication (default: Administrator).
                        Example for a domain account: -u
                        "<DOMAIN>\\<username>"
  --password PASSWORD, -p PASSWORD
                        password for authentication
  --use-fqdn, -c        Use FQDN to connect to client.
  --use-hostname        Use hostname to connect to client.
  --use-ip-address      Use IP address to connect to client.
  --ignore-failed-ping, -x
                        try installation even if ping fails
  --reboot, -r          reboot computer after installation
  --shutdown, -s        shutdown computer after installation
  --start-opsiclientd, -o
                        start opsiclientd service after installation
  --hosts-from-file HOSTFILE, -f HOSTFILE
                        File containing addresses of hosts (one per line).If
                        there is a space followed by text after the address
                        this will be used as client description for new
                        clients.
  --skip-existing-clients, -S
                        skip known opsi clients
  --threads MAXTHREADS, -t MAXTHREADS
                        number of concurrent deployment threads
  --smbclient           Mount the client's C$-share via smbclient.
  --mount               Mount the client's C$-share via normal mount on the
                        server for copying the files. This imitates the
                        behaviour of the 'old' script.
  --keep-client-on-failure
                        If the client was created in opsi through this script
                        it will not be removed in case of failure. (DEFAULT)
  --remove-client-on-failure
                        If the client was created in opsi through this script
                        it will be removed in case of failure.
----
////

[[opsi-macclient-firststeps-software-deployment-product-tests]]
== Rollout existierender Produkte auf MacOS

Für den Rollout von Software auf Clients muss auf diesen der 'opsi-client-agent' installiert sein.
Dieser kann auf <<opsi-macclient-firststeps-software-deployment-client-integration,bestehende Rechner>> ausgerollt werden.


Nachfolgend wird die Management-Oberfläche <<opsi-macclient-firststeps-software-deployment-product-tests-configed,{opsi-configed}>> verwendet, um Software auf Clients zu verteilen.


[[opsi-macclient-firststeps-software-deployment-product-tests-inventory]]
=== Inventarisierung mit dem localboot-Produkten hwaudit und swaudit

Wählen Sie im '{opsi-configed}', Modus 'Client-Konfiguration', unter dem Reiter 'Clients' den betreffenden Client aus.

Wenn noch nicht geschehen, aktualisieren Sie den Datenbestand des {opsi-configed}s mittels 'Datei/Daten neu laden' bzw. Anklicken des entsprechenden Icons.

Wechseln Sie zum Reiter 'Produktkonfiguration', klicken Sie in die Spalte 'Angefordert' für das Produkt +hwaudit+, daraufhin öffnet sich eine Liste/Dropdown-Menü und dort wählen Sie die Aktion 'setup'. Wiederholen Sie das für das Produkt +swaudit+.

Der Haken in der Icon-Menüleiste sollte seine Farbe auf Rot wechseln. Wenn Sie ihn anklicken, werden die neuen Einstellungen zum {opsi-Server} übermittelt, im Anschluss ist seine Farbe wieder grün.

Starten Sie dann den Client (neu).
Er sollte jetzt den +opsi-client-agent+ starten und die Produkte +hwaudit+ und +swaudit+ installieren.
Bei +hwaudit+ und +swaudit+ werden Hard- bzw. Softwareinformationen erhoben und zum {opsi-Server} übermittelt.
Die gesammelten Informationen werden unter den Tabs 'Hardwareinformationen' bzw. 'Software-Inventur' angezeigt.

[[opsi-macclient-firststeps-software-deployment-product-tests-configed]]
=== Verteilung von opsi Standard Produkten: opsi-configed

################ Achtung Java ? ####################

Zu den Standard-Produkten gehört das Produkt `opsi-configed` welches das opsi Management Interface als Anwendung auf einem Rechner installiert.
Da diese Anwendung eine Java-Anwendung ist, wird ein JavaRE mitgeliefert.

Wählen Sie im '{opsi-configed}', Modus 'Client-Konfiguration', unter dem Reiter 'Clients' den betreffenden Client aus.

Wenn noch nicht geschehen, aktualisieren Sie den Datenbestand des {opsi-configed}s mittels 'Datei/Daten neu laden' bzw. Anklicken des entsprechenden Icons.

Wechseln Sie zum Reiter 'Produktkonfiguration', klicken Sie in die Spalte 'Angefordert' für das Produkt +opsi-configed+, daraufhin öffnet sich eine Liste/Dropdown-Menü und dort wählen Sie die Aktion 'setup'.

Der Haken in der Icon-Menüleiste sollte seine Farbe auf Rot wechseln. Wenn Sie ihn anklicken, werden die neuen Einstellungen zum {opsi-Server} übermittelt, im Anschluss ist seine Farbe wieder grün.

Starten Sie dann den Client (neu).
Er sollte jetzt den +opsi-client-agent+ starten und das Produkt +opsi-configed+ installieren.
Nach Abschluß der Installation sollten Sie unter `Applications` den Punkt `opsi-configed` finden.


[[opsi-macclient-softwintegration]]
== Einbindung eigener Software in die Softwareverteilung von opsi

Die Installation von Software erfolgt bei opsi durch den {opsi-client-agent} und insbesondere durch das Script gesteuerte Setup Programm {opsi-script}. Daher muss zu jedem opsi-Produkt ein {opsi-script}-Script erstellt werden. Danach werden dieses Script, die Installationsdateien und die Metadaten zu einem opsi-Produkt gepackt, welches sich schließlich auf dem {opsi-Server} installieren lässt.

[[opsi-macclient-softwintegration-tutorial]]
=== Ein kleines Tutorial zur Erstellung eines {opsi-script} Scriptes


include::../common/softwintegration-tutorial-introduction.asciidoc[]

[[opsi-macclient-softwintegration-tutorial-general]]
==== Methoden der nicht interaktiven Softwareinstallation bei MacOS

Apple hat (im gegensatz zu Microsoft) sehr früh die Methoden zur Software installation standardisiert. Im Kern gibt es zwei Methoden:

* *application Directory*: +
Es handelt sich um ein Verzeichnis nach dem Muster:
`<Application name>.app` Ein solches Verzeichnis wird aber im `Finder` nicht als Verzeichnis angezeigt, sondern als 'Anwendung'. Innerhalb dieses Verzeichnisses müssen sich nach einem bestimmten Muster die Dateien der Anwendung befinden. Ein typischer Aufbau wäre:

----
opsi-script-gui.app
  |--Contents
       |-Info.plist
       |-PkgInfo
       |-MacOS
       |  |-opsi-script-gui
       |
       |-Resources
          |- (....)
----

Ein solches Verzeichnis muß zur Installation nur in das Verzeichnis `/Applications` kopiert werden. Evtl. müssen noch Dateien im Verzeichnis `MacOS` ausführbar gemacht werden. +
Solche *.app Verzeichnisse werden zum Download zumeist gepackt angeboten. 

* *PKG file*: +
Diese Dateien enthalten Software die über einen speziellen Befehl installiert werden müssen.

In beiden Fällen ist eine `unattended` (also nicht interaktive) Installation kein Problem.

Häufig wird MacOS Software in gepackten Formaten angeboten wie *.zip, *.dmg
oder auch *.tgz.

Alle bisher genannten Varianten können per opsi-script direkt installiert werden, ausser *.tgz welches vorher ausgepackt werden muß.

include::../common/softwintegration-tutorial-script-structure-opsi-script-basics.asciidoc[]
//
[[opsi-macclient-softwintegration-tutorial-macos-special-commands]]
===== Spezielle Kommandos für MacOS

* GetOS

* 

In den folgenden Kapiteln werden spezielle opsi MacOS Befehle zur Installation von Software vorgestellt welche aus der opsi-script Library `uib_macosinstalllib` stammen. Diese Dokumentation ist in Englisch, da sie direkt aus dem Quellcode automatisch generiert wurde.

// http://www.methods.co.nz/asciidoc/userguide.html#X90
:leveloffset: 4

// Include os-lib_uib_macosinstalllib.asciidoc
include::../../en/common/os-lib_uib_macosinstalllib.asciidoc[]

:leveloffset: 0

[[opsi-macclient-softwintegration-tutorial-template]]
==== Drittes Beispiel: MacOS-Template 'm-opsi-template'

Dieses Template können Sie sich mit dem `opsi-setup-detector` erstellen.


.setup.opsiscript: Installationsscript
[source,winst]
----
; ----------------------------------------------------------------
; Copyright (c) uib gmbh (www.uib.de)
; This sourcecode is owned by uib
; and published under the Terms of the General Public License.
; ----------------------------------------------------------------
encoding=utf8

[Actions]
requiredWinstVersion >= "4.12.0.28"
ScriptErrorMessages = false

DefVar $ProductId$
DefVar $InstallDir$
DefVar $MinimumSpace$
DefVar $ExitCode$
DefVar $ErrorString$
DefVar $LicenseRequired$
DefVar $LicenseKey$
DefVar $LicensePool$
DefVar $OS$
DefVar $oldProgFound$
DefVar $installSuccess$


; import complete file !
importlib "uib_exitcode.opsiscript"
importlib "%scriptpath%\osd-lib.opsiscript"
importlib "%scriptpath%\uib_macosinstalllib.opsiscript"


; ----------------------------------------------------------------
; $ProductId$ is the name of the product in opsi, only lower letters, no umlauts, no white spaces, use '-' as a seperator
Set $ProductId$		 = "m-opsi-template"
Set $MinimumSpace$	 = "1 MB"
; the path were we find the product after the installation
;Set $InstallDir$		= "/Applications/<path to the product>"
Set $InstallDir$		= "/Applications/<productid.app>"
Set $LicenseRequired$ = "false"
Set $LicensePool$	  = "" 
; ----------------------------------------------------------------

set $OS$ = GetOS

if not(($OS$ = "macos"))
	logError "Installation aborted: wrong OS version: only MacOS"
	isFatalError "wrong OS"
endif

comment "Show product picture"
ShowBitmap "%ScriptPath%\" + $ProductId$ + ".png" $ProductId$



if FileExists("%ScriptPath%\delsub.opsiscript")
	comment "Start uninstall sub section"
	Sub "%ScriptPath%\delsub.opsiscript"
endif

Message "Installing " + $ProductId$ + " ..."

if $LicenseRequired$ = "true"
	comment "Licensing required, reserve license and get license key"
	set $LicenseKey$ = get_licensekey_byPool($LicensePool$)
endif


comment "Start setup "
ChangeDirectory "%SCRIPTPATH%/files1"
;----------------------------------------------
set $installSuccess$ = install_macos_generic("%SCRIPTPATH%/files1/<my macos install file>") 
;----------------------------------------------
Sub_check_installSuccess


comment "Copy files"
Files_install

[Sub_check_installSuccess]
if $installSuccess$  = "false"
	LogError "Installation failed"
	isfatalerror "Installation failed"
else
	Comment "Installation success"
endif


[Files_install]
; Example of recursively copying some files into the installation directory:
;
; copy -s "%ScriptPath%\files\*.*" "$InstallDir$"
----

.delsub.opsiscript: Ausgelagerte Deinstallations-Sub-Sektion
[source,winst]
----
; Copyright (c) uib gmbh (www.uib.de)
; This sourcecode is owned by uib gmbh
; and published under the Terms of the Affero General Public License v3.
; ----------------------------------------------------------------
encoding=utf8

Message "Check for existing installation of " + $ProductId$ + " ..."

comment "Start the Uninstall check:"
set $oldProgFound$ = "false"
if directoryExists($InstallDir$)
	set $oldProgFound$ = "true"
endif

if $oldProgFound$ = "true"
	Message "Uninstalling " + $ProductId$ + " ..."
	if not(($InstallDir$ = '') or ($InstallDir$ = 'unknown') or ($InstallDir$ = '/Applications/'))
		Files_uninstall
	endif
endif


[Files_uninstall]
del -sf "$InstallDir$\"

;-----------------------------------------------------

[Linkfolder_remove_desktop_icon]
; check delete_element
set_basefolder common_desktopdirectory
set_subfolder ""
delete_element $productId$

;-----------------------------------------------------
----

.uninstall.opsiscript: Deinstallations-Skript
[source,winst]
----
; ----------------------------------------------------------------
; Copyright (c) uib gmbh (www.uib.de)
; This sourcecode is owned by uib
; and published under the Terms of the Affero General Public License v3.
; ----------------------------------------------------------------
encoding=utf8


[Actions]
requiredWinstVersion >= "4.12.0.28"
ScriptErrorMessages = false

DefVar $ProductId$
DefVar $InstallDir$
DefVar $MinimumSpace$
DefVar $ExitCode$
DefVar $ErrorString$
DefVar $LicenseRequired$
DefVar $LicenseKey$
DefVar $LicensePool$
DefVar $OS$
DefVar $oldProgFound$


; import complete file !
importlib "uib_exitcode.opsiscript"
importlib "%scriptpath%\osd-lib.opsiscript"


; ----------------------------------------------------------------
; $ProductId$ is the name of the product in opsi, only lower letters, no umlauts, no white spaces, use '-' as a seperator
Set $ProductId$		 = "m-opsi-template"
; the path were we find the product after the installation
;Set $InstallDir$	= "/Applications/<product.app>"
Set $InstallDir$	= "unknown"
Set $LicenseRequired$ = "False"
Set $LicensePool$	  = ""
; ----------------------------------------------------------------

set $OS$ = GetOS

if not(($OS$ = "macos"))
	logError "Installation aborted: wrong OS version: only macos"
	isFatalError "wrong OS"
endif


comment "Show product picture"
ShowBitmap "%ScriptPath%\" + $ProductId$ + ".png" $ProductId$



Message "Uninstalling " + $ProductId$ + " ..."

if FileExists("%ScriptPath%\delsub.opsiscript")
	comment "Start uninstall sub section"
	Sub "%ScriptPath%\delsub.opsiscript"
endif

if $LicenseRequired$ = "true"
	comment "Licensing required, free license used"
	Sub_free_license
endif

[Sub_free_license]
comment "License management is enabled and will be used"

comment "Trying to free license used for the product"
DefVar $result$
Set $result$ = FreeLicense($LicensePool$)
; If there is an assignment of a license pool to the product, it is possible to use
; Set $result$ = FreeLicense("", $ProductId$)
;
; If there is an assignment of a license pool to a windows software id, it is possible to use
; DefVar $WindowsSoftwareId$
; $WindowsSoftwareId$ = "..."
; set $result$ = FreeLicense("", "", $WindowsSoftwareId$)
----

[[opsi-macclient-softwintegration-create-opsi-package]]
=== Erstellen eines opsi-Produkt-Pakets

//[[opsi-macclient-softwintegration-create-opsi-package-setup-detector]]
//==== Installation von opsi-setup-detector, opsi-package-builder und opsi-logviewer

[[opsi-setup-detector-installation]]
==== Installation des opsi-setup-detector, {opsi-package-builder} und opsi-logviewer

include::../common/setup-detector-installation.asciidoc[]

[[opsi-setup-detector-installation_olv]]
===== Installation des opsi-logviewer

Den opsi-logviewer gibt es derzeit für Windows, Linux und MacOS.

Sie können den opsi-logviewer per opsi installieren:

Das Paket `opsi-logviewer` gehört zu den opsi Standardprodukten und sollte auf Ihrem opsi-server installiert sein. Falls nicht, mit:

[source,prompt]
----
opsi-package-updater install opsi-logviewer
----

können Sie es auf dem opsi-server installieren.

Ein Setup-Programm um den opsi-setup-detector auf Windows auch ohne opsi zu installieren, finden sie unter : +
https://download.uib.de/opsi4.1/misc/helper/ 


Das opsi-produkt `opsi-logviewer` hat eine Abhängigkeit zu dem opsi-Produkt `javavm`.

[[opsi-macclient-softwintegration-tutorial-create-with-opsi-setup-detector]]
==== Das Programm opsi-setup-detector zum Erstellen eines MacOS Scriptes

include::../common/setup-detector-use-start.asciidoc[]

include::../common/osd_tasks_macos.asciidoc[]

Die nun folgenden Screenshots zeigen zwar die Verwendung von Windows-Installer Dateien,
sie sehen aber analog aus bei der Verwendung von MacOS Installer Dateien wie *.app, *.dmg, *.zip.

include::../common/osd-task-use-single-analyze-and-create.asciidoc[]

Mehr Details zum `opsi-setup-detector` finden Sie im opsi-manual: +
https://download.uib.de/opsi4.1/documentation/html/opsi-manual-v4.1/opsi-manual-v4.1.html#opsi-setup-detector



[[opsi-macclient-softwintegration-tutorial-modify-with-opsi-packagebuilder]]
==== Das Programm {opsi-package-builder} zum modifizieren eines Scriptes

Beim ersten start nach der Installation startet der {opsi-package-builder} im Offline Modus, da noch wichtige Konfigurationsdaten für die Verbindung mit dem opsi-server fehlen.

.{opsi-package-builder}  Erster Start: Offline Modus
image::opb_firststart.png["Erster Start",width=300]

[[opsi-macclient-softwintegration-tutorial-modify-with-opsi-packagebuilder_config]]
===== Initiale Konfiguration des {opsi-package-builder}

Um die fehlenden Konfigurationsdaten einzugeben öffnen Sie die 'Einstellungen'.

.{opsi-package-builder} Einstellungen: Allgemein
image::opb_conf_general.jpeg["Einstellungen: Allgemein",width=300]

Im Reiter 'Allgemein' machen Sie bitte folgende Einstellungen:

* 'Konfigserver' : Vollständiger Name (FQDN) Ihres opsi-configservers (z.B. opsi.mycompany.org)

* 'opsiadmin Benutzer': username eines Mitglieds der Gruppe `opsiadmin` (Am besten Ihr username)

* 'opsiadmin Passwort': das Passwort des oben angegeben Benutzers. Dieses wird nicht angezeigt und verschlüsselt gespeichert. Es ist notwendig damit der {opsi-package-builder} mit dem opsi-server kommunizieren kann.

* 'opsi Server Version': opsi 4.1 oder höher

* 'opsi Workbench' : `/var/lib/opsi/workbench`

* 'Kompatibiltät der Befehlsausführung' : opsi 4.0.4 oder neuer / Sudo ohne Passwort

* 'Benutzer' : Ihr voller Name (wird in changelogs verwendet)

* 'EMail' : Ihre eMail Adresse (wird in changelogs verwendet)


.{opsi-package-builder} Einstellungen: Programm
image::opb_conf_program.jpeg["Einstellungen: Programm",width=300]

Im Reiter 'Programm' machen Sie bitte folgende Einstellungen:

* 'Bestehendes Netzlaufwerk verwenden' : Häkchen setzen

* 'Entwicklungsordner' : Pfad zum Verzeichnis in dem die opsi-Pakete erstellt werden sollen. Dies ist idealerweise der Pfad zu der Stelle an der die opsi_workbench Ihres opsi-servers gemountet ist.


.{opsi-package-builder} Einstellungen: Verwaltung
image::opb_conf_opsi.png["Einstellungen: Verwaltung",width=300]

Im Reiter 'Verwaltung' empfehlen wir folgende Einstellung abweichend vom Default 

* 'Paketieren' : `opsi-makepackage -v`


Speichern Sie die Einstellungen und starten Sie den {opsi-package-builder} neu.
Der {opsi-package-builder} sollte nun nicht mehr 'Offline Modus' melden.

[[opsi-macclient-softwintegration-tutorial-modify-with-opsi-packagebuilder_use]]
===== Mit dem {opsi-package-builder} Pakete modifizieren, packen und Installieren

.{opsi-package-builder} Start
image::opb_start.jpg[Start]

.{opsi-package-builder} Reiter Packet
image::opb_tab_product.jpg[Reiter Packet]

.{opsi-package-builder} Reiter Produktvariablen (Properies)
image::opb_tab_property.jpg[Reiter Produktvariablen (Properies)]

.{opsi-package-builder} Reiter Abhängigkeiten
image::opb_tab_dependencies.jpg[Reiter Abhängigkeiten]



.{opsi-package-builder} Button: Packen
image::opb_btnPacken.jpg[Button: Packen]

.{opsi-package-builder} Button: Installieren
image::opb_btnInstallieren.jpg[Button: Installieren]

.{opsi-package-builder} Button: Installieren + Setup
image::opb_InstSetup.jpg[Button: Installieren + Setup]


This chapter has to written for macos ##############


[[opsi-macclient-softwintegration-tutorial-create-and-test-script]]
==== Testen und verbessern eines {opsi-script} Skriptes

Zum Testen und verbessern eines Scriptes / Produktes gibt es zwei verschiedene Varianten:

* Testen des erstellten Scriptes 'Standalone' also ohne es auf dem opsi-server zu installieren und es von dort auf den Client auszurollen

* 'Integrierte' Tests des kompletten Produktes mit Installation auf dem Server und Ausrollen auf einem Client

===== 'Standalone' Tests

Starten Sie die Anwendung {opsi-script-gui}: per Doppelklick. 

* Windows: Die Datei `winst32.exe` per Doppelklick. +
(Beim Starten des Programms auf einem Windows 7 / 10 Client muss "ausführen als Administrator" über die rechte Maustaste verwendet werden.) Wenn der `opsi-client-agent` bereits auf Ihrem Rechner installiert ist, finden Sie diese unter `C:\Program files (x86)\opsi.org\opsi-client-agent\opsi-winst\winst32.exe`
Wenn nicht, kopieren Sie sich das Verzeichnis `opsi-winst` vom share `\\<opsiserver\opsi_depot`, aus dem Verzeichnis `opsi-winst\files.`

* Linux: Starten sie Datei `/usr/bin/opsi-script-gui`

* MacOS: Starten sie die Anwendung `/Applications/opsi-script-gui`

Sie sehen dann folgendes Fenster:

.{opsi-script-gui} im interaktiven Modus
image::winst-interaktiv.png["Screenshot: {opsi-script-gui} im interaktiven Modus",400]

Über 'Select Script' können Sie das Skript auswählen, dass Sie ausführen möchten.
Mit 'Start' können Sie das Script starten. Dabei wird das Script auf diesem Rechner ausgeführt.


* Schauen Sie sich anhand der Log-Datei an, wie der {opsi-script} das Skript interpretiert.

* Kopieren Sie die `Setup.exe`, welche Sie installieren wollen, in das Verzeichnis, in dem die Skripte liegen (z.B. `c:\test`).

* Öffenen Sie das Script `setup.ins` in einem Editor.
Im Prinzip können Sie jeden beliebigen Editor verwenden.
Wir empfehlen den Editor 'jEdit' mit {opsi-script} Syntax-Highlighting, wie Sie ihn in der Grundausstattung der opsi-Produkte finden.

.jEdit mit einem opsi script
image::jedit-with-winst-script.png["jEdit with a opsi script",400]


* Sie können nun das Skript im Editor anpassen und speichern (Sie können den Editor geöffnet lassen).
Wechseln Sie zum {opsi-script}-Fenster und starten Sie das Skript erneut über den Knopf 'Start' (das Skript muss nicht neu ausgewählt werden).
Schauen Sie sich das auf Basis Ihrer Änderungen im Skript veränderte Log über `View Log` an.

* Auf diese Art und Weise, also über die Wiederholung der Punkte: +
 - Anpassung des Skriptes und speichern +
 - Skript ausführen +
 - Log überprüfen +
können Sie nach und nach Ihre Skripte so anpassen, dass sie das tun, was Sie wünschen.

Hinweise zur Lösung von Detail-Problemen finden Sie im nächsten Kapitel.
Im übernächsten Kapitel wird erklärt, wie Sie aus den so erstellten Skripten ein opsi-Produkt erstellen, das Sie auf dem {opsi-server} installieren können.

===== 'Integrierte' Tests


[[opsi-macclient-softwintegration-create-opsi-package-makeproductfile]]
==== Packen mit opsi-makepackage

Danach können Sie das Produkt packen. Gehen Sie dazu in das Stammverzeichnis des Produkts und rufen Sie 'opsi-makepackage' auf. Es wird nun das Produkt gepackt.

Es ist zu empfehlen die Pakete gleich mit einer zugehörigen md5-Prüfsummendatei zu erstellen.
Diese Datei wird unter anderem vom `opsi-package-updater` genutzt, um nach der Paketübertragung die Paketintegrität sicher zu stellen.
Eine solche Datei wird automatisch erstellt, aber für besondere Einsatzszenarien kann die Erstellung unterdrückt werden.

Bei der Übertragung von Paketen auf {opsi-depotserver} kann auf 'zsync' zurück gegriffen werden, um nur Unterschiede zwischen verschiedenen Paketen zu übertragen.
Damit dieses Verfahren verwendet werde kann, wird eine Datei besondere `.zsync`-Datei benötigt.
Eine solche Datei wird automatisch erstellt, aber für besondere Einsatzszenarien kann die Erstellung unterdrückt werden.

Wenn es beim Erstellen großer Pakete zu Platzproblemen im temporären Verzeichnis `/tmp` kommt, ist es möglich mittels `--temp-directory` ein abweichendes temporäres Verzeichnis anzugeben.

Wenn schon ein Paket dieser Version existiert, so zeigt `opsi-makepackage` eine Rückfrage:

[source,prompt]
----
Package file '/var/lib/opsi/workbench/mytest/mytest_3.14-1.opsi' already exists.
Press <O> to overwrite, <C> to abort or <N> to specify a new version:
----

Mit `o` wählen Sie überschreiben, mit `c` brechen Sie den Vorgang ab und mit `n` können Sie wählen, dass Sie nach einer neuen Product- bzw. Package-Version gefragt werden.

Das gepackte Paket können Sie mit `opsi-package-manager --install <paketdatei>` auf dem Server installieren.



Mehr Details zum `opsi-makepackage` finden Sie im opsi-manual: +
https://download.uib.de/opsi4.1/documentation/html/opsi-manual-v4.1/opsi-manual-v4.1.html#opsi-manual-configuration-tools


[[opsi-macclient-softwintegration-create-opsi-package-manager]]
==== Installieren mit opsi-package-manager

This chapter has to written for macos ##############

Mehr Details zum `opsi-package-manager` finden Sie im opsi-manual: +
https://download.uib.de/opsi4.1/documentation/html/opsi-manual-v4.1/opsi-manual-v4.1.html#opsi-manual-configuration-tools


[[opsi-macclient-hints]]
== Allgemeine Hinweise zu MacOS

[[opsi-macclient-hints-keyboard]]
=== Das Keyboard unter MacOS

include::mac_keyboard_hint.asciidoc[]

[[opsi-macclient-hints-directories]]
=== MacOS Directory struktur mit 'go' und 'nogo'

MacOS basiert auf BSD-Unix und hat damit eine typische Unix Filesystemstruktur. 
Es gibt aber aus Sicherheitsgründen etliche Bereich die ausschließlich Apple vorbehalten sind und noch ein paar weiter spezifika welche für den Paketierer wichtig sind:

* `/Applications` +
Das ist das Verzeicxhnis in dem die grafischen Anwendungen liegen. Eine Anwendung besteht dabei aus eine Verzeichnis <Application name>.app. Ein solches Verzeichnis wird aber im `Finder` nicht als Verzeichnis angezeigt, sondern als 'Anwendung'. Innerhalb dieses Verzeichnisses müssen sich nach einem bestimmten Muster die Dateien der Anwendung befinden.

* `/sbin`, `/bin`, `/usr/bin`, `/usr/share`, `/usr/lib` +
Dies sind 'apple only' Verzeichnisse in die sonst niemand etwas reinkopieren darf. Verwenden Sie stattdessen die `local` Varianten: +
`/usr/local/bin`, `/usr/local/share`, `/usr/local/lib`

[[opsi-macclient-hints-opsi-setup-admin]]
=== Der MacOS pseudo user opsi-setup-admin

This chapter has to written for macos ##############

[[opsi-macclient-more-info]]
== Weitere Informationen

Das link:https://download.uib.de/opsi_stable/doc/opsi-handbuch-stable-de.pdf[opsi-Handbuch] enthält eine Fülle von weiteren Informationen, die für den produktiven Betrieb wichtig sind.
Wenn Sie ihren opsi-Server produktiv einsetzen empfehlen wir Ihnen besonders sich mit dem Werkzeug 'opsi-backup' vertraut zu machen, um eine Sicherung Ihrer Daten erstellen zu können.

Wenn Sie dort nicht fündig werden oder Hilfe benötigen, wenden Sie sich an link:https://forum.opsi.org[die opsi Community].

Für produktive Installationen empfehlen wir professionelle Unterstützung durch uib im Rahmen eines link:https://uib.de/de/support-schulung/support/[Pflege- und Supportvertrages].

