////
; Copyright (c) uib gmbh (www.uib.de)
; This documentation is owned by uib
; and published under the german creative commons by-sa license
; see:
; https://creativecommons.org/licenses/by-sa/3.0/de/
; https://creativecommons.org/licenses/by-sa/3.0/de/legalcode
; english:
; https://creativecommons.org/licenses/by-sa/3.0/
; https://creativecommons.org/licenses/by-sa/3.0/legalcode
;
////

:Author:    uib gmbh
:Email:     info@uib.de
:Revision:  4.2
:toclevels: 6
:doctype:   book

// Include common opsi terms
include::../common/opsi_terms.asciidoc[]


= opsi mac client manual

// Include common opsi copyright
include::../common/opsi_manual_copyright.asciidoc[]


[[opsi-macclient-introduction]]
== Einführung Mac Clients in opsi

Diese Anleitung beschreibt den Betrieb von MacOS Clients in opsi.

Es wird voraus gesetzt, das die Installation und Inbetriebnahme eines {opsi-Server}s bereits erfolgt ist.

Wesentliche Themen dieser Anleitung:

. Aufnahme und Einbindung von Mac-Rechnern in opsi
(Installation des opsi-mac-client-agent)
. Bereitstellung von opsi Standarsoftware für Mac auf dem opsi-server
. Installation von Standard Software auf den Mac-Clients
. opsi-Standardsoftware für Mac unter opsi
. Paketierung eigener Software 
. Erstellung von opsi-Paketen
. Hinweise zu Mac Clients
.. Spezielle Befehle für MacOS
.. Directories die Sie verwenden dürfen
.. Der pseudo user opsi-setup-admin

[[opsi-macclient-convention]]
== Konventionen dieses Dokuments

Befehle werden gesondert hervorgehoben:

[source,prompt]
----
dies ist ein Befehl
----

Im Rahmen der Installation und Konfiguration können Sie die Befehle aus diesen Feldern in der Regel der Reihe nach per _copy & paste_ aus diesem Dokument kopieren und ausführen.


[[opsi-macclient-requirements]]
== Voraussetzungen

Nachfolgend werden die Voraussetzungen für das Management von MacOS Clients unter opsi beschrieben.

Der opsi-mac-client-agent ist eine
http://uib.de/de/opsi-erweiterungen/erweiterungen/[kofinanzierte opsi Erweiterung]. +
Das bedeutet, dass Sie zum Einsatz eine Freischaltdatei benötigen. Diese Freischaltung erhalten Sie wenn Sie die Erweiterung kaufen. Zu Evaluierungszwecken stellen wir Ihnen auch eine zeitlich befristete Freischaltung kostenlos zur Verfügung ( -> mail an info@uib.de). +
Weitere Details hierzu finden Sie in +
https://download.uib.de/opsi_stable/doc/html/opsi-manual/opsi-manual.html#opsi-manual-modules

Technische Voraussetzungen ist ein opsi-server mit opsi 4.1.

Als Mac-Clients werden unterstützt:

* MacOS Versionen von 10.13 bis 11.0 +
(`High Sierra` bis `Big Sur`) in der intel x64 Architektur

* Bei Verwendung der arm64 Architectur (Apple Silicium, M1) ist derzeit die Installation des opsi-client-agent der 'Dynamic Binary Translators' namens `rosetta2` notwendig. Diesen können Sie Installieren mit: +
`softwareupdate --install-rosetta --agree-to-license`
Die erfolgreiche Installation können Sie Überprüfen mit: +
`pkgutil --pkgs | grep Rosetta` +
`com.apple.pkg.RosettaUpdateAuto`.

Die native Unterstützung der arm64 Architectur (Apple Silicium) ist in Planung. Hierzu sind die notwendigen Referenz Geräte bestellt. Aussagen wann die Bereistellung für diese Platform erfolgt können im Moment (Januar 2021) noch nicht getroffen werden.


[[opsi-macclient-installation-config-get-essential-products]]
=== Einspielen der minimalen opsi-Produkte

Zur Verteilung von Software mit opsi stehen fertige Produkte zur Installation bereit.
Diese beinhalten unter anderem den Agent ('opsi-client-agent'), welcher für das Management auf Clients installiert werden muss.

Es gibt eine automatische und manuelle Möglichkeit dies zu tun.
Der automatisierte Weg wird empfohlen.

[[opsi-macclient-installation-config-get-essential-products-automatic]]
==== Automatisches Einspielen der minimalen opsi-Produkte

Zur automatischen Installation der opsi-Produkte gibt es das Werkzeug `opsi-package-updater`, welches wie in '/etc/opsi/opsi-package-updater.conf' bzw. `/etc/opsi/package-updater.repos.d/` konfiguriert, automatisch die aktuellen Pakete vom opsi Repository holt und auf dem Server installiert.

Die Konfiguration der opsi Repositories für Mac-Clients findet sich im Verzeichnis `/etc/opsi/package-updater.repos.d/` in den Dateien `uib-mac-testing.repo` und `uib-mac.repo`.

Sollten diese Dateien bei Ihnen noch nicht installiert sein,
so finden Sie diese unter: +
####################

Aktivieren Sie die gewünschten repos in dem Sie in der gewünschten *.repo Datei den Eintrag `active = true` setzen.

. `/etc/opsi/package-updater.repos.d/uib-mac-testing.repo`

[source,configfile]
----
; This repository provides testing opsi products for managing MacOS
; clients with opsi.

[repository_uib_macos_testing]
description = opsi macos packages in testing
active = true
baseUrl = http://download.uib.de
dirs = opsi4.1/testing/packages/macos/localboot/
autoInstall = false
autoUpdate = true
autoSetup = false
; Set Proxy handler like: http://10.10.10.1:8080
proxy =
----


. `/etc/opsi/package-updater.repos.d/uib-mac.repo`

[source,configfile]
----
; This repository provides table opsi roducts for managing MacOS
; clients with opsi.

[repository_uib_macos_stable]
description = opsi macos packages in stable
active = true
baseUrl = http://download.uib.de
dirs = opsi4.1/stable/packages/macos/localboot/
autoInstall = false
autoUpdate = true
autoSetup = false
; Set Proxy handler like: http://10.10.10.1:8080
proxy =
----

Installieren Sie die Pakete auf dem Serverrch die Ausführung des Befehls als root:

[source,prompt]
----
opsi-package-updater -v --repo uib_macos_stable install
----

bzw.

[source,prompt]
----
opsi-package-updater -v --repo uib_macos_testing install
----

Nach erfolgreicher Installation müssen Sie beim `opsi-configed` ein erneutes laden aller Daten ausführen, damit die neuen Produkte dort sichtbar werden.

Muss für den Zugriff auf das Internet die Verbindung über einen Proxy geleitet werden, so muss dieser in den `.repo`-Konfigurationsdateien unter `/etc/opsi/package-updater.repos.d/` als Wert für `proxy` eingetragen werden.
Ab Version 4.1.1.33 von opsi-utils kann ein globaler Proxy in `/etc/opsi/opsi-package-updater.conf` konfiguriert werden.

[source,configfile]
----
[repository_uib_windows]
…
proxy =
----

Sollen später installierte Pakete aktualisiert werden, so kann dies mit dem folgenden Befehl gemacht werden:
[source,prompt]
----
opsi-package-updater -v update
----

Weitere Informationen zum `opsi-package-updater` können im Handbuch gefunden werden.



[[opsi-macclient-installation-config-get-essential-products-manually]]
==== Manuelles Einspielen der opsi-Produkte

Es gibt außerdem die Möglichkeit manuell die Pakete herunter zu laden und zu installieren.

Holen Sie sich die aktuellen opsi-Pakete im `.opsi`-Paketformat.
Die Pakete finden Sie unter https://download.uib.de/opsi4.1/stable/packages/macos/localboot bzw. unter `https://download.uib.de/opsi4.1/testing/packages/macos/localboot`.

Wir empfehlen die .opsi-Dateien unter `/var/lib/opsi/repository` zu speichern.
Zum Sicherstellen, dass opsiconfd auf die Dateien zugreifen kann, sollte `opsi-set-rights /var/lib/opsi/repository` ausgeführt werden.

Nach dem Download müssen Sie die Pakete auf dem Server mit dem Befehl `opsi-package-manager -i <paketname>.opsi` installieren.


[[opsi-macclient-adding-clients]]
== Clients zu opsi hinzufügen

Damit Rechner mit opsi verwaltet werden können, müssen Sie dem System bekannt sein.
Außerdem muss auf diesen Rechnern ein Agent laufen, damit eine Kommunikation zwischen Server und Client möglich ist.
Ohne diesen Agent ist keine Verwaltung möglich.


[[opsi-macclient-firststeps-software-deployment-client-integration]]
=== Integration vorhandener Mac-Clients in opsi

Um vorhandene Mac-Clients in opsi aufzunehmen, muss auf diesen der {opsi-client-agent} installiert werden.
Dies kann auf mehrere Arten durchgeführt werden.
Nachdem Sie, wie im Folgenden beschrieben, den {opsi-client-agent} installiert haben, erscheint der Client auch in der Client-Liste des {opsi-configed}, sofern Sie ihn dort noch nicht hinzugefügt hatten.


Grundsätzlich gibt es die Möglichkeit die Installation des Agents <<opsi-macclient-firststeps-software-deployment-client-integration-service-setup,auf dem Client auszuführen>> oder <<opsi-macclient-firststeps-software-deployment-client-integration-opsi-deploy,vom Server aus>> die Installation anzustoßen.

Das Ausführen der Installation direkt auf dem Client eignet sich für einzelne Rechner.
Für einen Massen-Rollout des Agents eignet sich grundsätzlich der <<opsi-macclient-firststeps-software-deployment-client-integration-opsi-deploy,opsi-deploy-client-agent>>
besser, wenn die dazu nötigen Freischaltungen auf den Mac-Clients vorhanden sind.

Falls bereits eine andere Möglichkeit existiert Software zu verteilen, so ist es ebenfalls möglich darüber den opsi-client-agent zu verteilen und das im Paket mitgelieferte Script `silent_setup.cmd` auszuführen.

Sobald der Agent installiert ist, können vorhandene opsi-Produkte auf diesen Clients <<opsi-macclient-firststeps-software-deployment-product-tests,installiert>> werden.




[[opsi-macclient-firststeps-software-deployment-client-integration-service-setup]]
==== Verwendung von service_setup.sh auf macOS


[[opsi-macclient-firststeps-software-deployment-client-integration-service-setup1]]
===== Verwendung von service_setup.sh auf macOS (Erstinstallation)

Aufgrund der Sicherheitsrestriktionen von macOS ist die Möglichkeit Scripte von gemounteten shares auszuführen eingeschränkt. Der Versuch den im folgenden beschriebenen Vorgang mit über den `Finder` nach `/Volumes` (oder so) gemounteten share zu machen wird daher (je nach macOS Version) scheitern.

* Loggen Sie sich auf dem Client ein.
* Starten Sie das Terminal-Programm
* Für die folgenden Befehle müsen Sie die folgenden Platzhalter ersetzen:
**  `<username>` mit Ihrem login Namen
** `<mnt>` durch ein Verzeichnisnamen der noch nicht existiert z.B. 'mnt'
** `<serviceuser>` durch einen Usernamen der auf dem opsi-server bekannt ist.
** `<servicepass>` durch das Passwort des <serviceuser>. Sie können `:<servicepass>` zusammen mit der mount-Option `-N` auch weglassen, dann werden Sie nach dem Passwort gefragt
** `<opsi-server>` durch den Namen oder die IP-Nummer des opsi-servers

[source,prompt]
----
sudo su
cd /Users/<username>
mkdir <mnt>
mount_smbfs //<serviceuser>@<opsi-server>/opsi_depot /Users/<username>/<mnt>
cd /Users/<username>/<mnt>/opsi-mac-client-agent
./service_setup.sh
cd
umount /Users/<username>/<mnt>
----

bzw. ohne Passwortabfrage

[source,prompt]
----
sudo su
cd /Users/<username>
mkdir <mnt>
mount_smbfs -N //<serviceuser>:<servicepass>@<opsi-server>/opsi_depot /Users/<username>/<mnt>
cd /Users/<username>/<mnt>/opsi-mac-client-agent
./service_setup.sh
cd
umount /Users/<username>/<mnt>
----

Beispiel:

[source,prompt]
----
sudo su
cd /Users/uib
mkdir mnt
mount_smbfs  //adminuser@sepia/opsi_depot /Users/uib/mnt
cd /Users/uib/mnt/opsi-mac-client-agent
./service_setup.sh
cd
umount /Users/uib/mnt
----


. Starten Sie von dem gemounteten share das Script `opsi-mac-client-agent\service_setup.sh` +
Bestätigen Sie mit 2 x Enter
. Das Skript kopiert die notwendigen Dateien in ein temporäres lokales Verzeichnis und startet dann zur eigentlichen Installation opsi-script. 
. Das Skript nimmt per opsi-Webservice Kontakt zum Server auf um serverseitig den Client zu erzeugen und den pckey zu erfahren. Dies erfolgt zunächst mit der in der config.ini eingetragenen user/password Kombination. Schlägt dies fehl, so erscheint ein Login-Fenster mit Service-URL ({opsi-configserver}), Benutzername und Passwort. Hier wird ein Benutzer benötigt, der Mitglied der Gruppe 'opsiadmin' ist. Möglich ist auch ein Benutzer, welcher nur die Methode `host_createOpsiClient` ausführen darf.

CAUTION: Der Client rebootet nach der Installation.

[[opsi-macclient-firststeps-software-deployment-client-integration-service-setup2]]
===== Verwendung von service_setup.sh auf macOS (Reperaturinstallation)

* Loggen Sie sich auf dem Client ein.
* Starten Sie das Terminal-Programm
* Für die folgenden Befehle müsen Sie die folgenden Platzhalter ersetzen:
** `<serviceuser>` durch einen Usernamen der auf dem opsi-server bekannt ist.
** `<servicepass>` durch das Passwort des <serviceuser>. Sie können `:<servicepass>` auch weglassen, dann werden Sie nach dem Passwort gefragt
** `<opsi-server>` durch den Namen oder die IP-Nummer des opsi-servers
* Bei der Erstinstallation hat opsi einen Versteckten Pseudo user Namens opsisetupadmin angelegt, in dessen 'HeimatVerzeichnis' `/var/opsisetupadmin` sich auch das mount directory befindet.

[source,prompt]
----
sudo su
mount_smbfs -N //<serviceuser>:<servicepass>@<opsi-server>/opsi_depot /var/opsisetupadmin/opsi_depot
cd /var/opsisetupadmin/opsi_depot/opsi-mac-client-agent
./service_setup.sh
cd
umount /var/opsisetupadmin/opsi_depot
----

Beispiel:

[source,prompt]
----
sudo su
mount_smbfs -N //adminuser:linux123@sepia/opsi_depot /var/opsisetupadmin/opsi_depot
cd /var/opsisetupadmin/opsi_depot/opsi-mac-client-agent
./service_setup.sh
cd
umount /var/opsisetupadmin/opsi_depot
----


. Starten Sie das Script `opsi-mac-client-agent\service_setup.sh` +
Bestätigen Sie mit 2 x Enter
. Das Skript kopiert die notwendigen Dateien in ein temporäres lokales Verzeichnis und startet dann zur eigentlichen Installation opsi-script. 
. Das Skript nimmt per opsi-Webservice Kontakt zum Server auf um serverseitig den Client zu erzeugen und den pckey zu erfahren. Dies erfolgt zunächst mit der in der config.ini eingetragenen user/password Kombination. Schlägt dies fehl, so erscheint ein Login-Fenster mit Service-URL ({opsi-configserver}), Benutzername und Passwort. Hier wird ein Benutzer benötigt, der Mitglied der Gruppe 'opsiadmin' ist. Möglich ist auch ein Benutzer, welcher nur die Methode `host_createOpsiClient` ausführen darf.

CAUTION: Der Client benötigt nach der Installation ein Reboot um aktiv zu werden. +
Der Reboot wird *nicht* automatisch ausgelöst.


[[opsi-macclient-firststeps-software-deployment-client-integration-opsi-deploy]]
==== Verwendung von opsi-deploy-client-agent

Dieses Kapitel und ebenso die Funktionalität des Befehls `opsi-deploy-client-agent` sind derzeit (Januar 2021) für macos noch nicht fertiggestellt.

This chapter has to written for macos ##############

////

Das `opsi-deploy-client-agent` Skript verteilt den {opsi-client-agent} direkt vom {opsi-server} auf die Clients.
Es ist hiermit einfach möglich eine große Menge an Clients vom Server aus in eine opsi-Umgebung zu integrieren.
Voraussetzung hierfür sind bei den Clients:

* ein offener c$ share
* ein offener admin$ share
* ein administrativer account
* keine oder eine nicht interferierende Antivirus-Lösung bei Benutzung der `winexe`

Auf dem Server muss das Programm `winexe` vorhanden sein.
Diese ist Teil des Pakets `opsi-windows-support`.

Das `opsi-deploy-client-agent` Skript findet sich unter `/var/lib/opsi/depot/opsi-client-agent` +
Führen Sie das Script mit 'root' Rechten aus.
Falls das Script nicht ausführbar ist, so können Sie dieses Problem mit dem folgenden Befehl beheben: +
`opsi-set-rights /var/lib/opsi/depot/opsi-client-agent/opsi-deploy-client-agent`

Das Skript erzeugt serverseitig den Client, kopiert die Installations-Dateien und Konfigurationsinformationen, wie bspw. den pckey, auf den Client und startet dort die Installation.

Das Kopieren der Installationsdateien kann auf zwei Wegen geschehen.
Die erste Variante wird mittels 'mount' C$ auf dem Server verfügbar machen und dort die Daten zur Installation hin kopieren.
Die zweite Variante wird den c$-Share des Clients mittels 'smbclient'
auf dem Server einhängen und dann die Installationsdateien dorthin
kopieren.

Mit dem `opsi-deploy-client-agent` Skript kann auch eine ganze Liste von Clients bearbeitet werden.
Dazu können entweder beliebig viele Clients als letzter Parameter übergeben werden oder mit der Option '-f' die Clients aus einer Datei eingelesen werden.
Bei der Verwendung einer Datei, muss in jeder Zeile ein Client stehen.

Das Script kann mit IP-Adressen, Hostnamen und FQDNs arbeiten. Es wird versuchen automatisch zu erkennen welche Art von Adresse übergeben wurde.

Mögliche Parameter können Sie mit dem Parameter `--help` in Erfahrung bringen:
[source,prompt]
----
bonifax:/home/uib/oertel# cd /var/lib/opsi/depot/opsi-client-agent
bonifax:/var/lib/opsi/depot/opsi-client-agent# ./opsi-deploy-client-agent --help
usage: opsi-deploy-client-agent [-h] [--version] [--verbose]
                                [--debug-file DEBUGFILE] [--username USERNAME]
                                [--password PASSWORD]
                                [--use-fqdn | --use-hostname | --use-ip-address]
                                [--ignore-failed-ping]
                                [--reboot | --shutdown | --start-opsiclientd]
                                [--hosts-from-file HOSTFILE]
                                [--skip-existing-clients]
                                [--threads MAXTHREADS] [--smbclient | --mount]
                                [--keep-client-on-failure | --remove-client-on-failure]
                                [host [host ...]]

Deploy opsi client agent to the specified clients. The c$ and admin$ must be
accessible on every client. Simple File Sharing (Folder Options) should be
disabled on the Windows machine.

positional arguments:
  host                  The hosts to deploy the opsi-client-agent to.

optional arguments:
  -h, --help            show this help message and exit
  --version, -V         show program's version number and exit
  --verbose, -v         increase verbosity (can be used multiple times)
  --debug-file DEBUGFILE
                        Write debug output to given file.
  --username USERNAME, -u USERNAME
                        username for authentication (default: Administrator).
                        Example for a domain account: -u
                        "<DOMAIN>\\<username>"
  --password PASSWORD, -p PASSWORD
                        password for authentication
  --use-fqdn, -c        Use FQDN to connect to client.
  --use-hostname        Use hostname to connect to client.
  --use-ip-address      Use IP address to connect to client.
  --ignore-failed-ping, -x
                        try installation even if ping fails
  --reboot, -r          reboot computer after installation
  --shutdown, -s        shutdown computer after installation
  --start-opsiclientd, -o
                        start opsiclientd service after installation
  --hosts-from-file HOSTFILE, -f HOSTFILE
                        File containing addresses of hosts (one per line).If
                        there is a space followed by text after the address
                        this will be used as client description for new
                        clients.
  --skip-existing-clients, -S
                        skip known opsi clients
  --threads MAXTHREADS, -t MAXTHREADS
                        number of concurrent deployment threads
  --smbclient           Mount the client's C$-share via smbclient.
  --mount               Mount the client's C$-share via normal mount on the
                        server for copying the files. This imitates the
                        behaviour of the 'old' script.
  --keep-client-on-failure
                        If the client was created in opsi through this script
                        it will not be removed in case of failure. (DEFAULT)
  --remove-client-on-failure
                        If the client was created in opsi through this script
                        it will be removed in case of failure.
----
////

[[opsi-macclient-firststeps-software-deployment-product-tests]]
== Rollout existierender Produkte

Für den Rollout von Software auf Clients muss auf diesen der 'opsi-client-agent' installiert sein.
Dieser kann auf <<opsi-macclient-firststeps-software-deployment-client-integration,bestehende Rechner>> ausgerollt werden.


Nachfolgend wird die Management-Oberfläche <<opsi-macclient-firststeps-software-deployment-product-tests-configed,{opsi-configed}>> verwendet, um Software auf Clients zu verteilen.


[[opsi-macclient-firststeps-software-deployment-product-tests-configed]]
=== Verteilung von opsi Standard Produkten: opsi-configed

Zu den Standard-Produkten gehört das Produkt `opsi-configed` welches das opsi Management Interface als Anwendung auf einem Rechner installiert.
Da diese Anwendung eine Java-Anwendung ist, wird ein JavaRE mitgeliefert.

Wählen Sie im '{opsi-configed}', Modus 'Client-Konfiguration', unter dem Reiter 'Clients' den betreffenden Client aus.

Wenn noch nicht geschehen, aktualisieren Sie den Datenbestand des {opsi-configed}s mittels 'Datei/Daten neu laden' bzw. Anklicken des entsprechenden Icons.

Wechseln Sie zum Reiter 'Produktkonfiguration', klicken Sie in die Spalte 'Angefordert' für das Produkt +opsi-configed+, daraufhin öffnet sich eine Liste/Dropdown-Menü und dort wählen Sie die Aktion 'setup'.

Der Haken in der Icon-Menüleiste sollte seine Farbe auf Rot wechseln. Wenn Sie ihn anklicken, werden die neuen Einstellungen zum {opsi-Server} übermittelt, im Anschluss ist seine Farbe wieder grün.

Starten Sie dann den Client (neu).
Er sollte jetzt den +opsi-client-agent+ starten und das Produkt +opsi-configed+ installieren.
Nach Abschluß der Installation sollten Sie unter `Applications` den Punkt `opsi-configed` finden.


[[opsi-macclient-firststeps-software-deployment-product-tests-inventory]]
=== Inventarisierung mit dem localboot-Produkten hwaudit und swaudit

Wählen Sie im '{opsi-configed}', Modus 'Client-Konfiguration', unter dem Reiter 'Clients' den betreffenden Client aus.

Wenn noch nicht geschehen, aktualisieren Sie den Datenbestand des {opsi-configed}s mittels 'Datei/Daten neu laden' bzw. Anklicken des entsprechenden Icons.

Wechseln Sie zum Reiter 'Produktkonfiguration', klicken Sie in die Spalte 'Angefordert' für das Produkt +hwaudit+, daraufhin öffnet sich eine Liste/Dropdown-Menü und dort wählen Sie die Aktion 'setup'. Wiederholen Sie das für das Produkt +swaudit+.

Der Haken in der Icon-Menüleiste sollte seine Farbe auf Rot wechseln. Wenn Sie ihn anklicken, werden die neuen Einstellungen zum {opsi-Server} übermittelt, im Anschluss ist seine Farbe wieder grün.

Starten Sie dann den Client (neu).
Er sollte jetzt den +opsi-client-agent+ starten und die Produkte +hwaudit+ und +swaudit+ installieren.
Bei +hwaudit+ und +swaudit+ werden Hard- bzw. Softwareinformationen erhoben und zum {opsi-Server} übermittelt.
Die gesammelten Informationen werden unter den Tabs 'Hardwareinformationen' bzw. 'Software-Inventur' angezeigt.



[[opsi-macclient-softwintegration]]
== Einbindung eigener Software in die Softwareverteilung von opsi

Die Installation von Software erfolgt bei opsi durch den {opsi-client-agent} und insbesondere durch das Script gesteuerte Setup Programm {opsi-winst}. Daher muss zu jedem opsi-Produkt ein opsi-winst-Script erstellt werden. Danach werden dieses Script, die Installationsdateien und die Metadaten zu einem opsi-Produkt gepackt, welches sich schließlich auf dem {opsi-Server} installieren lässt.

[[opsi-macclient-softwintegration-tutorial]]
=== Ein kleines Tutorial zur Erstellung eines {opsi-winst} Scriptes

[[opsi-macclient-softwintegration-tutorial-introduction]]
==== Einführung

Dieses Tutorial kann keine Schulung oder das Studium der Handbücher ersetzen. Es dient nur dazu eine Einführung zu bekommen. Daher als erstes der Verweis auf weiterführende Quellen:

.Schulungen:

Die uib GmbH bietet opsi-Schulungen in Mainz und Inhouse Schulungen an: +
https://uib.de/de/support-schulung/schulung/

.Handbücher:

https://uib.de/de/opsi-dokumentation/dokumentationen/ +
Besonders wichtig: +
opsi-winst-Reference-Card und opsi-script-Handbuch

.Wiki (Scripte, Tipps, Links):

https://forum.opsi.org/wiki

.Support Forum:
siehe https://forum.opsi.org

[[opsi-macclient-softwintegration-tutorial-general]]
==== Methoden der nicht interaktiven Softwareinstallation bei macos

Prinzipiell gibt es drei Verfahren der Einbindung eines Softwarepakets in die automatische Softwareverteilung für Windows-Betriebssysteme, zuzüglich einer Variante, die sich auf die Pakete für den Microsoft Installer Service bezieht.

. *Unattended / Silent Setup*: +
Das Original-Setupprogramm wird verwendet und über Kommandozeilenargumente in einen nicht-interaktiven Modus versetzt.
Der wichtigste Spezialfall davon ist der +
*„stille“ Aufruf eines MSI-Pakets*: +
Ein Paket für den Microsoft Installer Service ist vorhanden und wird mit einer „quiet“-Option aufgerufen.

. *Interaktives Setup mit automatisierten Antworten*: +
Zur Vorbereitung wird bei einem Lauf des Original-Setupprogramms festgestellt, welche Fenstertitel das Programm zeigt
und welche Fragen und Antworten beim Setup anfallen. Dies wird in einem Skript niedergeschrieben.
Im Prozess der Softwareverteilung läuft das Setupprogramm dann unter Kontrolle eines Automatisierungs-Programms
wie z.B. AutoIt oder Autohotkey, welches das Setupprogramm gemäß dem Skript steuert.

. *Nachbilden der Setup-Routine mit dem opsi-script*: +
Bei einem Lauf des originalen Setupprogramms werden etwaige System-Änderungen mitprotokolliert, z.B. mit procmon und mit Hilfe des opsi-winst nachgefahren.

NOTE: Opsi unterstützt alle drei Varianten. In der Praxis werden sie häufig ergänzend verwendet.

[[opsi-macclient-softwintegration-tutorial-script-structure]]
==== Struktur eines opsi-script Skripts

Zunächst ein Beispiel für ein einfaches opsi-winst-Skript:
[source,winst]
----
[Actions]
WinBatch_tightvnc_silent_install

[WinBatch_tightvnc_silent_install]
"%ScriptPath%\tightvnc-1.3.9-setup.exe" /silent
----

Ein opsi-winst-Skript besteht aus *primären* und *sekundären* Sektionen.
Sektionen werden, wie von ini-Dateien bekannt, mit einem Sektions-Namen in eckigen Klammern eingeleitet. +
Die eigentlichen Arbeiten zur Software-Installation finden in den sekundären Sektionen statt,
die von den primären Sektionen aufgerufen werden.

Die sekundären Sektionen sind „Themen-spezifisch“ und verfügen jeweils über eine spezielle Syntax. +
Der Sektionsname einer sekundären Sektion beginnt mit deren Typ, gefolgt von einem frei definierbaren Namen.

Im Beispiel ruft die primären Sektion +[Actions]+  eine sekundäre Sektion +[WinBatch_7z_silent_install]+ auf. +
Die sekundäre Sektion ist vom Typ +WinBatch+. Der Inhalt einer +WinBatch+-Sektion wird über die Windows-API ausgeführt. +
In diesem Fall wird also das Setup-Programm `7z.exe` mit dem Parameter +/S+ gestartet.


[[opsi-macclient-softwintegration-tutorial-primary-sections]]
==== Primäre Sektionen

Actions/Aktionen::
Die +[Actions]+ Sektion ist das eigentliche Hauptprogramm. Hier beginnt die Skript-Verarbeitung.

Sub-Sektionen::
Programmabschnitte, die wiederholt benötigt werden, können in Sub-Sektionen (Unterprogramme) ausgelagert werden.
Es besteht die Möglichkeit Sub-Sektionen in externe Dateien auszulagern.

Die primären Sektionen sind das Hauptprogramm in dem der Ablauf des Skripts gesteuert wird. Hierzu gibt es:

* Variablen: Strings und Stringlisten
* +if+ +else+ +endif+ Anweisungen
* +for+ Schleifen über Stringlisten
* Funktionen

.Vermeidung doppelten Codes über ausgegliederte Sub
image::opsi-winst-delsub-schema.png["Abbildung: Vermeidung doppelten Codes über ausgegliederte Sub",width=400]


[[opsi-macclient-softwintegration-tutorial-secondary-sections]]
==== Wichtige sekundäre Sektionen

Files::
Datei-Operationen, wie:

* kopieren (mit Versionskontrolle, rekursiv ...)
* löschen
* Verzeichnisse anlegen
* ...

WinBatch::
Dient zum Aufrufen von Programmen über die Windows-API.
Beispielsweise werden Aufrufe von Setup-Programmen im silent mode in diesen Sektionen durchgeführt.

DosBatch/DosInAnIcon::
Der Inhalt dieser Sektionen wird der 'cmd.exe' zur Ausführung übergeben. Hier können also normale Batch-Skripte abgelegt werden. +
Eine Variante von 'DosBatch' ist 'DosInAnIcon', wobei die 'cmd.exe' mit minimiertem Fenster aufgerufen wird.

ExecWith::
Der Inhalt dieser Sektionen wird einem externen Programm (Interpreter) zur Ausführung übergeben.
Beispielsweise können über 'ExecWith' AutoIt-Skripte http://www.autoitscript.com direkt in das opsi-winst-Skript integriert werden.

Registry::
Die 'Registry-Sektionen' dienen dem Bearbeiten der Registry.

LinkFolder::
'LinkFolder-Sektionen' dienen dem Erstellen und Entfernen von Verknüpfungen.
Es können beispielsweise Verknüpfungen auf dem Desktop oder im Startmenü erstellt werden.


[[opsi-macclient-softwintegration-tutorial-global-constants]]
==== Globale Konstanten

Globale Konstanten sind Text-Platzhalter, die in primären und sekundären Sektionen eingesetzt werden können
und zur Laufzeit textuell durch ihre Werte ersetzt werden. +
Über die Verwendung von Platzhaltern kann sichergestellt werden,
dass Pfade in unterschiedlichen Umgebungen (z.B. auf System mit unterschiedlichen Sprachen oder Betriebssystem-Versionen) richtig gesetzt sind.

Beispiele:

+%ProgramFiles32Dir%+:: c:\programme
+%Systemroot%+::        c:\windows
+%System%+::            c:\windows\system32
+%Systemdrive%+::       c:\
+%Scriptpath%+::        <Pfad zu laufenden Script>

[[opsi-macclient-softwintegration-tutorial-macos-special-commands]]
===== Spezielle Kommandos für MacOS

* GetOS
* Aus der Library uib_macosinstalllib.opsiscript
** 

include::uib_macosinstalllib.asciidoc[]

[[opsi-macclient-softwintegration-tutorial-second-example]]
==== Zweites Beispiel: tightvnc

Zur Erläuterung nun ein einfaches Script zur Installation von 'tightvnc'.
Eigentlich würde dieses Script mit dem Aufruf der Silent-Installation in der Winbatch-Sektion auskommen.
Bei einer wiederholten Installation erscheint hier (wegen des Neustarts eines laufenden Services) jedoch ein interaktiver Dialog.
Dieses Dialog-Fenster wird (so es auftaucht) mit Hilfe von 'AutoIt' geschlossen.

[source,winst]
----
[Actions]
Message "Installiere tightvnc 1.3.9 ..."
ExecWith_autoit_confirm "%ScriptPath%\autoit3.exe" WINST /letThemGo
WinBatch_tightvnc_silent_install
KillTask "autoit3.exe"

[WinBatch_tightvnc_silent_install]
"%ScriptPath%\tightvnc-1.3.9-setup.exe" /silent

[ExecWith_autoit_confirm]
; Wait for the confirm dialog which only appears if tightvnc was installed before as service
; Waiting for the window to appear
WinWait("Confirm")
; Activate (move focus to) window
WinActivate("Confirm")
; Choose answer no
Send("N")
----

[[opsi-macclient-softwintegration-tutorial-elementary-commands]]
==== Elementare Befehle für primäre Sektionen

[[opsi-macclient-softwintegration-tutorial-elementary-commands-string-variable]]
===== String-Variable

Variablen-Deklaration:: 'DefVar <variable name>'

Variablen-Zuweisung:: 'Set <variable name> = <value>'

*Beispiel:*
[source,winst]
----
DefVar $ProductId$
Set $ProductId$ = "firefox"
----

IMPORTANT: Stringvariablen werden in primären und sekundären Sektionen unterschiedlich behandelt.
In primären Sektionen sind Stringvariablen eigenständige Objekte.
Nur hier können sie deklariert und ihnen Werte zugewiesen werden.
Entsprechend ist die Verbindung von Variablen und Strings zu einem Stringausdruck mit einem Operator `"+"` durchzuführen. +
Beispiel: `"Installing "+ $ProductId$ +" ..."` +
In sekundären Sektionen werden Stringvariablen vor der Ausführung der Sektion durch den Inhalt der Variable ersetzt. +
Beispiel: `"Installing $ProductId$ ..."` +
Dies ist zu beachten, wenn entsprechende Stringausdrücke per Cut&Paste im Skript kopiert werden. +
Der Vorteil dieser Konstruktion ist, dass in Sektionen die außerhalb des '{opsi-winst}' ausgeführt werden (DosBatch / Execwith)
problemlos mit opsi-winst-Variablen gearbeitet werden kann.

[[opsi-macclient-softwintegration-tutorial-elementary-commands-message]]
===== Message / ShowBitmap

Zur Textausgabe während der Installation: +
`Message <string>`

*Beispiel:*
[source,winst]
----
Message "Installing "+ $ProductId$ +" ..."
----

Zur Ausgabe einer Grafik während der Installation: +
`ShowBitmap <filename> <subtitle>`

*Beispiel:*
[source,winst]
----
ShowBitmap "%ScriptPath%\python.png" "Python"
----

[[opsi-macclient-softwintegration-tutorial-elementary-commands-if-else-endif]]
===== if [else] endif

*Syntax:*
[source,winst]
----
if <condition>
	;statement(s)
[
else
	;statement(s)
]
endif
----

[[opsi-macclient-softwintegration-tutorial-elementary-commands-functions]]
===== Funktionen

HasMinimumSpace:: Prüft auf freien Platz auf der Festplatte.
FileExists:: Prüft auf Existenz einer Datei oder eines Verzeichnisses.

[[opsi-macclient-softwintegration-tutorial-elementary-commands-error]]
===== Fehler, Logging und Kommentare

Kommentarzeichen ';':: Zeilen, die mit einem Semikolon (';') beginnen, werden nicht interpretiert.

Comment:: Schreibt eine Kommentar-Meldung in die Log-Datei.

LogError:: Schreibt eine Fehlermeldung in die Log-Datei.

IsFatalError:: Bricht die Ausführung des laufenden Skriptes ab und meldet die Installation als gescheitert zurück.

[[opsi-macclient-softwintegration-tutorial-elementary-commands-requirements]]
===== Bedingung zur Ausführung

requiredWinstVersion:: gibt die (mindestens) benötigte opsi-winst Version an.

[[opsi-macclient-softwintegration-tutorial-library]]
==== Befehle aus der opsi-script library: uib_macosinstalllib

include::uib_macosinstalllib.asciidoc[]

[[opsi-macclient-softwintegration-tutorial-template]]
==== Drittes Beispiel: Standard-Template 'opsi-template'

Verwenden Sie dieses Template (bzw. eine aktualisierte Versionen von http://download.uib.de) als Basis für Ihre eigenen Skripte.
Das Template-Paket können Sie auf Ihrem Server mittels `opsi-package-manager` installieren (+-i+)
oder entpacken (+-x+), um an die enthaltenen Skripte zu gelangen.


.setup.opsiscript: Installationsscript
[source,winst]
----
----

.delsub.opsiscript: Ausgelagerte Deinstallations-Sub-Sektion
[source,winst]
----
----

.uninstall.opsiscript: Deinstallations-Skript
[source,winst]
----
----

[[opsi-macclient-softwintegration-create-opsi-package]]
=== Erstellen eines opsi-Produkt-Pakets

[[opsi-macclient-softwintegration-create-opsi-package-setup-detector]]
==== Installation von opsi-setup-detector und opsi-package-builder

This chapter has to written for macos ##############

[[opsi-macclient-softwintegration-tutorial-create-with-opsi-setup-detector]]
==== Das Programm opsi-setup-detector zum Erstellen eines Scriptes


This chapter has to written for macos ##############


[[opsi-macclient-softwintegration-tutorial-modify-with-opsi-packagebuilder]]
==== Das Programm opsi-packagebuilder zum modifizieren eines Scriptes


This chapter has to written for macos ##############


[[opsi-macclient-softwintegration-tutorial-create-and-test-script]]
==== Interaktives Erstellen und Testen eines {opsi-winst} Skriptes

Sie können ein Skript interaktiv anpassen und testen.

Erstellen Sie sich dazu ein Verzeichnis (z.B. `c:\test`) und kopieren Sie die Scripte des opsi-template (`setup.ins`, `delsub.ins` und `uninstall.ins`) in dieses Verzeichnis.

Starten Sie {opsi-winst} (`winst32.exe`) per Doppelklick. (Beim Starten des {opsi-winst} auf einem Windows 7 Client muss "ausführen als Administrator" über die rechte Maustaste verwendet werden.) Wenn der `opsi-client-agent` bereits auf Ihrem Rechner installiert ist, finden Sie {opsi-winst}
unter `C:\Programme\opsi.org\opsi-client-agent\opsi-winst`.
Wenn nicht, kopieren Sie sich das Verzeichnis `opsi-winst` vom share `\\<opsiserver\opsi_depot_rw`, aus dem Verzeichnis `install\opsi-winst\files.`
Sie sehen dann folgendes Fenster:

.opsi-winst im interaktiven Modus
image::winst-interaktiv.png["Screenshot: {opsi-winst} im interaktiven Modus",400]

Über 'Select Script' können Sie das Skript auswählen, dass Sie ausführen möchten.
Mit 'Start' können Sie das Script starten. Dabei wird das Script auf diesem Rechner ausgeführt.
Über 'View Log' können Sie sich die Log-Datei des Skript-Laufes anschauen.

.opsi-winst Log View Fenster
image::winst-log-view.png[Screenshot: opsi-winst Log View Fenster]

* Schauen Sie sich anhand der Log-Datei an, wie der {opsi-winst} das Skript interpretiert.

* Kopieren Sie die `Setup.exe`, welche Sie installieren wollen, in das Verzeichnis, in dem die Skripte liegen (z.B. `c:\test`).

* Öffenen Sie das Script `setup.ins` in einem Editor.
Im Prinzip können Sie jeden beliebigen Editor verwenden.
Wir empfehlen den Editor 'jEdit' mit {opsi-winst} Syntax-Highlighting, wie Sie ihn in der Grundausstattung der opsi-Produkte finden.

.jEdit mit einem opsi script
image::jedit-with-winst-script.png["jEdit with a opsi script",400]


* Sie können nun das Skript im Editor anpassen und speichern (Sie können den Editor geöffnet lassen).
Wechseln Sie zum opsi-winst-Fenster und starten Sie das Skript erneut über den Knopf 'Start' (das Skript muss nicht neu ausgewählt werden).
Schauen Sie sich das auf Basis Ihrer Änderungen im Skript veränderte Log über `View Log` an.

* Auf diese Art und Weise, also über die Wiederholung der Punkte: +
 - Anpassung des Skriptes und speichern +
 - Skript ausführen +
 - Log überprüfen +
können Sie nach und nach Ihre Skripte so anpassen, dass sie das tun, was Sie wünschen.

Hinweise zur Lösung von Detail-Problemen finden Sie im nächsten Kapitel.
Im übernächsten Kapitel wird erklärt, wie Sie aus den so erstellten Skripten ein opsi-Produkt erstellen, das Sie auf dem {opsi-server} installieren können.

[[opsi-macclient-softwintegration-tutorial-winst-commands]]
===== Weitere wichtige {opsi-winst} Funktionen

Einen Überblick über die {opsi-winst} Funktionen gibt die Referencecard: +
http://download.uib.de/opsi4.0/doc/opsi-winst-reference-card-en.pdf

Eine detaillierte Dokumentation ist im {opsi-winst} Handbuch zu finden: +
http://download.uib.de/opsi4.0/doc/opsi-winst-manual-de.pdf

Hier noch einige Hinweise auf besonders wichtige Elemente:

.Stringlisten:
Stringlisten sind sehr mächtig, insbesondere zur Auswertung von Ausgaben externer Programme. Lesen Sie dazu die opsi-winst-Dokus.

.ExitWindows:
Neustart/Herunterfahren des Systems und Beendung des {opsi-winst}.

*  `ExitWindows /Reboot` +
Rechner-Neustart nach Abschluss des laufenden Skriptes.

*  `ExitWindows /ImmediateReboot` +
Sofortiger Neustart.

*  `ExitWindows /ImmediateLogout` +
Sofortige Beendigung der Skript-Bearbeitung und Beendung des {opsi-winst}.

.{product-properties}:
Für manche Produkte ist es erforderlich, Optionen zur Verfügung zu stellen.
Diese werden zur Laufzeit Client-spezifisch ausgewertet.
Wie solche Properties erstellt werden, ist im Kapitel
<<opsi-getting-started-softwintegration-create-opsi-package,Erstellen eines opsi-Produkt-Pakets>> beschrieben.

Der Zugriff auf die Werte der Properties geschieht über die Funktion +GetProductProperty+:

[source,winst]
----
if GetProductProperty("example-property", "no") = "yes"
	Files_copy_extra_files
endif
----




////

In opsi werden die Installationsdateien, das opsi-winst-Skript zur Installation auf den Client und die Metadaten zu einem Paket zusammengefasst, welches zur Installation dieses Softwareproduktes auf einem {opsi-server} dient.

Die wesentlichen Vorteile dieses Paketformates sind:

* Einfache menügeführte Erstellung mit dem Programm `opsi-newprod`.

* Ablage aller relevanten Metadaten in einer einfach zu editierenden Datei.

* Optional menügeführtes Auspacken des Paketes mit der Möglichkeit Vorgaben zu ändern.

* Informationen über die im Paket enthaltene Produktversion, Paketversion und eventueller kundenspezifischer Erweiterungen werden abgespeichert und sind am Paketnamen erkennbar. Diese werden im Installationsverzeichnis abgelegt und im opsi-Configeditor angezeigt. Auf diese Weise wird der Überblick über unterschiedliche Versionen erleichtert (Productlifecycle Management).

* Zur Erstellung und zum Auspacken von Produkten sind keine root-Rechte erforderlich. Es langen hierzu die Rechte der Gruppe `pcpatch`.

Das Paket selber besteht aus einem per Gzip komprimierten cpio Archiv. In diesem Archiv befinden sich zwei Verzeichnisse:

*CLIENT_DATA* +
Hier liegen die Dateien, die im opsi-Depot (`/var/lib/opsi/depot/<productid>`) für die Clients verfügbar sein sollen.

*OPSI* +
In der Datei `control` finden sich die Metadaten des Produkts wie der Name, die Version oder auch Produkt-Abhängigkeiten.
Weiterhin finden sich im Verzeichnis `OPSI` die Skripte `preinst` und `postinst`, die vor bzw. nach der Installation
des Produkt-Pakets auf einem {opsi-depotserver} ausgeführt werden.
Hier können Sie, wenn benötigt, entsprechende Erweiterungen unterbringen.

[[opsi-macclient-softwintegration-create-opsi-package-handling]]
==== Erstellen, Packen und Auspacken eines neuen Produktes

Zum Erstellen eines Produktes müssen Sie sich auf dem Server einloggen
(von Windows aus z.B. per `putty.exe` http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html).

Die wesentlichen Befehle zum Erstellen und Installieren eines opsi-Produktes sind:

* `opsi-newprod`
* `opsi-makepackage`
* `opsi-package-manager -i <opsi-product-file>`

Zum Erstellen eines neuen Produktes benötigt man mindestens die Rechte der Gruppe +pcpatch+.

Opsi unterstützt die parallele Kompression mittels `pigz`, sofern dieses mindestens in Version 2.2.3 vorliegt. Ist diese oder eine höhere Version installiert, so wird opsi diese automatisch zur (De-)Kompression von Produkten verwenden.
Bitte beachten Sie dabei, dass sowohl `gzip` als auch `pigz` Archive erstellen, welche von der bandbreitenschonenden Synchronisierung mittels `rsync` profitieren können, allerdings sind die Dateien nicht bit-kompatibel. Das bedeutet, dass falls bereits Produkte mittels `gzip` komprimiert und an ein anderes Depot übertragen wurden, nun aber ein mittels `pigz` komprimiertes Paket übertragen wird, mehr als nur die eigentlichen Deltas übertragen werden. Das ist nur bei der ersten Umstellung des verwendeten Komprimierungsprogramms der Fall, bei alle nachfolgenden Übertragungen werden wiederum nur die Unterschiede übertragen.
Um die Verwendung von `pigz` auf einem Server explizit zu deaktivieren, setzen Sie bitte den Wert `use_pigz` in der Sektion `packages` in der Datei `/etc/opsi/opsi.conf` wie nachfolgend gezeigt auf `False`:

[source,configfile]
----
[packages]
use_pigz = False
----

Sie sollten die Produkte in dem Verzeichnis `/var/lib/opsi/workbench` erstellen,
welches der Gruppe +pcpatch+ gehört und die Rechte 2770 hat (Setgroupid Bit für Gruppe +pcpatch+ gesetzt),
sowie als Share `opsi_workbench` freigegeben ist.


[[opsi-macclient-softwintegration-create-opsi-package-newprod]]
===== Erstellen mit opsi-newprod

Zum Erstellen wechselt man in dieses Verzeichnis und ruft `opsi-newprod` auf.
Das Programm fragt daraufhin nach dem Typ des zu erstellenden Paketes.
Dies ist üblicherweise der Typ +localboot+ für Produkte, die über den '{opsi-client-agent}'/'{opsi-winst}' installiert werden.
Der Typ +netboot+ steht für Produkte, die über das opsi-Linux-Bootimage ausgeführt werden (wie z.B. die Betriebssystem-Installationen).

.Auswahl des Produkttyps: localboot
image::newprod-localboot.png[Screenshot: Auswahl des Produkttyps: localboot]

Wählen Sie nun mit Tab OK (oder bestätigen mit F12). Nun müssen Sie die wesentlichen Produktdaten eingeben. Am oberen Rand ist hierzu eine Hilfe, die erläutert was die Felder bedeuten.

.Eingabe der Produktinformationen
image::newprod-product-info.png[Screenshot: Eingabe der Produktinformationen]

Product Id:: ist ein eindeutiger Bezeichner für das Produkt in der Regel unabhängig von der Version +
Bitte nur Kleinbuchstaben verwenden, keine Umlaute, keine Leerzeichen, keine Sonderzeichen - '-' ist als Trenner erlaubt.

Product name:: ist der Klartextname des Produkts (wir empfehlen die Vermeidung von Umlauten, '-' ist erlaubt, keine Leerzeichen).

Description:: ist eine ergänzende Beschreibung zum Produkt, die z.B. im opsi-Configeditor unter `Beschreibung` angezeigt wird.

Advice:: ist eine ergänzende Beschreibung, in der Regel zum Umgang mit dem Produkt, die zu beachten ist und im opsi-Configeditor unter `Notiz` angezeigt wird.

Product version:: ist die Version der eingepackten Software (max. 32 Zeichen).

Package Version:: ist die Version des Paketes für die Produktversion. Sie dient dazu, Pakete mit gleicher Produktversion, aber z.B. korrigiertem opsi-winst-Skript zu unterscheiden.

License required:: hat bei localboot Produkten keinen Einfluss. Bei netboot Produkten entscheidet diese Option, ob ein Lizenzkey aus dem Lizenzmanagement geholt wird.

Priority:: beeinflusst die Installationsreihenfolge. Mögliche Werte liegen zwischen 100 (ganz am Anfang) und -100 (ganz am Ende). Existieren auch Produktabhängigkeiten, so beeinflussen diese zusätzlich die Installationsreihenfolge.

.Eingabe der opsi-winst-Skript Namen für unterschiedliche Aktionen
image::newprod-script-names.png[Screenshot: Eingabe der opsi-winst-Skript Namen für unterschiedliche Aktionen]

Nach Eingabe der Produktinformationen werden Sie aufgefordert, die Skripte anzugeben, die Sie für die unterschiedlichen möglichen Aktionen bereit stellen werden.

Üblicherweise heißt das *+Setup script+* gleich `setup.ins`.

Üblicherweise heißt das *+Uninstall script+* gleich `uninstall.ins`.

Ein *+Update-Script+* dient zur geringfügigen Veränderung einer existierenden großen Installation. Wird das Produkt auf setup gestellt, so wird nach dem Abarbeiten des Setup-Skriptes automatisch auch das Update-Skript ausgeführt.

Ein *+Always-Script+* wird bei jedem aktiv werden des opsi-Clientagenten ausgeführt (z.B. bei jedem Boot).

Ein *+Once-Script+* hat den Folgestatus `not_installed`. Es handelt sich hierbei um einen sehr selten verwendeten Schalter, den Sie ignorieren sollten, wenn Sie nicht genau wissen, was Sie damit tun wollen.

Ein *+Custom-Script+* verändert weder Folgeaktion noch Folgestatus. Es handelt sich hierbei um einen sehr selten verwendeten Schalter, den Sie ignorieren sollten, wenn Sie nicht genau wissen, was Sie damit tun wollen.

Ein *+userLoginScript+* dient dazu nach dem Login des users Modifikationen am Profil des eingeloggten users vorzunehmen. Dies Funktioniert nur im Zusammenhang mit der opsi Erweiterung 'User Profile Management' und ist im entsprechenden Kapitel des opsi-Handbuchs beschrieben.


|=======================
| Typ | Folgestatus | Folgeaktion
| setup | installed | none
| uninstall | not_installed | none
| update | installed | none
| always | installed | always
| once | not_installed | none
| custom | _unverändert_ | _unverändert_
| User login | _unverändert_ | _unverändert_
|=======================

Nachdem nun das Produkt selber beschrieben ist, können Sie eine oder mehrere Produktabhängigkeiten definieren. Wollen Sie keine Produktabhängigkeit definieren so geben Sie +No+ ein.

.Eine (weitere) Produktabhängigkeit definieren: Ja / Nein
image::newprod-product-new-dependency.png["Screenshot: Eine (weitere) Produktabhängigkeit definieren: Ja / Nein",width=400]

Zur Erstellung einer Produktabhängigkeit geben Sie die folgenden Daten an. Beachten Sie auch die Hilfe im oberen Teil des Fensters:

.Eingabe der Daten zur Erstellung einer Produktabhängigkeit
image::newprod-product-dependency.png["Screenshot: Eingabe der Daten zur Erstellung einer Produktabhängigkeit",width=400]

Dependency for Action:: Für welche Aktion des Produktes, welches Sie gerade erstellen, soll die Abhängigkeit gelten (nur setup implementiert).

Required product id:: Productid (Bezeichner) des Produkts zu dem eine Abhängigkeit besteht.

Required  action:: Sie können entweder die Aktion +setup+ anfordern oder (siehe unten) den Status (+installed+). 

Required installation status:: Status den das Produkt, zu dem eine Abhängigkeit besteht, haben soll (+installed+). Liegt ein anderer Status vor, so wird das Produkt auf +setup+ gestellt.

Requirement type:: Installationsreihenfolge. Wenn das Produkt, zu dem eine Abhängigkeit besteht, installiert sein muss bevor mit der Installation des aktuellen Produkts begonnen werden kann, dann ist dies +before+. Muss es nach dem aktuellen Produkt installiert werden so ist dies +after+. Ist die Reihenfolge egal so muss hier nichts eingetragen werden.

*Hinweis:*

Leider gibt es derzeit keinen generischen Mechanismus für Deinstallations-Produktabhängigkeiten. Zuverlässig ist der ProductDependency-Mechanismus nur für action: setup und die hierbei zu triggernden (before- oder after-) setup Aktionen und installed Status. Ein requiredAction: uninstall führt leider definitiv zu Fehlern.

Nachdem eine Produktabhängigkeit definiert ist, werden Sie wieder gefragt, ob Sie eine (weitere) Produktabhängigkeit definieren wollen. Wenn ja, wiederholt sich der Vorgang; wenn nein, so werden Sie gefragt, ob Sie eine Produkteigenschaft (Zusatzschalter) definieren wollen mit dem Sie die Installation des Produktes modifizieren können.

*Noch ein Hinweis:*

Die tatsächliche Installationsreihenfolge ermittelt sich aus einer Kombination von Produktabhängigkeiten und Produktpriorisierung. Details hierzu finden Sie im opsi-Handbuch im Kapitel 'Beeinflussung der Installationsreihenfolge durch Prioritäten und Produktabhängigkeiten'

.Eine (weitere) Produkteigenschaft definieren
image::newprod-new-property.png["Screenshot: Eine (weitere) Produkteigenschaft definieren",width=400]

Antworten Sie ja, so müssen Sie die Produkteigenschaft beschreiben:

Die Produkteigenschaft wird clientspezifisch gespeichert und besteht aus einem Namen (key) der verschiedene Werte (Values) zugeordnet bekommen kann und die dann vom opsi-winst-Skript abgefragt werden können.

Zunächst müssen Sie angeben, ob es sich um ein Textwert (unicode) oder um einen logische Wert also wahr/falsch (boolean) handelt. Wenn Sie unsicher sind, wählen Sie +unicode+.

.Datentyp der Produkteigenschaft wählen
image::newprod-property-type.png["Screenshot: Datentyp der Produkteigenschaft wählen",width=400]

Weiterhin wird eine Beschreibung benötigt, die im {opsi-configed} als Hilfe angezeigt wird. Weiterhin müssen Sie, durch Kommas getrennt, alle Werte angeben, die der Key annehmen darf. Wird hier nichts angegeben, so kann später im opsi-Configeditor ein beliebiger Wert eingegeben werden. Über `Editable` (true/false) können Sie entscheiden, ob neben der vorgegebenen Liste auch andere Werte eingegeben werden dürfen.

NOTE: Enthält ein Wert einen Backslash `\`, so muss dieser doppelt angegeben werden. +
Eine Pfadangabe kann beispielsweise wie folgt aussehen: `C:\\temp`

.Beschreibung der Produkteigenschaft
image::newprod-property-desc.png["Screenshot: Beschreibung der Produkteigenschaft",width=400]

Im Folgefenster müssen Sie festlegen, was der Defaultwert dieser Produkteigenschaft ist.

.Festlegung des Defaultwerts der Produkteigenschaft
image::newprod-property-default.png["Screenshot: Festlegung des Defaultwerts der Produkteigenschaft",width=400]

Wenn Sie als Typ 'boolean' wählen, so reduziert sich die Beschreibung auf 'Property name' und 'Property description'.

.Beschreibung eines boolschen Properties
image::newprod-property-boolean.png["Screenshot: Beschreibung eines boolschen Properties",width=400]

Nachdem eine Produkteigenschaft definiert ist, werden Sie wieder gefragt, ob Sie eine (weitere) Produkteigenschaft definieren wollen. Wenn ja, wiederholt sich der Vorgang; wenn nein, so werden Sie als nächstes nach Name und Mail-Adresse gefragt. Diese werden im Changelog des Paketes verwendet und müssen angegeben werden.

.Eingabe der Maintainer Daten
image::newprod-maintainer.png["Screenshot: Eingabe der Maintainer Daten",width=400]

Danach ist das Grundgerüst des Produktes fertig gestellt.

Mit Hilfe des `ls` Befehls finden Sie die oben beschriebene Verzeichnis Struktur. Wechseln Sie in den OPSI-Ordner und setzen Sie erneut den `ls` Befehl ab. Hier befindet sich unter anderem die 'control'-Datei, welche die eben eingegebenen Daten enthält und Ihnen auch die Möglichkeit bietet, diese im Editor zu kontrollieren oder zu modifizieren.

.Beispiel einer 'control' Datei

[source,configfile]
----
[Package]
version: 1
depends:

[Product]
type: localboot
id: mytest
name: My Test
description: A test product
advice:
version: 3.14
priority: 10
licenseRequired: False
productClasses:
setupScript: setup.ins
uninstallScript:
updateScript:
alwaysScript:
onceScript:
customScript:
userLoginScript:

[ProductDependency]
action: setup
requiredProduct: javavm
requiredStatus: installed

[ProductProperty]
type: unicode
name: mytextprop
multivalue: False
editable: True
description: hint
values: ["off", "on"]
default: ["off"]

[ProductProperty]
type: bool
name: myboolprop
description: yes or no
default: False

[Changelog]
mytest (3.14-1) testing; urgency=low

  * Initial package

 -- jane doe <j.doe@opsi.org>  Mi, 14 Jul 2010 12:47:53 +0000
----

Als nächstes müssen Sie das, für das Produkt erstellte, opsi-winst-Skript und die entsprechenden Dateien nach 'CLIENT_DATA' kopieren.

Wenn Sie z.B. das erstellte Skript unter 'c:\test' liegen haben, so mounten Sie '\\<opsiserver\opsi_workbench' z.B. nach 'w:' und kopieren den Inhalt von 'c:\test' in das Verzeichnis 'CLIENT_DATA'.
////


[[opsi-macclient-softwintegration-create-opsi-package-makeproductfile]]
===== Packen mit opsi-makepackage

Danach können Sie das Produkt packen. Gehen Sie dazu in das Stammverzeichnis des Produkts und rufen Sie 'opsi-makepackage' auf. Es wird nun das Produkt gepackt.

opsi-makepackage kennt einige Optionen, die sein Verhalten modifizieren:

[source,prompt]
----
$ opsi-makepackage --help
usage: opsi-makepackage [--help] [--version] [--quiet] [--verbose]
                        [--log-level {0,1,2,3,4,5,6,7,8,9}] [--no-compression]
                        [--archive-format {cpio,tar}] [--follow-symlinks]
                        [--custom-name custom name | --custom-only custom name]
                        [--temp-directory directory] [--md5 | --no-md5]
                        [--zsync | --no-zsync] [--no-pigz] [--keep-versions]
                        [--package-version packageversion]
                        [--product-version productversion]
                        [source directory]

Provides an opsi package from a package source directory. If no source
directory is supplied, the current directory will be used.

positional arguments:
  source directory

optional arguments:
  --help                Show help.
  --version, -V         show program's version number and exit
  --quiet, -q           do not show progress
  --verbose, -v         verbose
  --log-level {0,1,2,3,4,5,6,7,8,9}, -l {0,1,2,3,4,5,6,7,8,9}
                        Set log-level (0..9)
  --no-compression, -n  Do not compress
  --archive-format {cpio,tar}, -F {cpio,tar}
                        Archive format to use. Default: cpio
  --follow-symlinks, -h
                        follow symlinks
  --custom-name custom name, -i custom name
                        custom name (add custom files)
  --custom-only custom name, -c custom name
                        custom name (custom only)
  --temp-directory directory, -t directory
                        temp dir
  --md5, -m             Create file with md5 checksum.
  --no-md5              Do not create file with md5 checksum.
  --zsync, -z           Create zsync file.
  --no-zsync            Do not create zsync file.
  --no-pigz             Disable the usage of pigz

Versions:
  Set versions for package. Combinations are possible.

  --keep-versions, -k   Keep versions and overwrite package
  --package-version packageversion
                        Set new package version
  --product-version productversion
                        Set new product version for package
----

Es ist zu empfehlen die Pakete gleich mit einer zugehörigen md5-Prüfsummendatei zu erstellen.
Diese Datei wird unter anderem vom `opsi-package-updater` genutzt, um nach der Paketübertragung die Paketintegrität sicher zu stellen.
Eine solche Datei wird automatisch erstellt, aber für besondere Einsatzszenarien kann die Erstellung unterdrückt werden.

Bei der Übertragung von Paketen auf {opsi-depotserver} kann auf 'zsync' zurück gegriffen werden, um nur Unterschiede zwischen verschiedenen Paketen zu übertragen.
Damit dieses Verfahren verwendet werde kann, wird eine Datei besondere `.zsync`-Datei benötigt.
Eine solche Datei wird automatisch erstellt, aber für besondere Einsatzszenarien kann die Erstellung unterdrückt werden.

Wenn es beim Erstellen großer Pakete zu Platzproblemen im temporären Verzeichnis `/tmp` kommt, ist es möglich mittels `--temp-directory` ein abweichendes temporäres Verzeichnis anzugeben.

Wenn schon ein Paket dieser Version existiert, so zeigt `opsi-makepackage` eine Rückfrage:

[source,prompt]
----
Package file '/var/lib/opsi/workbench/mytest/mytest_3.14-1.opsi' already exists.
Press <O> to overwrite, <C> to abort or <N> to specify a new version:
----

Mit `o` wählen Sie überschreiben, mit `c` brechen Sie den Vorgang ab und mit `n` können Sie wählen, dass Sie nach einer neuen Product- bzw. Package-Version gefragt werden.

Das gepackte Paket können Sie mit `opsi-package-manager --install <paketdatei>` auf dem Server installieren.

Weitere Informationen zum opsi-packet-manager siehe opsi-Handbuch.



[[opsi-macclient-more-info]]
== Weitere Informationen

Das link:https://download.uib.de/opsi_stable/doc/opsi-handbuch-stable-de.pdf[opsi-Handbuch] enthält eine Fülle von weiteren Informationen, die für den produktiven Betrieb wichtig sind.
Wenn Sie ihren opsi-Server produktiv einsetzen empfehlen wir Ihnen besonders sich mit dem Werkzeug 'opsi-backup' vertraut zu machen, um eine Sicherung Ihrer Daten erstellen zu können.

Wenn Sie dort nicht fündig werden oder Hilfe benötigen, wenden Sie sich an link:https://forum.opsi.org[die opsi Community].

Für produktive Installationen empfehlen wir professionelle Unterstützung durch uib im Rahmen eines link:https://uib.de/de/support-schulung/support/[Pflege- und Supportvertrages].

