////
; Copyright (c) uib gmbh (www.uib.de)
; This documentation is owned by uib
; and published under the german creative commons by-sa license
; see:
; https://creativecommons.org/licenses/by-sa/3.0/de/
; https://creativecommons.org/licenses/by-sa/3.0/de/legalcode
; english:
; https://creativecommons.org/licenses/by-sa/3.0/
; https://creativecommons.org/licenses/by-sa/3.0/legalcode
; 
; credits: http://www.opsi.org/credits/
////


:Author:    uib gmbh
:Email:     info@uib.de
:Date:      11.07.2012
:Revision:  4.0.2
:doctype:		book

// Include common opsi terms
include::../common/opsi_terms.asciidoc[]



opsi-winst (4.11.3): Was ist neu ?
==================================



// Include common opsi copyright
include::../common/opsi_manual_copyright.asciidoc[]


== Start und Aufrufparameter

Der '{opsi-winst}' enthält seit Version 4.11.3 ein Manifest mit der Option: +
`<requestedExecutionLevel level="highestAvailable" />`. Dies bedeutet, dass unter NT6 als Administrator aufgerufen, versucht wird als 'elevated' Prozess zu arbeiten. Wird der '{opsi-winst}' mit User Rechten aufgerufen, so läuft er unter den Rechten dieses Users.


[[opsi-winst-params-showmode]]
== Fenster Modus

* `NormalizeWinst` +
setzt das '{opsi-winst}' Fenster auf 'normal' Modus.

* `IconizeWinst` +
setzt das '{opsi-winst}' Fenster auf 'minimierten' Modus.

* `RestoreWinst` +
setzt das '{opsi-winst}' Fenster auf 'maximierten' Modus.

[[opsi-winst-commands-insert]]
== Insert Kommandos

Mit Insert Kommandos kann der Inhalt einer externen Datei dem laufende Script hinzugefügt werden. Dies kann entweder einfügend oder anhängend erfolgen. Die Insert Kommandos sind normale Kommandos der primären Sektionen. Die eingefügten Dateien können weitere Insert Kommandos enthalten. +
Diese Kommandos gibt es seit Version 4.11.3

* `include_insert` <file name> +
Fügt den Inhalt von <file name> nach der aktuellen Zeile im laufenden Script ein. Somit ist die erste Zeile der eingefügten Datei die nächste Zeile welche der '{opsi-winst}' interpretiert.

* `include_append` <file name> +
Fügt den Inhalt von <file name> am Ende des laufenden Scriptes ein. Diese Anweisung dient vor allem dazu Sektionen aus z.B. einer Bibliothek hinzu zufügen.

Für beide Funktionen gilt: +
<file name> ist: +
* Ein kompletter Pfad zu einer Datei.
* Eine Datei in %ScriptPath%
* Eine Datei in %WinstDir%\lib

Die Prüfung erfolgt in dieser Reihenfolge. Die erste Datei die gefunden wird, wird genommen.

Beispiel: +
Wir haben folgendes Script:
[source,winst]
----
[Actions]
include_append "include-test3.opsiinc"
include_insert "include-test1.opsiinc"
----

Dabei hat die Datei "include-test1.opsiinc" folgenden Inhalt:
[source,winst]
----
DefVar $inctestvar$
set $inctestvar$ = "inctest"
Files_del_tmp_dummy
include_append "include-test2.opsiinc"
Files_copy_inctest

if fileExists("c:\opsi.org\tmp\dummy.txt") 
	comment "passed"
else
	comment "failed"
	set $TestResult$ = "not o.k."
	LogWarning "include test failed"
endif

if fileExists("%scriptpath%\test-files\dummy.txt") 
	comment "passed"
else
	comment "failed"
	set $TestResult$ = "not o.k."
	LogWarning "include test failed"
endif
Files_del_tmp_dummy
----

Dabei hat die Datei "include-test2.opsiinc" folgenden Inhalt:
[source,winst]
----
[Files_copy_inctest]
copy "%scriptpath%\test-files\dummy.txt" "c:\opsi.org\tmp"
----

Dabei hat die Datei "include-test3.opsiinc" folgenden Inhalt:
[source,winst]
----
[Files_del_tmp_dummy]
del -f "c:\opsi.org\tmp\dummyt.txt"
----


[[opsi-winst-string-functions-handling]]
== String-Verarbeitung

* `contains(`<str>, <substr>`)` +
Boolsche Funktion welche 'true' liefert wenn <substr> in <str> enthalten ist. Die Funktion arbeitet case sensitive. +
Seit 4.11.3 +
Beispiel:
[source,winst]
----
set $ConstTest$ = "1xy451Xy451XY45"
set $CompValue$ ="xy"
if contains($ConstTest$, $CompValue$)
	comment "passed"
else
	set $TestResult$ = "not o.k."
	LogWarning "failed"
endif
set $CompValue$ ="xY"
if not(contains($ConstTest$, $CompValue$))
	comment "passed"
else
	set $TestResult$ = "not o.k."
	LogWarning "failed"
endif
----

* `stringReplace(`<string>, <oldPattern>, <newPattern>`)` +
Liefert einen String in dem in <string>, <oldPattern> durch <newPattern> ersetzt ist. Die Funktion arbeitet case sensitive. +
Seit 4.11.3 +
Beispiel:
[source,winst]
----
set $ConstTest$ = "123451234512345"
set $CompValue$ = stringReplace("1xy451Xy451XY45","xy","23")
if ($ConstTest$ = $CompValue$)
	comment "passed"
else
	set $TestResult$ = "not o.k."
	LogWarning "failed"
endif
----

* `strLength(`<string>`)` +
Liefert Anzahl der Zeichen in <string> +
Seit 4.11.3 +
Beispiel:
[source,winst]
----
set $tmp$ = "123456789"
set $ConstTest$ = "9"
set $CompValue$ = strLength($tmp$)
if $ConstTest$ = $CompValue$
	comment "passed"
else
	set $TestResult$ = "not o.k."
	LogWarning "failed"
endif
----

* `strPos(`<string>, <sub string>`)` +
Liefert die Position des ersten Vorkommens von <sub string> in <string>. Wird <sub string> nicht gefunden so liefert die Funktion "0". Die Funktion arbeitet case sensitive. +
Seit 4.11.3 +
Beispiel:
[source,winst]
----
set $tmp$ = "1xY451Xy451xy45"
set $ConstTest$ = "7"
set $CompValue$ = strPos($tmp$,"Xy")
if $ConstTest$ = $CompValue$
	comment "passed"
else
	set $TestResult$ = "not o.k."
	LogWarning "failed"
endif
set $tmp$ = lower("1xY451Xy451xy45")
set $ConstTest$ = "2"
set $CompValue$ = strPos($tmp$,lower("xy"))
if $ConstTest$ = $CompValue$
	comment "passed"
else
	set $TestResult$ = "not o.k."
	LogWarning "failed"
endif
----

* `strPart(`<string>, <start pos>, <number of chars>`)` +
Liefert einen Teilstring von <string> beginnend mit <start pos> und <number of chars> lang. Wenn ab <str pos> weniger als <number of chars> vorhanden sind, so wird der String bis zum Ende geliefert. +
Seit 4.11.3 +
Beispiel:
[source,winst]
----
set $tmp$ = "123456789"
set $ConstTest$ = "34"
set $CompValue$ = strPart($tmp$,"3","2")
if $ConstTest$ = $CompValue$
	comment "passed"
else
	set $TestResult$ = "not o.k."
	LogWarning "failed"
endif
set $tmp$ = "123456789"
set $ConstTest$ = "56789"
set $CompValue$ = strPart($tmp$, strPos($tmp$,"56"),strLength($tmp$))
if $ConstTest$ = $CompValue$
	comment "passed"
else
	set $TestResult$ = "not o.k."
	LogWarning "failed"
endif
----

* `unquote(`<string>,<quote-string>`)`  //since 4.11.2.1 +
Wenn <string> mit dem Anführungszeichen <quote-string> versehen ist so liefert diese Funktion <string> ohne Anführungszeichen +
Von <quote-string> wird nur das erste Zeichen berücksichtigt, wobe führende Whitespaces ignoriert werden.



[[opsi-winst-string-functions-others]]
== Weitere String-Funktionen

*  `getDiffTimeSec` +
liefert einen String mit dem ganzahligen Wert der vergangenen Sekunden seit dem letzten Aufruf von `marktime`. +
Seit Version 4.11.3.1

* `SidToName(`<well known sid>`)` +
liefert einen String mit dem lokalisierten Namen der mit <well known sid> bezeichneten Gruppe. Zum Beispiel für 'S-1-5-32-544' je nach lokalisierung des Betriebsystems 'Administratoren' oder 'Administrators'.  +
Seit Version 4.11.3.1

*  `getLastExitCode` +
Die String-Funktion getLastExitCode gibt den ExitCode des letzten Prozessaufrufs der vorausgehenden WinBatch / DosBatch / ExecWith Sektion aus.

[[opsi-winst-commands-if-else-bool-functions]]
== Boolesche Ausdrücke


* `runningAsAdmin` +
Boolsche Funktion welche 'true' liefert wenn das laufende Script mit Administrativen Rechten ausgeführt wird. +
Seit 4.11.1.1

* `isLoginScript` +
Boolsche Funktion welche 'true' liefert wenn das laufende Script über die opsi Erweiterung 'User Profile Management' als 'userLoginScript' läuft. +
Seit 4.11.2.1

* `contains(`<str>, <substr>`)` +
Boolsche Funktion welche 'true' liefert wenn <substr> in <str> enthalten ist. Die Funktion arbeitet case sensitive. +
Seit 4.11.3

* `isNumber(`<str>`)` +
Boolsche Funktion welche 'true' liefert wenn <str> einen ganzahligen Wert (integer) representiert. +
Seit 4.11.3


* `getProductPropertyList(`<propname>,<default value>`)` 
Liefert eine Liste mit den aktiven Werten des multivalue Properties <propname>. Im Gegensatz zu der Funktion `GetProductProperty` welche in diesem Fall die einzelnen Werte auf einem komma separierten String zurück liefert. Diese Vorgehen wird problematisch wenn Kommas auch in der Werten vorkommen. +
Seit 4.11.3 +
Beispiel:
[source,winst]
----
;Property "dummymulti" has the values: ("ab", "cd", "ef", "g,h")
set $list$ = GetProductPropertyList ("dummymulti","True")
if not ("" = takeFirstStringContaining($list$,"g,h"))
	comment "GetProductPropertyList passed"
else
	set $TestResult$ = "not o.k."
	LogWarning "GetProductPropertyList failed"
endif

set $ConstTest$ = "ab,cd,ef,g,h"
set $CompValue$ = GetProductProperty ("dummymulti","True")
if ($ConstTest$ = $CompValue$)
	comment "GetProductProperty passed"
else
	set $TestResult$ = "not o.k."
	LogWarning "GetProductProperty failed"
endif
----

[[opsi-winst-stringlist-create-by-registry]]
== String-Listen aus der Registry


* `getRegistryKeyList32(`<regkey>`)` +
Liefert eine Liste mit dem Namen aller Keys direkt unterhalb von <regkey>. +
32 Bit Modus (mit Redirection). Seit 4.11.3

* `getRegistryKeyList64(`<regkey>`)` +
Liefert eine Liste mit dem Namen aller Keys direkt unterhalb von <regkey>. +
64 Bit Modus (ohne Redirection). Seit 4.11.3

* `getRegistryKeyListSysnative(`<regkey>`)` +
Liefert eine Liste mit dem Namen aller Keys direkt unterhalb von <regkey>. +
Modus abhängig von der Architektur des Betriebssystems. Seit 4.11.3

* `getRegistryVarList32(`<regkey>`)` +
Liefert eine Liste mit dem Namen aller Werte direkt unterhalb von <regkey>. +
32 Bit Modus (mit Redirection). Seit 4.11.3

* `getRegistryVarList64(`<regkey>`)` +
Liefert eine Liste mit dem Namen aller Werte direkt unterhalb von <regkey>. +
64 Bit Modus (ohne Redirection). Seit 4.11.3

* `getRegistryVarListSysnative(`<regkey>`)` +
Liefert eine Liste mit dem Namen aller Werte direkt unterhalb von <regkey>. +
Modus abhängig von der Architektur des Betriebssystems. Seit 4.11.3

Beispiel: +
Wir erzeugen Registryeinträge mit folgender Sektion durch den Aufruf von: +
[source,winst]
----
Registry_createkeys /32Bit

[Registry_createkeys]
openkey [HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\opsi-winst-test]
set "entry1" = "val1"
set "entry2" = "val2"
set "entry3" = "val3"
set "entry4" = "val4"
set "entry5" = "val5"
openkey [HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\opsi-winst-test\key1]
openkey [HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\opsi-winst-test\key2]
openkey [HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\opsi-winst-test\key3]
openkey [HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\opsi-winst-test\key4]
----
Dann liefert uns:
[source,winst]
----
set $list$ = getRegistryVarList32("hklm\software\opsi.org\opsi-winst-test")
----
folgenden Log: 
----
Set  $list$ = GetRegistryVarList32("hklm\software\opsi.org\opsi-winst-test")
Registry started with redirection (32 Bit)
    retrieving strings from GetRegistryVarList32 [switch to loglevel 7 for debugging]
        (string   0)entry1
        (string   1)entry2
        (string   2)entry3
        (string   3)entry4
        (string   4)entry5
----

Dann liefert uns:
[source,winst]
----
set $list$ = getRegistryKeyList32("hklm\software\opsi.org\opsi-winst-test")
----
folgenden Log: 
----
Set  $list$ = GetRegistryKeyList32("hklm\software\opsi.org\opsi-winst-test")
Registry started with redirection (32 Bit)
    retrieving strings from GetRegistryKeyList32 [switch to loglevel 7 for debugging]
        (string   1)key1
        (string   2)key2
        (string   3)key3
        (string   4)key4
----

==== ExecWith

Seit Version 4.11.3 wird, wenn als Interpreter 'powershell' angegeben ist, die temporäre Datei als `.ps1` gespeichert. 

== Sonstiges

* wisynth: TuibInstScript.doInfo: optimal fill for LabelInfo

* name of installing product shown in inital info block. fixes #367

* wisynth: executeWith: use extension '.ps1' if interpreter = powershell, fixes #382

* logfiles now again not locked against reading while opsi-winst is running
                         fixes: https://forum.opsi.org/viewtopic.php?f=7&t=3655