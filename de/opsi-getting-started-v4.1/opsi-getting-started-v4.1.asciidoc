////
; Copyright (c) uib gmbh (www.uib.de)
; This documentation is owned by uib
; and published under the german creative commons by-sa license
; see:
; https://creativecommons.org/licenses/by-sa/3.0/de/
; https://creativecommons.org/licenses/by-sa/3.0/de/legalcode
; english:
; https://creativecommons.org/licenses/by-sa/3.0/
; https://creativecommons.org/licenses/by-sa/3.0/legalcode
;
; credits: http://www.opsi.org/credits/
////

:Author:    uib gmbh
:Email:     info@uib.de
:Revision:  4.1
:toclevels: 6
:doctype:   book

// Include common opsi terms
include::../common/opsi_terms.asciidoc[]


= opsi Getting Started opsi-Version 4.1

include::../common/opsi_manual_copyright.asciidoc[]

[[opsi-getting-started-introduction]]
== Einführung
Diese Anleitung beschreibt detailliert die Installation und Inbetriebnahme eines {opsi-Server}s, ausgehend von den zur Verfügung gestellten Installationspaketen bis zur Testinstallation eines Clients.

Die dargestellte Netzwerkkonfiguration ist exemplarisch und bezieht sich auf ein Netz u.a. ohne konkurrierende DHCP-Server (z.B. ein isoliertes Testnetz, in das der {opsi-Server} und seine Clients für die ersten Versuche gestellt werden können).

Wir empfehlen Ihnen dringend, erste Versuche mit opsi in einem Testnetz zu machen, das getrennt von anderen DHCP-Servern ist, welches Sie aber zeitweise an Ihr Hauptnetz ankoppeln können, um z.B. Aktualisierungen und Pakete aus dem Internet laden zu können

Für die Einbindung in bestehende Netze können Sie ggf. auf Beratungsleistungen durch uib zurückgreifen.

[[opsi-getting-started-introduction-first-steps]]
=== Die Schritte der Installation und Inbetriebnahme

Die Installation und Inbetriebnahme eines {opsi-Server}s erfolgt in vier Schritten:

. Grundinstallation des Servers

. Anpassung des Servers: Konfiguration des Netzwerks, Passwortvergabe, Aktualisierung des Servers

. Download und Installation der notwendigen opsi-Produkte für die Clients

. Vervollständigen der Betriebssystem-Basispakete für Windows von den Original-Medien

Danach kann bereits ein Client automatisch installiert werden. +
Für die Grundinstallation existieren mehrere Varianten, die je nach Interesse und Vorliebe genutzt werden können.
Die Verfahrensweisen bei den Varianten der Grundinstallation sind in Abschnitt <<opsi-getting-started-installation>> der vorliegenden Anleitung geschildert.

[[opsi-getting-started-introduction-hardware-preconditions]]
=== Hardwarevoraussetzungen

Für den {opsi-Server} in realer Hardware wird benötigt:

* Intel-x86-kompatibler PC

* mindestens 2GB RAM

* eine Festplatte mit mindestens 60 GB Kapazität

Im Testbetrieb sind die Anforderungen an die Leistungsfähigkeit der Maschine nicht besonders hoch. Für den Produktivbetrieb kann es nötig werden die Anforderungen an den Server an zu passen.

Bei der Verwendung der virtuellen Maschine muss ein angemessener Wirtsrechner genutzt werden. Es sollte mindestens ein Dualcore Prozessor und 4GB RAM vorhanden sein.
Für eine Teststellung kann problemlos eine weitere virtuellen Maschine im selben Wirtsrechner als Client dienen.

[[opsi-getting-started-introduction-software-and-configuration-preconditions]]
=== Software und Konfigurationsvoraussetzungen

Folgende Voraussetzungen müssen erfüllt sein, damit Sie opsi installieren bzw. einsetzen können:

* *gültiger DNS Domainname* +
Ihr DNS Domainname muss mindestens aus einer Domain und einer Topleveldomain bestehen.
Anders ausgedrückt: der volle (Full qualified) Domainname muss mindestens einen Punkt enthalten.  Weiterhin muss die Topleveldomain aus mindestens zwei Zeichen bestehen. +
Erlaubt sind z.B.: 'domain.local', 'uib.de', 'subdomain.domain.de'. +
Nicht erlaubt ist z.B. 'mydomain.d', denn das wäre nur ein Zeichen in der Topleveldomain. +
Nicht erlaubt ist z.B. 'mydomain', denn das wäre nur eine Topleveldomain. +
Siehe auch: +
http://de.wikipedia.org/wiki/Domain +
http://de.wikipedia.org/wiki/Hostname#Richtlinien

* *gültige DNS Hostnamen* +
Die Hostnamen (auch der Clients) müssen den Richtlinien entsprechen.
Dazu gehört auch, dass sie z.B. keine Unterstriche enthalten dürfen. +
Siehe auch: +
http://de.wikipedia.org/wiki/Hostname#Richtlinien

* *Korrekte Namensauflösung für den Server* +
Prüfen Sie den Eintrag für den {opsi-Server} in der Datei '/etc/hosts', +
oder aber die Ausgabe von
+
[source,prompt]
----
getent hosts $(hostname -f)
----
+
Das Ergebnis sollte beispielsweise so aussehen: +
'192.168.1.1 server.domain.tld server' +
Sieht das Ergebnis nicht so aus (enthält z.B. '127.0.0.1' oder 'localhost'), dann müssen Sie Ihre '/etc/hosts' oder Namensauflösung zunächst korrigieren.

NOTE: Die Namen müssen den Vorgaben eines DNS-Systems entsprechen, aber ein DNS-Server wird für den Betrieb von opsi nicht benötigt.

NOTE: opsi benötigt kein _Active Directory_ oder ähnliches. Eine Integration ist möglich, wird aber nicht vorausgesetzt.

Die benötigten Network Ports finden Sie hier: <<opsi-getting-started-installation-config-ports>>


* *Gesetzte Spracheinstellungen* +
opsi setzt voraus, dass auf dem verwendeten Server Spracheinstellung ('locale') gesetzt sind. +
Empfohlen wird die Verwendung einer UTF-8-kompatiblen Lokalisierung. +
+
Zur vereinfachten Prüfung kann folgender Befehl verwendet werden:
+
[source,prompt]
----
test -e /etc/default/locale && echo "ok" || (echo "Check locales:" && locale)
----
+
Wird _ok_ ausgegeben, so sind locales gesetzt.
Wird _check locales:_ ausgegeben, so prüfen Sie bitte, dass in der nachfolgend
ausgegebenen Liste für 'LANG' oder 'LC_ALL' ein Wert gesetzt ist, welcher der von
Ihnen verwendeten Sprache entspricht.
+
Für Deutsch empfehlen wir `de_DE.UTF-8`.
+
Die folgenden Befehle zeigen beispielhaft wie die Einstellung geändert
werden kann, sollte kein oder ein ungewollte Wert gesetzt sein:
+
[source,prompt]
----
sudo locale-gen de_DE.UTF-8
update-locale LANG=de_DE.UTF-8
----
+
Zum systemweiten Anwenden der Spracheinstellung sollte der Server neu gestartet werden.
+
Weitere Informationen entnehmen Sie bitte dem Handbuch der von Ihnen verwendeten Linux-Distribution.


[[opsi-getting-started-supportmatrix]]
== opsi Support Matrix (opsi läuft auf welchen Servern)

Im folgenden finden Sie eine Übersicht auf welchen Plattformen opsi
als Server läuft.

include::../common/opsi_manual_supportmatrix.asciidoc[]

[[opsi-getting-started-installation]]
== opsi-server Installation

[[opsi-getting-started-installation-base]]
=== {opsi-Server}-Grundinstallation

In diesem Abschnitt werden verschiedene Varianten der Realisierung des '{opsi-server}s' dargestellt.
Wenn alle Schritte klappen, erhalten Sie ein Serversystem, das bereit für die endgültige Konfiguration und Inbetriebnahme ist.
Sie haben also die Wahl und können die Abschnitte überspringen, die die nicht gewählten Wege zum {opsi-Server} beschreiben.

Wir empfehlen zur Evaluierung von opsi, den Weg über die vorinstallierte virtuellen Maschine zu wählen. +
Die Grundregel ist: wenn Sie der Reihe nach die Befehle in den

[source,prompt]
----
hervorgehobenen Feldern
----

ausführen (z.B. per cut&paste aus diesem Dokument holen), dann sollte die Installation auch klappen.

Falls in Ihrem Netzwerk ein Proxyserver zum Zugriff auf das Internet verwendet werden muss, so denken Sie daran diesen auch auf Ihrem {opsi-server} einzutragen.
Insbesondere die Umgebungsvariablen `http_proxy` und `https_proxy`.

Bei Problemen wenden Sie sich bitte an: https://forum.opsi.org


[[opsi-getting-started-installation-base-vm]]
==== Inbetriebnahme der von uib vorkonfigurierten virtuellen Maschine

Da die Anforderungen an die Rechengeschwindigkeit eher niedrig sind, lässt sich der '{opsi-server}' auch problemlos als virtuelle Maschine installieren.
Für ESX, VMware und  Virtualbox haben wir bereits eine entsprechende Maschine eingerichtet.
Die Dateien stehen im Internet zur Verfügung.
Zum Betrieb genügt ein kostenfreier VMware-Player oder Virtualbox.
Sie können diese Maschine aber auch in VMware-Server oder ESX betreiben.

[[opsi-getting-started-installation-base-vm-start]]
===== Auspacken und erster Start

*VMware*

Sofern Sie bereits über einen Gastrechner verfügen, auf dem die VMware-Vollversion oder ein VMware-Player installiert ist, erledigen Sie die Grundinstallation des '{opsi-server}s' mit wenigen Mausklicks:

* Laden Sie die aktuelle opsi-ServerVM von link:http://uib.de/de/opsi/opsi-testen-download/[uib.de]
* Entpacken Sie den Zip-File, das Verzeichnis `opsivm` wird erzeugt.
* Starten Sie den VMware-Player. +
Öffnen Sie "Open a Virtual Maschine", suchen Sie in dessen Dateiauswahldialog das Verzeichnis `opsivm` und darin die Datei `opsivm.ovf`. Gegebenenfalls müssen Sie ganz unten noch die anzuzeigenden Dateitypen auf ovf ändern.
Sie können den Server jetzt unter einem eigenen Namen importieren. Der virtuelle Server kann gestartete werden.

*ESXi-Server*

* Laden Sie die aktuelle opsi-ServerVM von link:http://uib.de/de/opsi/opsi-testen-download/[uib.de]
* Entpacken Sie den Zip-File, das Verzeichnis `opsivm` wird erzeugt
* Starten Sie den vSphere Client. +
Erstellen Sie sich einen neuen Rechner über 'Datei' / 'OVF-Vorlage bereitstellen....' und die Beantwortung der Folge-Dialoge.

*Virtualbox*

* Laden Sie die aktuelle opsi-ServerVM von link:http://uib.de/de/opsi/opsi-testen-download/[uib.de]
* Entpacken Sie den Zip-File, das Verzeichnis `opsivm` wird erzeugt
* Starten Sie Virtualbox. +
Über den Menüpunkt 'Datei' / 'Appliance importieren' können Sie die Datei `opsivm.ovf` laden.

*Allgemein*

Den VMware-Player können Sie für alle gängigen Betriebssysteme kostenfrei bei link:https://www.vmware.com/[vmware.com] beziehen.
Er lässt sich in der Regel problemlos installieren, sofern die Ausstattung des Wirtsrechners, insbesondere mit Speicher, den Bedarf mehrerer parallel laufender Betriebssysteme abdeckt.

[[opsi-getting-started-installation-base-vm-lang]]
===== Sprachauswahl
Nach dem Start des Systems müssen Sie die gewünschte Sprache auswählen:

.Sprachauswahl
image::abbildung1.png["Screenshot: Sprachauswahl",width=400]

[[opsi-getting-started-installation-base-vm-1stboot]]
=====  Erster Start

Zur Arbeit mit dem {opsi-Server} ist es von sehr großem Vorteil, wenn dieser direkt mit dem Internet verbunden ist. Zur Netzwerkkonfiguration wird beim ersten Start der Appliance automatisch das Skript `1stboot.py` aufgerufen. +
Wenn Sie das System anders aufgesetzt haben oder einen neuen Anlauf nehmen wollen, können sie `1stboot.py` bzw. `/usr/local/bin/1stboot.py` auch auf der Kommandozeile aufrufen.

Die Logdatei von `1stboot.py` ist `/var/lib/1stboot/1stboot.log`.

WARNING: `1stboot.py` eignet sich nicht, um einen konfigurierten {opsi-Server} nachträglich umzubenennen!

.Startmaske
image::abbildung2.png["Screenshot: 1stboot.py Startmaske",width=400]

Sie werden dann zur Eingabe von Informationen zur Konfiguration des Netzwerkes aufgefordert. Beantworten Sie die Fragen.

.Eingabemaske
image::1stboot-Eingabemaske.png["Screenshot: 1stboot Eingabemaske",width=400]

Im Folgenden werden Sie gefragt nach:

Servername:: Name diese Servers (ohne Domain) z.B. +opsidepot+

Domain:: DNS-Domain (nicht Windows-Domain, muss einen Punkt enthalten)
z.B. +opsi.local+ oder +meinefirma.local+

IP-Adresse:: Adresse dieses Servers z.B. +192.168.1.50+

Netzmaske:: Netzmaske dieses Servers z.B. +255.255.255.0+

Windows Domain:: Name der Windows Domain (nicht DNS-Domain)

Länderkennung::	Für die Erstellung des SSL-Zertifikats: Kennung der Nation in 2 Großbuchstaben, z.B. +DE+

Bundeslandkennung:: Für die Erstellung des SSL-Zertifikats: Kennung des Bundeslandes, z.B. +RPL+

Stadt::	Für die Erstellung des SSL-Zertifikats: Stadt, z.B. +Mainz+

Firma::	Für die Erstellung des SSL-Zertifikats: Firma, z.B. +uib gmbh+

Abteilung::	Für die Erstellung des SSL-Zertifikats (Optional)

Mail Adresse::	Für die Erstellung des SSL-Zertifikats(Optional): Mailadresse

Gateway::	IP-Adresse des Internetgateways, z.B. +192.168.1.1+

Proxy::	Soweit zum Internetzugriff benötigt, die Angaben zum Proxy: z.B. `http://myuser:mypass@192.168.1.5:8080`

DNS-Server::	IP-Adresse des Nameservers, z.B. +192.168.1.1+

Mailrelay::	IP-Adresse des Mailservers z.B. +192.168.1.1+

Tftpserver::	Als 'TFTP server' geben Sie in der Regel die IP-Nummer des Servers (='IP-Adresse') ein.

Passwort für root::	Das Passwort für den lokalen Administrator-Benutzer.

Passwort für adminuser::	Das Passwort für den lokalen opsi-Administrator.

Nach Abschluss des Programms `1stboot.py` wird die virtuelle Maschine, sofern Sie automatisch gestartet war, auch automatisch neu gebootet.


[[opsi-getting-started-installation-base-vm-second-start]]
===== Zweiter Start

Nach dem Neustart bzw. nach Fertigstellen der Netzwerkkonfiguration loggen Sie sich als adminuser mit dem von Ihnen vergebenen Passwort ein.

Sie befinden sich direkt auf der graphischen Oberfläche des '{opsi-server}s' (für diese wird ein Ressourcen schonender Windowsmanager verwendet).
Zur Begrüßung erscheint ein „Firefox“-Browser-Fenster mit dem Verweis auf das vorliegende Handbuch und weiteren Hinweisen.

Wenn die Meldung erscheint, dass keine Netzwerkverbindung verfügbar ist, kann dies mit der speziellen Start-Konfiguration der virtuellen Appliance zusammenhängen.
Vor einer weiteren Fehlersuche sollten Sie zunächst probieren, den Server nochmals zu rebooten (z.B. mit dem Ausschaltknopf in der Bedienleiste unten auf der graphischen Oberfläche).

.Graphische Startoberfläche des opsiservers
image::opsiserver_start_gui.png["Screenshot: Graphische Startoberfläche des opsiservers",400]

Sobald die Netzwerkkonfiguration funktioniert, können Sie auch remote auf den {opsi-Server} zugreifen:

* *Per ssh* +
(in Linux-Systemen stets vorhanden, unter Windows mit putty, s. http://www.chiark.greenend.org.uk/~sgtatham/putty/) +
kommen Sie auf die Kommandozeile des Servers. Als Benutzernamen verwenden Sie root, Sie  authentifizieren sich mit dem Root-Passwort.

[[opsi-getting-started-installation-base-vm-term]]
===== Terminalfenster

Im Folgenden müssen einige Befehle auf der Kommandozeile eingegeben werden.
Bei anderen ist die Eingabe der Befehle auf der Kommandozeile der schnellere Weg zum gewünschten Ergebnis.

Ein Fenster zur Text-Eingabe von Befehlen, d.h. ein Terminalfenster, erhält man auf verschiedenen Wegen:

* Remotezugriff per ssh auf den {opsi-Server} (s. vorheriger Abschnitt)

* Öffnen eines Terminalfensters in der graphischen Oberfläche (direkt auf dem {opsi-Server}) durch Klicken auf das Terminal-Icon in der Icon-Leiste der graphischen Oberfläche.

* Öffnen eines Terminalfensters in der graphischen Oberfläche (direkt auf dem {opsi-Server}) durch Rechtsklick in der Fläche und Auswahl von „Terminal“.
Dazu hilfreich: die graphische Oberfläche hat mehrere Arbeitsflächen, erreichbar durch die Auswahl-Schaltflächen in der linken oberen Bildschirmecke.

Besonders vorteilhaft ist es, Befehle aus den Anleitungen, z.B. diesem Handbuch, direkt  per Kopieren & Einfügen in ein Terminalfenster zu übertragen,
soweit die entsprechende Anwendungsumgebung dies unterstützt.

Beispiele aus Konfigurationsdateien sind in den Dokumentationen wie folgt formatiert:
[source,configfile]
----
depoturl = smb://smbhost/sharename/path
----

Befehle sind folgendermaßen hervorgehoben:
[source,prompt]
----
cd /tmp
ls -l
----

In '<spitzen Klammern>' werden Namen dargestellt, die durch ihre Bedeutung ersetzt werden müssen. +
Beispiel: Der Fileshare, auf dem die opsi Softwarepakete liegen, wird '<opsi-depot-share>' genannt und liegt auf einem realen Server in der Regel in '/var/lib/opsi/depot'. +
Das Softwarepaket: `<opsi-depot-share>/ooffice` liegt dann tatsächlich unter
`/var/lib/opsi/depot/ooffice`.

[[opsi-getting-started-installation-base-vm-network]]
===== Überprüfen und ggf. korrigieren der Netzwerkanbindung

Wenn die Netzwerkkonfiguration korrekt ist und der Rechner Anbindung an das Internet hat, können Sie mit dem Browser im Startfenster bereits auf eine beliebige Adresse im Internet zugreifen.

Sofern nicht alles funktioniert, öffnen Sie am besten ein Terminalfenster (möglicherweise geht es dann noch nicht remote, sondern nur auf der Server-Oberfläche), und prüfen die Netzwerkanbindung mit den üblichen, hier nicht zu erklärenden Checks.

Sie können im Terminalfenster auch das Kommando
[source,prompt]
----
1stboot.py
----

aufrufen und die Netzwerkkonfiguration neu eingeben.

Ein Systemneustart wird dann durch den Befehl

[source,prompt]
----
reboot
----

erzwungen.

Wenn die Netzwerkanbindung funktioniert, setzen Sie die Konfiguration des {opsi-Server}s fort, um dann mit ersten Installationstest beginnen zu können.

[[opsi-getting-started-installation-base-vm-update-server]]
===== Aktualisierung des opsi-Servers

Bringen Sie den opsi-Server auf den aktuellen Stand, indem Sie das Icon 'Update OS' auf dem Desktop doppelt klicken. Geben Sie das Passwort für den adminuser ein und bestätigen gegebenfalls mit 'Y' falls erforderlich.

[[opsi-getting-started-installation-base-vm-update-opsi-product]]
===== Installieren der Standard opsi-Produkte

Installieren Sie die Standard opsi-Produkte durch Doppelklick auf das Icon 'First package installation'. Bitte geben Sie das Passwort für den adminuser ein.
Hierdurch werden automatisiert die aktuellen opsi-Pakete, incl. Templates für Betriebssysteminstallationen, aus den opsi-Repositories geholt und auf dem Server installiert.

Für weitere Informationen siehe auch <<opsi-getting-started-installation-config-get-essential-products>>.


[[opsi-getting-started-installation-base-vm-start-configed]]
===== Start der Management-Oberfläche

Die Management-Oberfläche können Sie durch einen Doppelklick auf das Icon 'opsi Management GUI' aufrufen.
Zur Beschreibung der Management-Oberfläche gehen Sie zu <<opsi-getting-started-installation-config-configed>>.

Damit ist die grundlegende Server-Konfiguration beendet.

Sie können nun fortfahren mit

* <<opsi-getting-started-firststeps-software-deployment-client-integration>>

* <<opsi-getting-started-firststeps-osinstall>>


[[opsi-getting-started-installation-base-deb]]
==== Installation auf einem Debian / Ubuntu System

In diesem Abschnitt wird davon ausgegangen, dass Sie mit dem Debian-Paketsystem vertraut sind (Informationen zu diesem Thema finden Sie in den einschlägigen Büchern, in den man-pages oder unter  http://www.debiananwenderhandbuch.de/).

Bitte beachten Sie, das ein {opsi-Server} im Verzeichnis '/var/lib/opsi' einen empfohlenen freien Speicher von mindestens 16 GB benötigt.

IMPORTANT: *Prüfen Sie hier ob Ihre Server Betriebssystem Version von opsi unterstützt wird:*
<<opsi-getting-started-supportmatrix>> +
Beachten Sie bitte die Software und Konfigurationsvoraussetzungen:  <<opsi-getting-started-introduction-software-and-configuration-preconditions>>.

Wir empfehlen zunächst folgende Installationen:

[source,prompt]
----
apt install wget host pigz
----

Weiterhin muss Samba installiert sein:

[source,prompt]
----
apt install samba samba-common smbclient cifs-utils
----

Nun sollten Sie den MySQL-Server installieren, damit Sie MySQL als Backend z.B. für die Inventarisierungsdaten und Lizenzmanagement verwenden können:

[source,prompt]
----
apt install mysql-server
----

Prüfen Sie den Eintrag für den {opsi-Server} in der Datei `/etc/hosts` oder aber die Ausgabe von

[source,prompt]
----
getent hosts $(hostname -f)
----

Das Ergebnis sollte beispielsweise so aussehen: +
'192.168.1.1 server.domain.tld server' +
Sieht das Ergebnis nicht so aus (enthält z.B. '127.0.0.1' oder 'localhost') dann müssen Sie Ihre '/etc/hosts' oder Namensauflösung zunächst korrigieren.

Um nun opsi zu installieren muss das opsi-Repository für apt eingetragen werden:

*Ubuntu 18.04 LTS _Bionic Beaver_:*
[source,prompt]
----
echo "deb http://download.opensuse.org/repositories/home:/uibmz:/opsi:/4.1:/stable/xUbuntu_18.04/ /" > /etc/apt/sources.list.d/opsi.list
----

*Ubuntu 16.04 LTS _Xenial Xerus_:*
[source,prompt]
----
echo "deb http://download.opensuse.org/repositories/home:/uibmz:/opsi:/4.1:/stable/xUbuntu_16.04/ /" > /etc/apt/sources.list.d/opsi.list
----

*Debian 9 _Stretch_:*
[source,prompt]
----
echo "deb http://download.opensuse.org/repositories/home:/uibmz:/opsi:/4.1:/stable/Debian_9.0/ /" > /etc/apt/sources.list.d/opsi.list
----

*Debian 8 _Jessie_:*
[source,prompt]
----
echo "deb http://download.opensuse.org/repositories/home:/uibmz:/opsi:/4.1:/stable/Debian_8.0/ /" > /etc/apt/sources.list.d/opsi.list
----

Führen Sie nun folgende Befehle aus, um den Signierschlüssel des Repositories zu importieren:

*Ubuntu 18.04 LTS _Bionic Beaver_:*
[source,prompt]
----
wget -nv https://download.opensuse.org/repositories/home:uibmz:opsi:4.1:stable/xUbuntu_18.04/Release.key -O Release.key
apt-key add - < Release.key
----

*Ubuntu 16.04 LTS _Xenial Xerus_:*
[source,prompt]
----
wget -nv https://download.opensuse.org/repositories/home:uibmz:opsi:4.1:stable/xUbuntu_16.04/Release.key -O Release.key
apt-key add - < Release.key
----

*Debian 9 _Stretch_:*
[source,prompt]
----
wget -nv https://download.opensuse.org/repositories/home:uibmz:opsi:4.1:stable/Debian_9.0/Release.key -O Release.key
apt-key add - < Release.key
----

*Debian 8 _Jessie_:*
[source,prompt]
----
wget -nv https://download.opensuse.org/repositories/home:uibmz:opsi:4.1:stable/Debian_8.0/Release.key -O Release.key
apt-key add - < Release.key
----

Alle: +
Prüfen Sie ob der Import erfolgreich war:
[source,prompt]
----
apt-key list
----

sollte unter anderem enthalten: +
`pub   2048R/D8361F81 2017-09-30 [verfällt: 2019-12-09]
uid                  home:uibmz:opsi OBS Project <home:uibmz:opsi@build.opensuse.org>`

Führen Sie nun folgende Befehle aus um opsi auf dem Server zu installieren:

[source,prompt]
----
apt update
apt remove tftpd
# Nur noetig wenn eine tftp Zeile in der inetd Konfiguration vorhanden ist
update-inetd --remove tftp
apt install opsi-tftpd-hpa
apt install opsi-server
apt install opsi-windows-support
----

Falls Sie bei der Installation von opsi-tftp-hpa nach dem Tftp-Basisverzeichnis gefragt werden, beantworten Sie diese Frage mit `/tftpboot`.

Bei der Installation des Paketes opsiconfd werden Sie nach Angaben zur Erstellung eines lokalen SSL-Zertifikates gefragt.

Bei der Installation des {opsi-Server}s werden Sie gefragt, ob die `smb.conf` gepatcht werden darf. Beantworten Sie die Fragen mit 'Ja'.
Weiterhin werden Sie nach einem Passwort für den User pcpatch gefragt.
Vergeben Sie ein Passwort (und beachten Sie den folgenden Abschnitt zum Ändern der Passwörter).


.Debian 8 (Jessie) Besonderheiten: +

Das bootimage hat Probleme die `opsi_depot`-Freigabe per mount.cifs zu mounten.
Um dieses Problem zu verhindern, muss entweder ID mapping in Samba entsprechend konfiguriert sein oder der Dienst `winbind` darf nicht laufen.
Falls `winbind` nicht benötigt wird, wird empfohlen diesen zu deaktivieren.

Start von winbindd deaktivieren:
[source,prompt]
----
systemctl disable winbind
----
oder
[source,prompt]
----
insserv -r winbind
----

Für eine funktionierende Konfiguration von ID mapping geben Sie einen beschränkten Zuweisungsbereich in `smb.conf` und starten anschließend Samba neu.

Um ID mapping zu konfigurieren, können Sie das Folgende in die Sektion `[global]` Ihrer `smb.conf` einfügen.
[source,prompt]
----
idmap config * : range = 1000-1999999
----

Da Sie opsi auf einer existierenden Maschine eingespielt haben, gehen wir davon aus, dass Ihre Netzwerkkonfiguration korrekt ist. +
Machen Sie daher mit dem Punkt <<opsi-getting-started-installation-config-backend>> weiter.

[[opsi-getting-started-installation-base-ucs]]
==== Installation auf einem Univention Corporate Server (UCS)

IMPORTANT: *Prüfen Sie hier ob Ihre Server Betriebssystem Version von opsi unterstützt wird:*
<<opsi-getting-started-supportmatrix>> +
Beachten Sie bitte die Software und Konfigurationsvoraussetzungen:  <<opsi-getting-started-introduction-software-and-configuration-preconditions>>.


Die Installation auf einem Univention Corporate Server ist sowohl über das dort vorhandene App Center als auch auf klassischem Wege über die von uib gepflegten Repositories möglich.

Beides sind gleichwertige Installationsmöglichkeiten. Wir empfehlen pro Server nur jeweils eine davon zu verwenden.
Der Unterschied zwischen den Varianten ist, dass bei Verwendung des App Centers eine Installation auf der Rolle 'Member' nicht möglich ist.
Werden neue Betriebssystempakete veröffentlicht, so stehen diese bei der Verwendung der uib-Repositories schneller zur Verfügung als über das App Center.
Bei der Verwendung des App-Center wird der Wechsel auf eine neue UCS-Version (bspw. von UCS 4.2 nach UCS 4.3) vom Betriebssystem blockiert, bis alle Apps unter der neuen Betriebssystemversion zur Verfügung stehen.

NOTE: Aktuell werden Installationen auf einem System mit 32bit- und 64bit-Architektur untestützt. +
In Zukunft wird der Support für 32bit eingestellt, weshalb wir nur noch den Einsatz von 64bit empfehlen.

Allen Installationsvarianten ist gemein, dass das Paket `opsi4ucs` installiert wird.
Dieses bereitet die UCS-Umgebung auf den Einsatz mit opsi vor. Dazu wird ein Join-Script verwendet.
Die Vorbereitung beinhaltet das Anlegen von benötigten Benutzern, Gruppen und Freigaben.

Auf dem ersten opsi-Server in einer Umgebung wird das Backend zur Verwendung des vorhandenen MySQL-Servers konfiguriert.
Alle nachfolgenden Server werden in opsi als Depots registriert werden.

Wird von opsi 4.0 aktualisiert, so wird im Rahmen des Join-Scripts die Migration der Backends durchgeführt.


[[opsi-getting-started-installation-base-ucs-appcenter]]
===== Installation mittels Univention App-Center

Über das Univention App-Center steht eine automatisierte Installation des {opsi-server}s zur Verfügung.
Die Installations-App für opsi befindet sich in der UCS-Management-Oberfläche in der Kategorie 'System'.
Über das App-Center kann opsi nur auf den Rollen 'Master', 'Backup' und 'Slave' installiert werden.

Falls Sie ein Update einer vorhandenen opsi-Umgebung durchführen möchten, lesen Sie bitte auch das darauf folgende Kapitel.

Zur Installation des {opsi-server}s werden automatisch weitere Pakete installiert: 'opsi-tftpd-hpa', 'opsi-windows-support', 'univention-mariadb' bzw. 'univention-mysql'.

Falls ein existierender {opsi-server} entdeckt wird, so wird 'opsi-package-updater' so konfiguriert, dass er die Pakete von diesem Server bezieht.
Der 'opsi-package-updater' wird bei der Installation - nicht bei einer Aktualisierung - zum Einspielen der minimalen opsi-Produkte aufgerufen.
Im Rahmen eines Major- oder Minor-Update werden Paketaktualisierungen eingespielt.

Bitte beachten Sie, dass anschließend kein automatischer Transfer von Clients nach opsi stattfindet.
Mehr Informationen unter <<opsi-getting-started-installation-base-ucs-listener>>.

Die opsi-Installation auf einem UCS-Server über das 'Univention' App-Center ist damit abgeschlossen. Weiter geht es mit:
<<opsi-getting-started-installation-config-modules>>

[[opsi-getting-started-installation-upgrade-appcenter]]
===== Update vorhandener opsi-Installation von einem UCS 3 auf UCS 4 (über App-Center)

Eine der wichtigsten Änderungen, die mit dem Update für opsi 4.0.5 gekommen ist, ist die Unterstützung der Gruppe 'opsifileadmins'. Diese Gruppe ersetzt in UCS
zukünftig die Gruppe 'pcpatch'. 'Opsifileadmins' wurde zwar schon mit der
Unterstützung von UCS 3.0 eingeführt, es wurde allerdings nur auf
Installationen eingerichtet, die mit Samba 4 und den Univention
Directory Services (Samba4-AD) installiert wurden.
Auf allen anderen Varianten und Rollen, wurde bisher die Gruppe als
'pcpatch' angelegt. +
Da dieser Umstand nicht nur im Installationshandling ein Problem darstellt, sondern auch Probleme bei möglichen Migrationen (besonders von Samba3 auf Samba4) verursachen kann, wird seit opsi 4.0.5 die Gruppe 'pcpatch' als 'opsifileadmins' angelegt.

WARNING: Um diese Anforderungen sauber in das Integrationspaket implementieren zu können, wird die Gruppe 'pcpatch', falls vorhanden, automatisch über das Integrationspaket in 'opsifileadmins' umbenannt.
Dies geschieht über das join-Skript. Falls Ihr Configserver auf einem 'Master' oder 'Backup' betrieben wird, wird das Join-Skript automatisch ausgeführt. +
 +
Der Hauptgrund für diese drastische Maßnahme ist, dass die manuelle Umbenennung dieser Gruppe nicht trivial ist, da es sich um eine primäre Gruppe handelt. Wir empfehlen vor dem Einspielen dieses Updates zu überprüfen, ob Ihre Gruppe noch 'pcpatch' heißt. Wenn dem so ist, sollte das Update - angefangen beim Configserver - auf allen Depotservern zeitnah eingespielt werden, da ansonsten der Betrieb der Multidepot Umgebung gestört wird. Wenn Ihre Gruppe schon 'opsifileadmins'
heißt, sollten keine Beeinträchtigungen auftreten. Dennoch wird empfohlen, nach dem Einspielen der Updates alle opsi-Server auf Funktion zu überprüfen.


[[opsi-getting-started-installation-base-ucs-manually]]
===== Manuelle opsi-Installation unter UCS (ohne App-Center)

IMPORTANT: *Prüfen Sie hier ob Ihre Server Betriebssystem Version von opsi unterstützt wird:*
<<opsi-getting-started-supportmatrix>> +
Beachten Sie bitte die Software und Konfigurationsvoraussetzungen:  <<opsi-getting-started-introduction-software-and-configuration-preconditions>>.

Notwendige Vorbereitungen:

* Der Befehl
+
[source,prompt]
----
hostname -f
----
+
muss einen fully qualified domainname zurück liefern, in dem mindestens zwei Punkte vorkommen, z.B. 'opsiserver.domain.local'.

* Der Befehl
+
[source,prompt]
----
getent hosts $(hostname -f)
----
+
muss die IP-Adresse der Netzwerkschnittstelle zurück liefern, zu der sich die Clients verbinden sollen. Gibt der Befehl die Adresse '127.0.0.1' oder '127.0.0.2' aus, muss die Datei `/etc/hosts` korrigiert werden.

* Samba muss konfiguriert sein. Für den Einsatz auf einem Server in der Rolle 'Member' muss `univention-samba` anstatt `univention-samba4` zum Einsatz kommen.

* `univention-mariadb` oder `univention-mysql` muss installiert sein

* Soll die Maschine auch als DHCP-Server eingesetzt werden, muss der Daemon dhcpd konfiguriert und am Laufen sein.

Die Installation von opsi ist möglich auf den Rollen 'Master', 'Backup', 'Slave' und 'Member'.
Für die Installation auf einem 'Member' beachten Sie unbedingt <<opsi-getting-started-installation-base-ucs-member>>!

Die folgende Dokumentation geht von einer Installation auf der Rolle 'Master' mit Samba 4 aus.

CAUTION: Wird die Installation auf einem 'Slave' ausgeführt, muss dieser bereits gegenüber dem 'Master' gejoint und während der Grundinstallation Samba 4 installiert worden sein. +
Die UCS-Konfiguration wird überlicherweise auf dem 'Master' vorgenommen, während die Installation und Konfiguration von opsi auf dem 'Slave' geschieht.

Die klassischen Installationsvariante mit dem Benutzer: 'pcpatch' mit der primären Gruppe 'pcpatch' kann unter UCS nicht eingehalten werden. Da Samba4 den grundlegenden Restriktionen von Active-Directory unterliegt, sind Gruppen mit der gleichen Bezeichnung wie User (wie in Unix/Linux üblich) nicht mehr erlaubt.
Aus diesem Grund wurde für UCS 3 die neue Konfigurationsdatei `/etc/opsi/opsi.conf` eingeführt, über welche gesteuert wird, wie die Gruppe für den Samba-Zugriff auf die Freigaben bestimmt wird. Seit UCS 3 wird über diese Datei der Gruppenname 'pcpatch' umbenannt und heißt von nun an: 'opsifileadmins'.
Das bedeutet, dass die User, die Zugriffsrechte für die Freigaben von opsi erhalten müssen (opsi-Paketierer) nicht Mitglied der Gruppe 'pcpatch', sondern Mitglied der Gruppe 'opsifileadmins' sein müssen. Diese Besonderheit gilt nur für UCS und unterscheidet sich von den anderen Distributionen und in weiterführenden Kapiteln der opsi-Dokumentationen. Unter UCS wird der User 'pcpatch' als vollwertiger Domänenbenutzer angelegt.
Nähere Informationen über diese neue Konfigurationsdatei können Sie dem Handbuch entnehmen.

* Um opsi zu installieren, tragen Sie das entsprechende Repository ein:

*UCS 4.4:*
[source,prompt]
----
echo "deb http://download.opensuse.org/repositories/home:/uibmz:/opsi:/4.1:/stable/Univention_4.4/ /" > /etc/apt/sources.list.d/opsi.list
----

*UCS 4.3:*
[source,prompt]
----
echo "deb http://download.opensuse.org/repositories/home:/uibmz:/opsi:/4.1:/stable/Univention_4.3/ /" > /etc/apt/sources.list.d/opsi.list
----


Nun muss noch der Schlüssel des Repositories ins System importiert werden:

*UCS 4.4:*
[source,prompt]
----
wget -nv https://download.opensuse.org/repositories/home:uibmz:opsi:4.1:stable/Univention_4.4/Release.key -O Release.key
apt-key add - < Release.key
----

*UCS 4.3:*
[source,prompt]
----
wget -nv https://download.opensuse.org/repositories/home:uibmz:opsi:4.1:stable/Univention_4.3/Release.key -O Release.key
apt-key add - < Release.key
----


Für die Installation führen Sie nun folgende Befehle aus:

*UCS 4.4:*
[source,prompt]
----
univention-install univention-mariadb
univention-install opsi-tftpd-hpa opsi4ucs
univention-install opsi-windows-support
----

*UCS 4.3:*
[source,prompt]
----
univention-install opsi-tftpd-hpa
univention-install univention-mariadb
univention-install opsi4ucs
univention-install opsi-windows-support
----


Ist die Rolle des Zielsystems eine andere als 'Master' oder 'Backup', muss nun noch das opsi4ucs Join-Skript ausgeführt werden:

[source,prompt]
----
univention-run-join-scripts
----

Unter der URL `https://<servername>:4447` finden Sie nun einen Link zur opsi Management Oberfläche.

Um den opsi-Konfigurations-Editor verwenden zu können, muss ein Benutzer Mitglied der Gruppe {opsi-admin-group} sein. Die Gruppenzugehörigkeit eines Users kann über Univention-Admin bearbeitet werden. Der Benutzer Administrator wird während der Installation automatisch in diese Gruppe aufgenommen.

Abschliessend muss noch im UDM unter dem Punkt Freigaben für die 'opsi_depot' -Freigabe unter Erweiterte Einstellungen -> Erweiterte Samba-Einstellungen: Die Option: 'follow symlinks' auf 'yes' gesetzt werden. Das gleiche sollte man am besten auch für die 'opsi_depot_rw' -Freigabe erledigen, damit später die Treiberintegration keine Probleme verursacht. Sollte sich das `/var/lib/opsi/depot` -Verzeichnis auf einer extra Partition oder Festplatte befinden, muss man noch zusätzlich für diese Freigaben die Option wide links auf 'yes' setzen.

Um sicher zu stellen, dass alle Einstellungen von opsi nun korrekt übernommen wurden, sollte man noch folgende Befehle ausführen:

[source,prompt]
----
opsi-setup --init-current-config
opsi-set-rights
systemctl restart opsiconfd.service
systemctl restart opsipxeconfd.service
----

Bei samba4 handelt es sich um einen zentralen Dienst, daher wird dieser nicht automatisch vom Paket neugestartet, sondern muss nachträglich manuell durchgeführt werden. Nach dem Neustart von samba kann es zu einer kleinen Verzögerung beim Zugriff auf die neuen Freigaben kommen, wir bitten dies zu berücksichtigen.

Da es keinen direkten Kontakt zwischen Univention-LDAP und dem opsi-Backend gibt, müssen alle Clients erst im LDAP über udm angelegt werden und danach nochmal mit opsi im opsi-System mit allen Informationen (insbesondere der MAC-Addresse) angelegt werden. Das Löschen des Clients im Univention-LDAP sorgt nicht dafür, dass der Client unter opsi auch gelöscht wird.
Dieses Problem wird in  <<opsi-getting-started-installation-base-ucs-listener>> genauer beleuchtet.

Da Sie opsi auf einer existierenden Maschine eingespielt haben, gehen wir davon aus, dass Ihre Netzwerkkonfiguration korrekt ist. +
Machen Sie daher mit dem Punkt <<opsi-getting-started-installation-config-backend>> weiter.

WARNING: Die verwendeten Unix-Befehle in den folgenden Kapiteln beziehen sich auf Debian-Systeme, Sie müssen sie evtl. durch die entsprechenden UCS-Befehle ersetzen.

[[opsi-getting-started-installation-base-ucs-member]]
===== Hinweise zur opsi-Installation auf einem UCS-Server in der Rolle 'Member'

WARNING: Da der Einsatz von opsi auf 'Member'-Servern besonderen Einschränkungen unterliegt, empfehlen wir Anfängern den Einsatz von opsi auf einer anderen Rolle.

Die Installation von opsi auf einem Server in der Rolle 'Member' ist möglich.
Eine automatisierte Installation über das Univention App Center kann jedoch aktuell nicht vorgenommen werden.

Nach einer Installation muss sicher gestellt werden, dass der für den Depotzugriff verwendete Benutzer mitsamt Domäne aufgeführt ist.
Dazu muss der Hostparameter `clientconfig.depot.user` kontrolliert werden.
Ist die Domäne `backstage`, so muss der Wert `backstage\pcpatch` lauten. Lautet er `memberserver\pcpatch`, so muss der Wert korrigiert werden.

Das Setzen des Kennworts für den Benutzer `pcpatch` über `opsi-admin` scheitert auf Grund der fehlenden AD-Schreibberechtigungen eines 'Member'-Servers.
Daher muss die Änderung des Kennworts des technischen Benutzers `pcpatch` *zusätzlich* auf einem Server mit Schreibrechten im AD vorgenommen werden - ein 'Master', 'Backup' oder 'Slave'.


[[opsi-getting-started-installation-base-ucs-pxepolicy]]
===== Konfiguration des PXE-Boot für Betriebssysteminstallationen

Wenn der PXE-Boot für die Betriebssysteminstallation eingesetzt werden soll, muss der DHCP-Dienst auf dem entsprechenden UCS-System umkonfiguriert werden. Hier gibt es zwei Besonderheiten, die UCS von den anderen unterstützten Distributionen unterscheidet.

* Die Konfiguration wird nicht automatisch vorgenommen, da bei einer Installation von opsi in eine produktive UCS-Infrastruktur in der Regel schon diese Konfigurationen existieren.
* Ist der opsi-tftpd-hpa so konfiguriert, dass er nicht wie sonst das Verzeichnis `/tftpboot` als Basisverzeichnis nutzt, sondern `/var/lib/univention-client-boot`. Alle wichtigen Dateien vom {opsi-linux-bootimage} werden deshalb vom `/tftpboot` in das Basisverzeichnis verschobem. Dies hat den Nebeneffekt, dass die DHCP-Option: Filename `pxelinux.0` statt `linux/pxelinux.0` lauten muss.

Um die oben genannte Konfigurationen um zu setzen, muss im UCS-System eine Richtlinie erstellt werden. Diese Einstellung ist abhängig von den schon vorhandenen Richtlinien und müssen entsprechend umgesetzt werden. Wenn opsi auf einem UCS-Testsystem installiert wurde und keine Richtlinien entsprechend existieren, sollte erst geprüft werden ob der DHCP-Dienst installiert ist, wenn nicht muss das noch nachgeholt werden. Wenn der DHCP-Dienst schon installiert wurde, ist der einfachste Weg die Richtlinie in der UMC-Webschnittstelle (Univention Management Console) vom UCS-Server zu erstellen. Dazu wählt man den die Kategorie "Domäne" und darunter das Modul DHCP-Server. Als nächstes muss man den Service wählen (Bei einem Testsystem gibt es in der Regel nur einen Eintrag). In der folgenden Detailansicht wählt man den Menüpunkt Richtlinien. Die Richtlinie, die hier benötigt wird ist eine DHCP-Boot Richtlinie. Bei der Richtlinienkonfiguration wählt man nun den Defaulteintrag `cn=default-settings` (sollte der einzige Eintrag sein) und wählt bearbeiten. Unter Grundeinstellungen - DHCP Boot für die Option Bootserver die IP vom {opsi-server} ein und bei Boot-Dateiname muss `pxelinux.0` eingetragen werden.

WARNING: Wenn man die Richtlinie wie oben beschrieben setzt, gilt das für jedes Gerät, welches per DHCP von diesem Server bedient wird. Deshalb noch mal der Hinweis, dass diese Beschreibung nur für Evaluierer gedacht ist, die im Zuge von opsi auch ucs Testen. Bei Installationen in produktive UCS-Umgebungen sollte man diese Richtlinie nicht auf diese Weise setzen.

Optional lassen sich diese Einstellungen auch auf der Konsole mit dem udm-Kommando erledigen. Nähere Informationen dazu entnehmen Sie bitte der entsprechenden UCS-Dokumentation.


[[opsi-getting-started-installation-base-ucs-listener]]
===== LDAP-Daten nach opsi überführen

In einer opsi4ucs-Installation müssen die Windows-Clients erst im UDM angelegt werden und erst im folgenden Schritt im opsi-configed erstellt werden.
Änderungen von Clients im UDM werden nicht an opsi weitergegeben.
Wenn ein Client zum Beispiel im LDAP eine neue Mac-Addresse bekommt, wird dies im opsi-System nicht bemerkt.
Wenn man nun versucht ein Netboot-Produkt für diesen Client auf setup zu setzen, würde opsi die Bootkonfiguration mit der falschen Mac-Addresse im Bootsystem hinterlegen.

Die Lösung hierzu ist die Erweiterung 'opsi-directory-connector'.
Weitere Informationen hierzu enthält das Handbuch.

[[opsi-getting-started-installation-base-opensuse]]
==== Installation auf openSUSE

IMPORTANT: *Prüfen Sie hier ob Ihre Server Betriebssystem Version von opsi unterstützt wird:*
<<opsi-getting-started-supportmatrix>> +
Beachten Sie bitte die Software und Konfigurationsvoraussetzungen:  <<opsi-getting-started-introduction-software-and-configuration-preconditions>>.


Notwendige Vorbereitungen:

* Der Befehl
+
[source,prompt]
----
hostname -f
----
+
muss einen fully qualified domainname zurück liefern, in dem mindestens zwei Punkte vorkommen, z.B. 'opsiserver.domain.local'.

* Der Befehl
+
[source,prompt]
----
getent hosts $(hostname -f)
----
+
muss die IP-Adresse der Netzwerkschnittstelle zurück liefern, zu der sich die Clients verbinden sollen. Gibt der Befehl die Adresse '127.0.0.1' oder '127.0.0.2' aus, muss die Datei `/etc/hosts` korrigiert werden.

* Samba muss installiert und konfiguriert sein.

* MariaDB-Server muss installiert sein.

* Soll die Maschine auch als DHCP-Server eingesetzt werden, muss der Daemon dhcpd konfiguriert und am Laufen sein.

Hinzufügen des opsi-SUSE-Repositories per zypper:

*openSUSE Leap 42.3:*
[source,prompt]
----
zypper addrepo http://download.opensuse.org/repositories/home:uibmz:opsi:4.1:stable/openSUSE_Leap_42.3/home:uibmz:opsi:4.1:stable.repo
----

Nach dem Hinzufügen der Repositories kann die Installation gestartet werden:

[source,prompt]
----
zypper refresh
  Wollen Sie den Schlüssel (a)bweisen, ihm (t)emporär oder (i)mmer vertrauen? [a/t/i/?] (a): i
zypper -v install opsi-server
zypper -v install opsi-windows-support
----

Bitte stellen Sie sicher, daß Ihre Firewall Konfiguration die folgenden Ports erlaubt: tftp Port (69/UDP) und die opsi ports (4447/TCP und 4441/TCP).

Falls Sie die Netzwerkkonfiguration mit Hilfe der Tools yast oder autoyast vorgenommen haben kann es sein, dass dieses Tool einen Eintrag in die Datei `/etc/hosts` einen Eintrag nach folgendem Muster angelegt hat:
[source,configfile]
----
127.0.0.2 <fqdn> <hostname>
----

Falls Sie opsi die Konfiguration des DHCP Servers überlassen wollen muss dieser Eintrag auf die öffentliche IP-Adresse geändert werden, über die der Server erreichbar ist.

Da Sie opsi auf einer existierenden Maschine eingespielt haben, gehen wir davon aus, dass Ihre Netzwerkkonfiguration korrekt ist. +
Machen Sie daher mit dem Punkt <<opsi-getting-started-installation-config-backend>> weiter.

WARNING: Die verwendeten Unix-Befehle in den folgenden Kapiteln beziehen sich auf Debian-Systeme. Sie müssen sie durch die entsprechenden Suse-Befehle ersetzen.

[[opsi-getting-started-installation-base-sles]]
==== Installation auf Suse Linux Enterprise Server (SLES)

IMPORTANT: *Prüfen Sie hier ob Ihre Server Betriebssystem Version von opsi unterstützt wird:*
<<opsi-getting-started-supportmatrix>> +
Beachten Sie bitte die Software und Konfigurationsvoraussetzungen:  <<opsi-getting-started-introduction-software-and-configuration-preconditions>>.


Notwendige Vorbereitungen:

* Der Befehl
+
[source,prompt]
----
hostname -f
----
+
muss einen fully qualified domainname zurück liefern, in dem mindestens zwei Punkte vorkommen, z.B. 'opsiserver.domain.local'.

* Der Befehl
+
[source,prompt]
----
getent hosts $(hostname -f)
----
+
muss die IP-Adresse der Netzwerkschnittstelle zurück liefern, zu der sich die Clients verbinden sollen. Gibt der Befehl die Adresse '127.0.0.1' oder '127.0.0.2' aus, muss die Datei '/etc/hosts' korrigiert werden.

* Samba muss konfiguriert sein.

* `mariadb-server` sollte installiert sein.

* Soll die Maschine auch als DHCP-Server eingesetzt werden, muss der Daemon dhcpd konfiguriert und am Laufen sein.

Hinzufügen des opsi-SLES-Repositories per zypper:

*SLES 12SP4:*
[source,prompt]
----
zypper addrepo http://download.opensuse.org/repositories/home:uibmz:opsi:4.1:stable/SLE_12_SP4/home:uibmz:opsi:4.1:stable.repo
----

*SLES 12SP3:*
[source,prompt]
----
zypper addrepo http://download.opensuse.org/repositories/home:uibmz:opsi:4.1:stable/SLE_12_SP3/home:uibmz:opsi:4.1:stable.repo
----

*SLES 12SP2:*
[source,prompt]
----
zypper addrepo http://download.opensuse.org/repositories/home:uibmz:opsi:4.1:stable/SLE_12_SP2/home:uibmz:opsi:4.1:stable.repo
----

*SLES 12SP1:*
[source,prompt]
----
zypper addrepo http://download.opensuse.org/repositories/home:uibmz:opsi:4.1:stable/SLE_12_SP1/home:uibmz:opsi:4.1:stable.repo
----

*SLES 12:*
[source,prompt]
----
zypper addrepo http://download.opensuse.org/repositories/home:uibmz:opsi:4.1:stable/SLE_12/home:uibmz:opsi:4.1:stable.repo
----

Nach dem Hinzufügen der Repositories kann die Installation gestartet werden:

[source,prompt]
----
zypper refresh
  Wollen Sie den Schlüssel (a)bweisen, ihm (t)emporär oder (i)mmer vertrauen? [a/t/i/?] (a): i
zypper -v install opsi-server
zypper -v install opsi-windows-support
----

Falls Sie die Netzwerkkonfiguration mit Hilfe der Tools yast oder autoyast vorgenommen haben kann es sein, dass dieses Tool einen Eintrag in die Datei `/etc/hosts` einen Eintrag nach folgendem Muster angelegt hat:
[source,configfile]
----
127.0.0.2 <fqdn> <hostname>
----

Fall Sie opsi die Konfiguration des DHCP Servers überlassen wollen muss dieser Eintrag auf die öffentliche IP-Adresse geändert werden, über die der Server erreichbar ist.

Da Sie opsi auf einer existierenden Maschine eingespielt haben, gehen wir davon aus, dass Ihre Netzwerkkonfiguration korrekt ist. +
Machen Sie daher mit dem Punkt <<opsi-getting-started-installation-config-backend>> weiter.

WARNING: Die verwendeten Unix-Befehle in den folgenden Kapiteln beziehen sich auf Debian-Systeme. Sie müssen sie durch die entsprechenden Suse-Befehle ersetzen.

[[opsi-getting-started-installation-base-rhel]]
==== Installation auf einem RedHat Enterprise Linux (RHEL)

IMPORTANT: *Prüfen Sie hier ob Ihre Server Betriebssystem Version von opsi unterstützt wird:*
<<opsi-getting-started-supportmatrix>> +
Beachten Sie bitte die Software und Konfigurationsvoraussetzungen:  <<opsi-getting-started-introduction-software-and-configuration-preconditions>>.

Notwendige Vorbereitungen:

* Der Befehl
+
[source,prompt]
----
hostname -f
----
+
muss einen fully qualified domainname zurück liefern, in dem mindestens zwei Punkte vorkommen, z.B. 'opsiserver.domain.local'.

* Der Befehl
+
[source,prompt]
----
getent hosts $(hostname -f)
----
+
muss die IP-Adresse der Netzwerkschnittstelle zurück liefern, zu der sich die Clients verbinden sollen. Gibt der Befehl die Adresse '127.0.0.1' oder '127.0.0.2' aus, muss die Datei '/etc/hosts' korrigiert werden.

* Samba und Datenbankserver installieren:
+
[source,prompt]
----
yum install mariadb-server samba samba-client
----

* Samba und Datenbankserver konfigurieren:
+
[source,prompt]
----
systemctl start smb.service
systemctl start nmb.service
systemctl start mariadb.service
systemctl enable smb.service
systemctl enable nmb.service
systemctl enable mariadb.service
mysql_secure_installation
----

* Soll die Maschine auch als DHCP-Server eingesetzt werden, muss der Daemon dhcpd konfiguriert und am Laufen sein.

Beim Red Hat Network registrieren:

[source,prompt]
----
rhn_register
----

Hinzufügen des RHEL Repositories:

*RHEL 7:*
[source,prompt]
----
cd /etc/yum.repos.d/
wget https://download.opensuse.org/repositories/home:uibmz:opsi:4.1:stable/RHEL_7/home:uibmz:opsi:4.1:stable.repo
yum makecache
----


Nach dem Hinzufügen der Repositories kann die Installation gestartet werden:

[source,prompt]
----
yum remove tftp-server
yum install opsi-server
yum install opsi-windows-support
----

Es kann vorkommen, dass eine Nachfrage zum Importieren des GPG-Schlüssel des Repositories wie die nachfolgene Meldung während der Installation gezeigt wird:

[source,prompt]
----
   Importing GPG key 0xD8361F81 "home:uibmz OBS Project <home:uibmz@build.opensuse.org>" from http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40/RedHat_RHEL-6/repodata/repomd.xml.key
   Is this ok [y/N]: y
----
Bitte beantworten Sie diese Nachfrage mit 'y'.

Bitte stellen Sie sicher, dass Ihre iptables- und SELinux-Konfiguration die folgenden Ports erlaubt: tftp Port (69/UDP) und die opsi ports (4447/TCP und 4441/TCP).

Da Sie opsi auf einer existierenden Maschine eingespielt haben, gehen wir davon aus, dass Ihre Netzwerkkonfiguration korrekt ist. +
Machen Sie daher mit dem Punkt <<opsi-getting-started-installation-config-backend>> weiter.

WARNING: Die verwendeten Unix-Befehle in den folgenden Kapiteln beziehen sich auf Debian-Systeme. Sie müssen sie durch die entsprechenden RHEL-Befehle ersetzen.

[[opsi-getting-started-installation-base-centos]]
==== Installation auf einem CentOS Server

IMPORTANT: *Prüfen Sie hier ob Ihre Server Betriebssystem Version von opsi unterstützt wird:*
<<opsi-getting-started-supportmatrix>> +
Beachten Sie bitte die Software und Konfigurationsvoraussetzungen:  <<opsi-getting-started-introduction-software-and-configuration-preconditions>>.


Notwendige Vorbereitungen:

* Der Befehl
+
[source,prompt]
----
hostname -f
----
+
muss einen fully qualified domainname zurück liefern, in dem mindestens zwei Punkte vorkommen, z.B. 'opsiserver.domain.local'.

* Der Befehl
+
[source,prompt]
----
getent hosts $(hostname -f)
----
+
muss die IP-Adresse der Netzwerkschnittstelle zurück liefern, zu der sich die Clients verbinden sollen. Gibt der Befehl die Adresse '127.0.0.1' oder '127.0.0.2' aus, muss die Datei '/etc/hosts' korrigiert werden.

* Samba und Datenbankserver installieren:
+
[source,prompt]
----
yum install mariadb-server samba samba-client
----

* Samba und Datenbankserver konfigurieren:
+
[source,prompt]
----
systemctl start smb.service
systemctl start nmb.service
systemctl start mariadb.service
systemctl enable smb.service
systemctl enable nmb.service
systemctl enable mariadb.service
mysql_secure_installation
----

* Soll die Maschine auch als DHCP-Server eingesetzt werden, muss der Daemon dhcpd konfiguriert und am Laufen sein.

Hinzufügen des CentOS Repositories:

*CentOS 7:*
[source,prompt]
----
cd /etc/yum.repos.d/
wget https://download.opensuse.org/repositories/home:uibmz:opsi:4.1:stable/CentOS_7/home:uibmz:opsi:4.1:stable.repo
yum makecache
----

Nach dem Hinzufügen der Repositories kann die Installation gestartet werden:

[source,prompt]
----
yum install opsi-server
yum install opsi-windows-support
----

Es kann vorkommen, dass eine Nachfrage zum Importieren des GPG-Schlüssel des Repositories wie die nachfolgene Meldung während der Installation gezeigt wird:

[source,prompt]
----
   Importing GPG key 0xD8361F81 "home:uibmz OBS Project <home:uibmz@build.opensuse.org>" from http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40/CentOS_CentOS-6/repodata/repomd.xml.key
   Is this ok [y/N]: y
----
Bitte beantworten Sie diese Nachfrage mit 'y'.

Bitte stellen Sie sicher, dass Ihre iptables- und SELinux-Konfiguration die folgenden Ports erlaubt: tftp Port (69/UDP) und die opsi ports (4447/TCP und 4441/TCP).

Da Sie opsi auf einer existierenden Maschine eingespielt haben, gehen wir davon aus, dass Ihre Netzwerkkonfiguration korrekt ist. +
Machen Sie daher mit dem Punkt <<opsi-getting-started-installation-config-backend>> weiter.

WARNING: Die verwendeten Unix-Befehle in den folgenden Kapiteln beziehen sich auf Debian-Systeme, Sie müssen sie durch die entsprechenden CentOS-Befehle ersetzen.

[[opsi-getting-started-installation-config]]
=== Aktualisieren und Konfigurieren des {opsi-Server}s

[[opsi-getting-started-installation-config-proxy]]
==== Proxy-Eintrag in apt-Konfiguration

Sofern für Ihren Internet-Zugang erforderlich, passen Sie die Datei `/etc/apt/apt.conf` an Ihre Netzwerkgegebenheiten an (richtigen Proxy eintragen oder Zeile auskommentieren / löschen). Eine Datei können Sie editieren z. B. mithilfe des Programms „midnight commander“:

[source,prompt]
----
mcedit /etc/apt/apt.conf
----

[[opsi-getting-started-installation-config-update]]
==== Aktualisierung des {opsi-Server}s

Bringen Sie den {opsi-Server} auf den letzten Stand, in dem Sie nacheinander in einem Terminalfenster die folgenden Kommandos aufrufen:

[source,prompt]
----
apt update
apt upgrade
----

TIP: Sollte beim Update nachgefragt werden, ob die `smb.conf` überschrieben werden soll, muss man dies bestätigen. Sollte die `smb.conf` vorher schon geändert worden sein, sollte man den default beibehalten und später die Dateien miteinander abgleichen. Sollte diese Nachfrage schon mit Nein beantwortet worden sein, kann man dies später auf dem {opsi-Server} durch ausführen von `opsi-setup --auto-configure-samba` nachholen.


[[opsi-getting-started-installation-config-backend]]
==== Backend-Konfiguration

Opsi unterstützt zur Datenhaltung unterschiedliche Backends.

Im Wesentlichen sind dies:

* *file* - Datenhaltung in Dateien
* *mysql* - Datenhaltung in einer MySQL-Datenbank

Daneben gibt es noch für spezielle Zwecke die Backends:

* *opsipxeconfd* - der Dienst für den Netzwerkboot mit opsi
* *dhcpd* - zur Kommunikation mit dem dhcp-Server auf dem {opsi-server}
* *jsonrpc* - zur Weiterleitung aller Anfragen an einen anderen Server


Standardmäßig wird das {mysql-Backend} für die Inventarisierung verwendet.
Die Verwendung des {file-Backend}s für Inventurdaten ist möglich, aber deutlich langsamer und deshalb nicht empfohlen.

NOTE: Die Verwendung des {mysql-Backend} für Inventariserungsdaten ist kostenlos. +
Mehr Informationen zur Freischaltung finden Sie <<opsi-getting-started-installation-config-modules, hier>>.

NOTE: Einige Distributionen verwenden _MariaDB_ anstatt _MySQL_. +
Das _mysql_-Backend funktioniert auch mit MariaDB.


CAUTION: MySQL-Server verwendet seit Version 5.7 den vorher optionalen 'strict mode' nun standardmäßig. +
Dies führt zu einem Fehlschlag des Befehls `opsi-setup --configure-mysql`. +
Dementsprechend sollte vor dem Befehlsaufruf die Datei `/etc/mysql/mysql.conf.d/mysqld.cnf` editiert werden. +
In der `[mysqld]` Sektion muss nun folgende Zeile eingefügt werden: +
`sql_mode=NO_ENGINE_SUBSTITUTION` +
 +
Danach muss der Dienst `mysql` neu gestartet werden: `systemctl restart mysql.service`


Nachfolgend wird das {mysql-Backend} zur Verwendung eingerichtet.
Es wird davon ausgegangen, dass ein MySQL-Server eingerichtet wurde und die Zugangsdaten eines Datenbank-Administrators bekannt sind.
Gezielte Informationen zu Installation und Einrichtung entnehmen Sie bitte den Handbüchern Ihrer Distribution.

Für die initiale Konfiguration des {mysql-Backend}s nutzen Sie den Befehl:
[source,prompt]
----
opsi-setup --configure-mysql
----

Der Befehl wird nach den Zugangsdaten zum Datenbanksystem fragen, um eine Datenbank und einen Benutzer mit entsprechenden Berechtigungen für diese Datenbank für opsi anzulegen.

Eine Beispiel-Sitzung:

.opsi-setup --configure-mysql: Eingabemaske
image::mysql-config-input-mask.png["opsi-setup --configure-mysql: Eingabemaske",width=400]

.opsi-setup --configure-mysql: Ausgabe
image::mysql-config-output.png["opsi-setup --configure-mysql: Ausgabe",width=400]

Bei den Abfragen können außer beim 'Database Admin Password' alle Vorgaben mit Enter bestätigt werden.
Das 'Database Admin Password' ist auf der opsi-VM `linux123` ansonsten das, was Sie bei der Installation des mysql-servers vergeben haben.

Unterschiedliche Daten können in unterschiedlichen Backends gehalten werden.
Über bestimmte Vorgänge müssen mehrere Backends informiert werden.
Hierzu werden die opsi-Methoden den Backends zugeordnet.
Dies geschieht in der Datei `/etc/opsi/backendManager/dispatch.conf`.

Hier ein Beispiel:
[source,configfile]
----
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# =      backend dispatch configuration                                     =
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
#
# This file configures which methods are dispatched to which backends.
# Entries has to follow the form:
# <regular expression to match method name(s)> : <comma separated list of backend name(s)>
#
# Backend names have to match a backend configuration
# file basename <backend name>.conf beneath /etc/opsi/backends.
# For every method executed on backend dispatcher
# the first matching regular expression will be decisive.

# Recommended standard configuration (dhcpd not at the opsi server)
#    file as main backend, mysql as hw/sw invent
#     and license management backend and opsipxeconfd backend:
backend_.*         : file, mysql, opsipxeconfd
host_.*            : file, opsipxeconfd
productOnClient_.* : file, opsipxeconfd
configState_.*     : file, opsipxeconfd
license.*          : mysql
softwareLicense.*  : mysql
audit.*            : mysql
.*                 : file
----

In dieser Datei sind oben Erläuterungen und Beispielkonfigurationen angegeben.
In den nicht auskommentierten Zeilen steht vorne der Name der opsi-Methoden (mit wildcard `.*`) und nach einem Doppelpunkt die hierfür zuständigen Backends.
Bei jedem Methodenaufruf wird anhand dieser Liste geprüft, welche Backends aufgerufen werden müssen.
Dabei wird die erste Zeile genommen die zu dem Methoden Namen passt.
Die letzte Zeile (`.*`) passt auf jeden Methoden Namen.

Die Standardeinstellung bei der Installation von opsi die Verwendung  des {file-Backend}s als Haupt-Backend und Verwendung des {mysql-Backend} für Lizenzmanagement- und Inventur-Daten.

CAUTION: Achten Sie darauf, dass alle verwendeten Backends in der Zeile beginnend mit `backend_.*` aufgeführt werden.

Wann immer Sie die Datei `dispatch.conf` angepasst haben, führen Sie die folgenden Befehle aus.
Auch wenn Sie bei der Inbetriebnahme des Servers die Datei nicht geändert haben, führen Sie diese Befehle jetzt aus.

[source,prompt]
----
opsi-setup --init-current-config
opsi-set-rights
systemctl restart opsiconfd.service
systemctl restart opsipxeconfd.service
----


[[opsi-getting-started-installation-config-passwords]]
==== Samba-Konfiguration anpassen und Ändern von Passwörtern

Um sicherzustellen, dass die für opsi erforderlichen Samba-Shares verfügbar sind, führen Sie bitte den folgenden Befehl aus:

[source,prompt]
----
opsi-setup --auto-configure-samba
----

Anschließend sollten die Samba-Dienste neu gestartet werden:

[source,prompt]
----
systemctl restart smbd.service
systemctl restart nmbd.service
----

Auf dem System ist ein Pseudo-User 'pcpatch' eingerichtet. Die PCs melden sich zwecks Installation von Softwarepaketen als dieser User an und haben dann Zugriff auf die Installationsdateien auf den hierfür vorgesehenen Shares. Der User 'pcpatch' muss mit korrektem Passwort – gleichzeitig als System-User, als Samba-User und als opsi-User – eingerichtet werden.

Rufen Sie in einem Terminalfenster das Programm '{opsi-admin}' mit der Option zum Setzen des pcpatch-Passwortes (in einem für opsi, Unix und Samba).

[source,prompt]
----
opsi-admin -d task setPcpatchPassword
----

Nach „Abschicken“ des Befehls werden Sie zur Passworteingabe aufgefordert.


[[opsi-getting-started-installation-config-java]]
==== Überprüfung der Java-Konfiguration

Zur Verwaltung des {opsi-Server}s und der angeschlossenen Clients dient das Programm {opsi-configed}.
Es kommuniziert über HTTPS mit dem opsi-Server und kann daher auf jedem Rechner verwendet werden, der eine entsprechende Verbindung aufbauen kann.
Dieses Programm benötigt auf den Rechnern, auf denen es ausgeführt wird,
eine Java-Runtime-Umgebung mindestens in Version 8 bzw., wie die interne Versionszählung lautet, Version 1.8.

Wenn Sie das opsi Managementinterface '{opsi-configed}' direkt auf dem Server ausführen möchten, so benötigen Sie dort eine grafische Oberfläche und ein aktuelle Java Laufzeitumgebung.
Kann oder soll der {opsi-configed} nicht auf dem Server ausgeführt werden, können Sie dieses Kapitel überspringen. +

Eine grafische Oberfläche und eine aktuelle Laufzeitumgebung sind in der virtuellen Maschine von uib bereits installiert.

Kontrollieren Sie, ob Java in der benötigten Version installiert ist, indem Sie in einem Terminal den folgenden Befehl aufrufen:

[source,prompt]
----
java -version
----

Installieren Sie eine neuere Java-Version, falls die angezeigte Version zu alt ist.


TIP: Achten Sie bei einer virtuellen Maschine auf eine ausreichende Auflösung des virtuellen Bildschirms.
Für den {opsi-configed} ist es sinnvoll, eine Auflösung ab 1024x768 zu verwenden.
Für die Verbesserung der Graphik- und Maustreiberintegration bei einer höheren Auflösung, hilft es, die 'VMware Tools' bei einer VMware-Maschine bzw. die Gasterweiterungen bei einer VirtualBox-Maschine zu installieren.


[[opsi-getting-started-installation-config-users-and-groups]]
==== User einrichten und Gruppen opsiadmin und pcpatch pflegen

Die Administration von opsi ist nur Benutzern gestattet, die Mitglied der Unix-Gruppe '{opsi-admin-group}' sind.

Im folgenden wird als Beispiel der neue Benutzer 'adminuser' so eingerichtet, wie Sie ihn sich einrichten sollten.

Zunächst wird der User erstellt:

[source,prompt]
----
useradd -m -s /bin/bash adminuser
----

Wir vergeben nun Passwörter für Unix:

[source,prompt]
----
passwd adminuser
----

und für Samba

[source,prompt]
----
smbpasswd -a adminuser
----

CAUTION: Verwenden Sie in den Passwörtern kein '§' da dies bei der Verbindung zum opsi-Service nicht erlaubt ist.

Nun wird die Gruppenmitgliedschaft eingerichtet und getestet mit der Befehlsfolge:

[source,prompt]
----
usermod -aG opsiadmin adminuser
getent group opsiadmin
----

Der getent-Befehl sollte dann so etwas ausgeben wie:
[source,prompt]
----
opsiadmin:x:1001:opsiconfd,adminuser
----

NOTE: Wenn 'root' nicht Mitglied von {opsi-admin-group} ist, kann er unter Umständen nicht alle opsi-Administrationskommandos ausführen! +

Für alltägliche Arbeiten auf Ihrem opsi-Server ist es in der Regel nicht notwendig
als 'root' zu arbeiten.
Unsere Empfehlung ist es einen normalen Benutzer zu nutzen und `sudo` zu verwenden,
wann immer administrative Privilegien benötigt werden.

Alle User, die Produkte packen (`opsi-makepackage`), installieren (`opsi-package-manager`) oder Konfigurationsdateien manuell bearbeiten wollen, müssen zusätzlich in der Gruppe 'pcpatch' sein:

[source,prompt]
----
usermod -aG pcpatch adminuser
----

Der Test

[source,prompt]
----
getent group pcpatch
----
ergibt +
'pcpatch:x:992:adminuser'

Damit Mitglieder der Gruppe 'pcpatch' den Befehl `sudo opsi-set-rights` nutzen können führen Sie bitte aus:
[source,prompt]
----
opsi-setup --patch-sudoers-file
----

Dann kann `opsi-set-rights` (macht das selbe wie `opsi-setup --set-rights`),
nicht nur als root, sondern auch per sudo von Mitgliedern der Gruppe pcpatch (bzw. opsifileadmins) aufgerufen werden. +

Beispiel: +
[source,prompt]
----
sudo opsi-set-rights .
----


[[opsi-getting-started-installation-config-dhcp]]
=== DHCP-Konfiguration

Eine korrekt funktionierende Namensauflösung und DHCP ist für das Funktionieren von opsi essentiell.
Um die Installation zu vereinfachen, ist die von uib bereitgestellte VM schon mit einem DHCP-Server ausgestattet.
Auf der anderen Seite ist in vielen Umgebungen in der Regel bereits ein DHCP-Server schon vorhanden, der weiter genutzt werden soll.
Daher werden im folgenden beide Alternativen beschrieben.


[[opsi-getting-started-installation-config-dhcp-at-opsi]]
==== Alternative: DHCP auf dem {opsi-Server}

.Vorkonfigurierte VM:
In der vorkonfigurieren opsi VM ist bereits ein DHCP-Server installiert. +
Der DHCP-Server auf der {opsi-Server} VM ist so konfiguriert, das er keine freien leases hat, also keine IP-Nummern an unbekannte Rechner vergibt. Wenn Sie im {opsi-configed} einen Client erzeugen, müssen Sie daher IP-Nummer und MAC-Adresse angeben, da diese in die `/etc/dhcp/dhcpd.conf` eingetragen und danach der DHCP Dienst neu gestartet wird.

.Eigene Installation:
Wenn Sie den opsi-Server als DHCP-Server verwenden möchten, müssen Sie daher das entsprechende Paket manuell nachinstallieren

z.B. mit
[source,prompt]
----
apt install isc-dhcp-server
----

Nach der Installation muss die Konfigurationsdatei noch angepasst werden mit dem Befehl:
[source,prompt]
----
opsi-setup --auto-configure-dhcpd
----
Um den DHCP Server neu zu starten, so wie in `/etc/opsi/backends/dhcpd.conf` beschrieben,  ist ein entsprechender Eintrag in der `/etc/sudoers` notwendig. Dieser wird mit folgendem Befehl erstellt.
[source,prompt]
----
opsi-setup --patch-sudoers-file
----
Die Rechte der `/etc/dhcp/dhcpd.conf` sollten wie folgt aussehen.
[source,prompt]
----
-rw-r--r-- 1 opsiconfd opsiadmin 80174 Dec 22 14:37 /etc/dhcp/dhcpd.conf
----
[[opsi-getting-started-installation-config-at-other-server]]
==== Alternative: externer DHCP-Server

.Vorkonfigurierte VM:

Wenn Sie die opsi-VM verwenden dann können Sie den DHCP-Server deinstallieren.

Dazu führen Sie den folgenden Befehl aus:
[source,prompt]
----
apt remove isc-dhcp-server
----

.Eigene Installation:
Bei einer eigenen Installation wird seit opsi 4.0.3 nicht mehr automatisch ein DHCP-Server installiert.

Nun müssen Sie den externen DHCP-Server so konfigurieren, dass er ein PXE-Boot über den {opsi-Server} ermöglicht. Wenn Ihr DHCP-Server auf einem Linux läuft, sind folgende Einträge in der Konfigurationsdatei des dhcpd (z.B. `/etc/dhcp/dhcpd.conf`) für die Clients notwendig:

[source,configfile]
----
next-server <ip of opsi-server>;
filename "linux/pxelinux.0";
----

Wobei '<ip of opsi-server>' durch die IP-Adresse des {opsi-Server}s zu ersetzen ist.

Läuft der opsi-Server auf openSUSE oder SLES, so ist `filename=opsi/pxelinux.0`. +
Läuft der opsi-Server auf UCS, so ist `filename=pxelinux.0`.

Bei einem Windows-Server sind die entsprechenden Einträge 'Startserver (Option 66)' und 'Startfile (Option 67)'.

Wenn Sie im {opsi-configed} einen Client erzeugen, müssen Sie die MAC-Adresse angeben, aber keine IP-Nummer.


[[opsi-getting-started-installation-config-dhcp-backend]]
==== Überprüfung/Anpassung Backendkonfiguration für DHCP-Nutzung

Je nachdem ob der interne oder ein externer DHCP-Server verwendet wird, muss die Konfiguration von opsi angepasst werden.

In der Datei `/etc/opsi/backendManager/dispatch.conf` ist festgelegt, welche Backends von opsi zum Einsatz kommen (bspw. 'file', 'mysql').

In den Zeilen `backend_.*` und `host_.*` wird u.a. gesteuert, ob der {opsi-Server} auch die lokale DHCP-Konfiguration – also die Zuweisung von Internet-Adressen zu den Hardware-Adressen der Netzwerkkarten – mit übernimmt.
Dies muss so eingerichtet sein, wenn für die {opsi-Client}s die DHCP-Einträge durch die opsi-Konfigurationsaufrufe erzeugt werden sollen. Der entsprechende Eintrag mit `file` Backend muss dann z.B. lauten:
[source,configfile]
----
backend_.*         : file, opsipxeconfd, dhcpd
host_.*            : file, opsipxeconfd, dhcpd
----

Wenn der {opsi-Server} den DHCP-Dienst nicht bereitstellen soll (weil ein anderer Server im lokalen Netz diese Aufgabe übernimmt und auch für die {opsi-Client}s gepflegt wird), so wird das Backend `dhcpd` nicht benötigt:

[source,configfile]
----
backend_.*         : file, opsipxeconfd
host_.*            : file, opsipxeconfd
----

Nach Anpassung der Backendkonfiguration muss die Konfiguration initialisiert und der {opsiconfd} neu gestartet werden:

[source,prompt]
----
opsi-setup --init-current-config
opsi-set-rights
systemctl restart opsiconfd.service
systemctl restart opsipxeconfd.service
----


[[opsi-getting-started-installation-config-nameresolution]]
=== Konfiguration der Namensauflösung

Für die Installation der Software auf den Clients vor dem Login müssen allgemein nur die Clients wissen, wie sie den {opsi-Server} erreichen.

opsi kennt inzwischen allerdings auch eine Reihe von 'Push' Funktionalitäten wie z.B. 'on_demand' Installationen, Nachrichten versenden, Remote-Control Software starten, Session Informationen abrufen.

Für all diese Funktionen muss der Server die Clients erreichen können und dazu muss er die gültige IP-Nummer des Clients zu ermitteln. Wie dies am besten geschieht hängt von der konkreten Konfiguration von DNS und DHCP ab. Die Zahl der möglichen Varianten ist hier sehr groß.

Daher seien hier zwei typische Extreme aufgeführt:

. Die Clients sind nicht im DNS und haben dynamisch zugewiesene wechselnde IP-Nummern.

. Die IP-Nummern aller laufenden Clients lassen sich immer korrekt beim DNS abfragen.

Um den opsi-server nun an die unterschiedlichen Gegebenheiten anpassen zu können gibt es zwei Konfigurationen die Sie ändern können:

* Der Eintrag +resolveHostAddress+ in der Datei `/etc/opsi/backends/hostcontrol.conf` +
Steht diese Option auf 'True', wird bei einem Verbindungsaufbau vom {opsi-server} zu einem opsi-client die IP-Adresse des Clients bevorzugt über die Namensauflösung ermittelt. Um die im Backend von opsi hinterlegte IP-Adresse zu bevorzugen ist die Option auf 'False' zu setzen.

* Der Eintrag +update ip+ in der Datei `/etc/opsi/opsiconfd.conf` +
Steht dieser Eintrag auf 'yes', so wird wann immer der opsi-server von einem Client eine IP-Adresse empfängt (z.B. bei jedem Kontakt die der Client auf nimmt) die IP-Datenbank des opsi-servers aktualisiert. Der Default ist 'yes'.

Für die oben aufgeführte Variante 1, ist es wahrscheinlich schlau +resolveHostAddress+ auf 'False' zu setzen und +update ip+ auf 'yes'.

Für die oben aufgeführte Variante 2, ist die bessere Konfiguration  +resolveHostAddress+ auf 'True' zu setzen und +update ip+ auf 'no'.

Welche Kombination bei Ihnen am besten passt, müssen Sie anhand Ihrer Gegebenheiten selbst ermitteln.

Wenn Sie an diesen Konfigurationen etwas geändert haben, so starten Sie den opsiconfd neu:

[source,prompt]
----
systemctl restart opsiconfd.service
----


[[opsi-getting-started-installation-config-get-essential-products]]
=== Einspielen der minimalen opsi-Produkte

Zur Verteilung von Software mit opsi stehen fertige Produkte zur Installation bereit.
Diese beinhalten unter anderem den Agent, welcher für das Management auf Clients installiert werden muss.

Es gibt eine automatische und manuelle Möglichkeit dies zu tun.
Der automatisierte Weg wird empfohlen.

Hierzu gibt es das Werkzeug `opsi-package-updater`, welches wie in '/etc/opsi/opsi-package-updater.conf' konfiguriert, automatisch die aktuellen Pakete vom opsi Repository holt und auf dem Server installiert.

[source,prompt]
----
opsi-package-updater -v install
----

Muss für den Zugriff auf das Internet die Verbindung über einen Proxy geleitet werden, so muss dieser in den `.repo`-Konfigurationsdateien unter `/etc/opsi/package-updater.repos.d/` als Wert für `proxy` eingetragen werden.
Ab Version 4.1.1.33 von opsi-utils kann ein globaler Proxy in `/etc/opsi/opsi-package-updater.conf` konfiguriert werden.

[source,configfile]
----
[repository_uib_windows]
…
proxy =
----

Sollen später installierte Pakete aktualisiert werden, so kann dies mit dem folgenden Befehl gemacht werden:
[source,prompt]
----
opsi-package-updater -v update
----

Weitere Informationen zum `opsi-package-updater` können im Handbuch gefunden werden.

NOTE: Bitte beachten Sie, dass OS-Installationsprodukte wie z.B. {opsi-client-os}, nach der Installation nicht sofort einsatzbereit sind. Die Installation muss noch durch die Installationsdateien des entsprechenden Installationsmediums ergänzt werden (siehe: <<opsi-getting-started-firststeps-osinstall-fill-base-packages>>).

[[opsi-getting-started-installation-config-get-essential-products-manually]]
=== Manuelles Einspielen der opsi-Produkte

Es gibt außerdem die Möglichkeit manuell die Pakete herunter zu laden und zu installieren.

Holen Sie sich die aktuellen opsi-Pakete im `.opsi`-Paketformat.
Die Pakete finden Sie unter http://download.uib.de/opsi4.1/stable/packages/windows/ in den Verzeichnissen `netboot/`, `localboot/`, für Linux-Clients zusätzlich unter `https://download.uib.de/opsi4.1/stable/packages/linux/`.

Wir empfehlen die .opsi-Dateien unter `/var/lib/opsi/repository` zu speichern.
Zum Sicherstellen, dass opsiconfd auf die Dateien zugreifen kann, sollte `opsi-set-rights /var/lib/opsi/repository` ausgeführt werden.

Nach dem Download müssen Sie die Pakete auf dem Server mit dem Befehl `opsi-package-manager -i <paketname>.opsi` installiert werden

[[opsi-getting-started-installation-config-modules]]
=== Einspielen / Überprüfen der Freischaltdatei

Auch wenn opsi Opensource ist, so gibt es einige Zusatz-Komponenten, die im Rahmen eines Kofinanzierungsprojektes erstellt wurden und evtl. noch nicht Opensource bzw. noch nicht kostenlos sind. Sobald die Entwicklungskosten eingenommen sind, werden auch diese Module Opensource bzw. kostenlos sein. Um bis dahin die Verwendung dieser Module den zahlenden Kunden und zu Evaluierungszwecken zu gestatten, gibt es die Freischaltdatei `/etc/opsi/modules`, welche durch eine elektronische Signatur vor unautorisierter Veränderung geschützt ist. Ist diese Datei nicht vorhanden, so funktionieren nur die 'freien' Module von opsi.

Um zu Evaluierungszwecken eine zeitlich befristet gültige Freischaltdatei zu erhalten, wenden Sie sich an info@uib.de. Im Rahmen einer Beteiligung an den entsprechenden Kofinanzierungsprojekten erhalten Sie eine unbefristet gültige Freischaltdatei. Diese können Sie mit root-Rechten nach /etc/opsi kopieren.

Führen Sie danach den folgenden Befehl aus:

[source,prompt]
----
opsi-set-rights
----

Kontrollieren Sie die Freischaltung mit einer der folgenden Methoden:

Im {opsi-configed} können Sie sich über den Menüpunkt 'Hilfe/opsi-Module' den Status Ihrer Freischaltung anzeigen lassen.

Mit der Methode `backend_info` können Sie mit `opsi-admin` überprüfen, welche Module freigeschaltet sind. (Hinweis: Geben Sie die weder die Datei noch die Ausgabe dieses Befehls öffentlich weiter, zumindest nicht ohne die Signatur zu löschen).
[source,prompt]
----
opsi-admin -d method backend_info
----

Beispiel-Ausgabe:
[source,configfile]
----
{
"opsiVersion" : "4.0.1",
"modules" :
          {
          "customer" : "uib GmbH",
          "vista" : true,
          "vpn" : true,
          "license_management" : true,
          "expires" : "never",
          "valid" : true,
          "multiplex" : true,
          "signature" : "DIES-IST-KEINE-ECHTE-SIGNATUR",
          "treeview" : true,
          "mysql_backend" : true
          }
}
----

Wir weisen darauf hin, dass die modules-Datei nur für zusätzliche Funktionalitäten benötigt wird und diese nicht für den „normalen“ Betrieb von opsi benötigt wird.


[[opsi-getting-started-installation-config-configed]]
=== Start der Management-Oberfläche ({opsi-configed})

Opsi bietet mit dem {opsi-configed} ein komfortables Management Interface.

Das Management Interface wird als lokale Anwendung auf den Administrations-PCs installiert.
Rufen Sie in Ihrem Browser die Adresse `https://<opsidepotserver>:4447/` auf.
Dort finden Sie Links zu Installern für unterschiedliche Betriebssysteme.

Alternativ finden Sie entsprechende Installer unter link:https://download.uib.de/opsi4.1/misc/helper/[].

IMPORTANT: Der Windows-Installer muss mit administrativen Rechten ausgeführt werden.
Dazu öffnen Sie mit Rechtsclick das Contextmenü des Installers und wählen dort 'Als Administrator ausführen'.

Ist ein PC mit dem Management Interface ausgestattet, so können weitere PCs später einfach über das Localboot-Produkt *opsi-configed* mit dem Interface ausgestattet werden.

Loggen Sie sich als ein User ein, der Mitglied der Gruppe {opsi-admin-group} ist.

Die Bedienung des Management-Interfaces ist weitgehend selbsterklärend.
Sie finden eine ausführliche Anleitung im opsi-Handbuch.

NOTE: Änderungen im opsi-Management Interface müssen gespeichert werden, bevor Sie wirksam werden und Veränderungen der Daten müssen vom Server über 'Daten neu laden' geholt werden.


[[opsi-getting-started-installation-config-ports]]
=== Von opsi benötigte Netzwerk-Ports

Dies ist eine Übersicht über verwendete Ports und Netzwerk-Protokolle.

* opsi-server Webservice: TCP 4447 +
Client zum Server, Depot zum Server (bidirektional, Verbindungen via localhost).

* opsi-client Webservice: TCP 4441 +
Server zum Client, Verbindung vom Client an sich selbst via localhost.

* opsi-client Webservice: TCP 4442 +
Verbindung vom Client an sich selbst via localhost.

* opsi-client Notifier: TCP 45000 - 65536 +
Verbindung vom Client an sich selbst via localhost. +
Ein zufälliger Port aus dem gegebenen Bereich wird ausgewählt.

* TFTP: UDP 69 +
Client zu Server.

* CIFS/SMB: UDP 137 / UDP 138 (netbios) / TCP 139 / TCP 445 +
Client zu Server (bidirektional). +
Abhängig von der Version des Client-Betriebssystems.

* WEBDAV: TCP 80
* WINEXE: UDP 137 / UDP 138 (netbios) / TCP 139 / TCP 445
Server zu Client (bidirektional). +
Abhängig von der Version des Client-Betriebssystems.

* SSH (optional): TCP 22

* DNS: TCP 53

* WakeOnLan (WOL): UDP 7 / UDP 9 / UDP 12287 +
Server zum Client. Diese Ports sind konfigurierbar.

* HTTP: TCP 80 +
Z.B. Um Server updates von http://download.opensuse.org/ zu laden

* HTTPS: TCP 443 +
Um updates von https://download.uib.de zu laden (opsi-package-updater)


[[opsi-getting-started-firststeps-software-deployment-client-integration]]
== Integration vorhandener Windows-Clients in opsi

Um vorhandene Windows-Clients in opsi aufzunehmen, muss auf diesen der {opsi-client-agent} installiert werden. Dies kann auf mehrere Arten durchgeführt werden. Nach dem Sie wie im Folgenden beschrieben den {opsi-client-agent} installiert haben, erscheint der Client auch in der Client-Liste des {opsi-configed}.

Grundsätzlich gibt es die Möglichkeit die Installation des Agents <<opsi-getting-started-firststeps-software-deployment-client-integration-service-setup,auf dem Client auszuführen>> oder <<opsi-getting-started-firststeps-software-deployment-client-integration-opsi-deploy,vom Server aus>> die Installation anzustoßen.

Für einen Massen-Rollout des Agents eignet sich <<opsi-getting-started-firststeps-software-deployment-client-integration-opsi-deploy,opsi-deploy-client-agent>>.
Falls bereits andere Möglichkeit existiert Software zu verteilen, so ist es ebenfalls möglich darpber den opsi-client-agent zu verteilen und das im Paket mitgelieferte Script `silent_setup.cmd` auszuführen.

Sobald der Agent installiert ist, können vorhandene opsi-Produkte auf diesen Clients <<opsi-getting-started-firststeps-software-deployment-product-tests,installiert>> werden.


[[opsi-getting-started-firststeps-software-deployment-client-integration-service-setup]]
=== Verwendung von service_setup.cmd

Diese Methode dient zur Installation auf einzelnen Rechnern.


[[opsi-getting-started-firststeps-software-deployment-client-integration-service-setup_nt6]]
===== service_setup.cmd auf Windows NT6


. Loggen Sie sich mit administrativen Rechten auf dem Client ein.
. Mounten Sie den share `\\<opsiserver>\opsi_depot` auf einen Laufwerksbuchstaben.
. Starten Sie das Script `opsi-client-agent\service_setup.cmd` +
Starten Sie da Script nicht elevated (also rechte Maustaste: 'als Administrator') sonst kann das Script evtl. nicht gestartet werden, da eine elevated Prozess kein Zugriff auf ein Netzlaufwerk hat.
. Das Skript kopiert die notwendigen Dateien in ein temporäres lokales Verzeichnis und startet dann zur eigentlichen Installation opsi-script (winst32.exe) elevated. Daher bekommen Sie an dieser Stelle evtl. eine UAC Anfrage.
. Das Skript nimmt per opsi-Webservice Kontakt zum Server auf um serverseitig den Client zu erzeugen und den pckey zu erfahren. Dies erfolgt zunächst mit der in der config.ini eingetragenen user/password Kombination. Schlägt dies fehl, so erscheint ein Login-Fenster mit Service-URL ({opsi-configserver}), Benutzername und Passwort. Hier wird ein Benutzer benötigt, der Mitglied der Gruppe 'opsiadmin' ist. Möglich ist auch ein Benutzer, welcher nur die Methode `host_createOpsiClient` ausführen darf.

CAUTION: Der Client rebootet nach der Installation.


[[opsi-getting-started-firststeps-software-deployment-client-integration-service-setup_nt5]]
===== service_setup_NT5.cmd auf Windows NT5


. Loggen Sie sich mit administrativen Rechten auf dem Client ein.
. Mounten Sie den share `\\<opsiserver>\opsi_depot` auf einen Laufwerksbuchstaben.
. Starten Sie das Script `opsi-client-agent\service_setup_NT5.cmd`
. Das Skript kopiert die notwendigen Dateien in ein temporäres lokales Verzeichnis und startet dann zur eigentlichen Installation opsi-script (winst32.exe).
. Das Skript nimmt per opsi-Webservice Kontakt zum Server auf um serverseitig den Client zu erzeugen und den pckey zu erfahren. Dies erfolgt zunächst mit der in der config.ini eingetragenen user/password Kombination. Schlägt dies fehl, so erscheint ein Login-Fenster mit Service-URL ({opsi-configserver}), Benutzername und Passwort. Hier wird ein Benutzer benötigt, der Mitglied der Gruppe 'opsiadmin' ist.

CAUTION: Der Client rebootet nach der Installation.


[[opsi-getting-started-firststeps-software-deployment-client-integration-opsi-deploy]]
=== Verwendung von opsi-deploy-client-agent

Das `opsi-deploy-client-agent` Skript verteilt den {opsi-client-agent} direkt vom {opsi-server} auf die Clients.
Es ist hiermit einfach möglich eine große Menge an Clients vom Server aus in eine opsi-Umgebung zu integrieren.

Voraussetzung hierfür sind bei den Clients:

* ein offener c$ share
* ein offener admin$ share
* ein administrativer account

Auf dem Server muss das Programm `winexe` vorhanden sein.
Diese ist Teil des Pakets `opsi-windows-support`.

Das Skript erzeugt serverseitig den Client, kopiert die Installations-Dateien und Konfigurationsinformationen, wie bspw. den pckey, auf den Client und startet dort die Installation.

Das Kopieren der Installationsdateien kann auf zwei Wegen geschehen.
Die erste Variante wird mittels 'mount' C$ auf dem Server verfügbar machen und dort die Daten zur Installation hin kopieren.
Die zweite Variante wird den c$-Share des Clients mittels 'smbclient'
auf dem Server einhängen und dann die Installationsdateien dorthin
kopieren.

Mit dem `opsi-deploy-client-agent` Skript kann auch eine ganze Liste von Clients bearbeitet werden.
Dazu können entweder beliebig viele Clients als letzter Parameter übergeben werden oder mit der Option '-f' die Clients aus einer Datei eingelesen werden.
Bei der Verwendung einer Datei, muss in jeder Zeile ein Client stehen.

Das Script kann mit IP-Adressen, Hostnamen und FQDNs arbeiten. Es wird versuchen automatisch zu erkennen welche Art von Adresse übergeben wurde.

Mit dem `opsi-deploy-client-agent` Skript kann auch eine ganze List von Clients bearbeitet werden. Das Skript findet sich unter `/var/lib/opsi/depot/opsi-client-agent` +
Führen Sie das Script mit 'root' Rechten aus.
Falls das Script nicht ausführbar ist, so können Sie dieses Problem mit dem folgenden Befehl beheben: +
`opsi-set-rights /var/lib/opsi/depot/opsi-client-agent/opsi-deploy-client-agent`

[source,prompt]
----
bonifax:/home/uib/oertel# cd /var/lib/opsi/depot/opsi-client-agent
bonifax:/var/lib/opsi/depot/opsi-client-agent# ./opsi-deploy-client-agent --help
usage: opsi-deploy-client-agent [-h] [--version] [--verbose]
                                [--debug-file DEBUGFILE] [--username USERNAME]
                                [--password PASSWORD]
                                [--use-fqdn | --use-hostname | --use-ip-address]
                                [--ignore-failed-ping]
                                [--reboot | --shutdown | --start-opsiclientd]
                                [--hosts-from-file HOSTFILE]
                                [--skip-existing-clients]
                                [--threads MAXTHREADS] [--smbclient | --mount]
                                [--keep-client-on-failure | --remove-client-on-failure]
                                [host [host ...]]

Deploy opsi client agent to the specified clients. The c$ and admin$ must be
accessible on every client. Simple File Sharing (Folder Options) should be
disabled on the Windows machine.

positional arguments:
  host                  The hosts to deploy the opsi-client-agent to.

optional arguments:
  -h, --help            show this help message and exit
  --version, -V         show program's version number and exit
  --verbose, -v         increase verbosity (can be used multiple times)
  --debug-file DEBUGFILE
                        Write debug output to given file.
  --username USERNAME, -u USERNAME
                        username for authentication (default: Administrator).
                        Example for a domain account: -u
                        "<DOMAIN>\\<username>"
  --password PASSWORD, -p PASSWORD
                        password for authentication
  --use-fqdn, -c        Use FQDN to connect to client.
  --use-hostname        Use hostname to connect to client.
  --use-ip-address      Use IP address to connect to client.
  --ignore-failed-ping, -x
                        try installation even if ping fails
  --reboot, -r          reboot computer after installation
  --shutdown, -s        shutdown computer after installation
  --start-opsiclientd, -o
                        start opsiclientd service after installation
  --hosts-from-file HOSTFILE, -f HOSTFILE
                        File containing addresses of hosts (one per line).If
                        there is a space followed by text after the address
                        this will be used as client description for new
                        clients.
  --skip-existing-clients, -S
                        skip known opsi clients
  --threads MAXTHREADS, -t MAXTHREADS
                        number of concurrent deployment threads
  --smbclient           Mount the client's C$-share via smbclient.
  --mount               Mount the client's C$-share via normal mount on the
                        server for copying the files. This imitates the
                        behaviour of the 'old' script.
  --keep-client-on-failure
                        If the client was created in opsi through this script
                        it will not be removed in case of failure. (DEFAULT)
  --remove-client-on-failure
                        If the client was created in opsi through this script
                        it will be removed in case of failure.
----


[[opsi-getting-started-firststeps-software-deployment-product-tests]]
== Rollout existierender Produkte

Für den Rollout von Software auf Clients muss auf diesen der 'opsi-client-agent' installiert sein.
Dieser kann auf <<opsi-getting-started-firststeps-software-deployment-client-integration,bestehende Rechner>> ausgerollt werden.
Bei einer <<opsi-getting-started-firststeps-osinstall,Betriebssysteminstallation>> über opsi wird 'opsi-client-agent' automatisch installiert.


[[opsi-getting-started-firststeps-software-deployment-product-tests-configed]]
=== Verwendung von opsi Standard Produkten: opsi-configed

Zu den Standard Produkten gehört das Produkt `opsi-configed` welches das opsi Managementinterface als Anwendung auf einem Rechner installiert. Da diese Anwendung eine Java-Anwendung ist, wird ein JavaRE mitgeliefert.

Wählen Sie im '{opsi-configed}', Modus 'Client-Konfiguration', unter dem Reiter 'Clients' den betreffenden Client aus.

Wenn noch nicht geschehen, aktualisieren Sie den Datenbestand des {opsi-configed}s mittels 'Datei/Daten neu laden' bzw. Anklicken des entsprechenden Icons.

Wechseln Sie zum Reiter 'Produktkonfiguration', klicken Sie in die Spalte 'Angefordert' für das Produkt +opsi-configed+, daraufhin öffnet sich eine Liste/Dropdown-Menü und dort wählen Sie die Aktion 'setup'.

Der Haken in der Icon-Menüleiste sollte seine Farbe auf Rot wechseln. Wenn Sie ihn anklicken, werden die neuen Einstellungen zum {opsi-Server} übermittelt, im Anschluss ist seine Farbe wieder grün.

Booten Sie dann den Client. Er sollte jetzt den +opsi-client-agent+ starten und das Produkt +opsi-configed+ installieren. Nach Abschluß der Installation sollten Sie im `Startmenü` den Punkt `opsi-configed` finden.


[[opsi-getting-started-firststeps-software-deployment-product-tests-inventory]]
=== Inventarisierung mit dem localboot-Produkten hwaudit und swaudit

Wählen Sie im '{opsi-configed}', Modus 'Client-Konfiguration', unter dem Reiter 'Clients' den betreffenden Client aus.

Wenn noch nicht geschehen, aktualisieren Sie den Datenbestand des {opsi-configed}s mittels 'Datei/Daten neu laden' bzw. Anklicken des entsprechenden Icons.

Wechseln Sie zum Reiter 'Produktkonfiguration', klicken Sie in die Spalte 'Angefordert' für das Produkt +hwaudit+, daraufhin öffnet sich eine Liste/Dropdown-Menü und dort wählen Sie die Aktion 'setup'. Wiederholen Sie das für das Produkt +swaudit+.

Der Haken in der Icon-Menüleiste sollte seine Farbe auf Rot wechseln. Wenn Sie ihn anklicken, werden die neuen Einstellungen zum {opsi-Server} übermittelt, im Anschluss ist seine Farbe wieder grün.

Booten Sie dann den Client. Er sollte jetzt den +opsi-client-agent+ starten und die Produkte +hwaudit+ und +swaudit+ installieren. Bei +hwaudit+ und +swaudit+ wird Hard- bzw Softwareinformationen erhoben und zum {opsi-Server} übermittelt. Die gesammelten Informationen werden unter den Tabs 'Hardwareinformationen' bzw. 'Software-Inventur' angezeigt.


[[opsi-getting-started-firststeps-software-deployment-product-tests-hwinvent]]
[[opsi-getting-started-firststeps-osinstall-tests-hwinvent]]
=== Hardware-Inventarisierung mit dem netboot-Produkt hwinvent

Sofern Sie bereits einen Client eingerichtet haben und das Produkt 'hwinvent' installiert ist, können Sie bereits etwas Nützliches mit opsi tun:

Wählen Sie im {opsi-configed}, Modus 'Client-Konfiguration', unter dem Reiter Client-Auswahl den betreffenden Client aus.
Wenn noch nicht geschehen, aktualisieren Sie den Datenbestand des {opsi-configed}s mittels +Datei/Daten neu laden+ bzw. Anklicken des entsprechenden Icons.
Wechseln Sie zum Reiter 'Netboot-Produkte', gehen Sie in das Feld +Anstehende Aktion+ des Produkts +hwinvent+ und wählen Sie in der dort angebotenen Liste die Aktion 'setup'.
Der Haken in der Icon-Menüleiste sollte seine Farbe auf Rot wechseln.
Wenn Sie ihn anklicken, werden die neuen Einstellungen zum {opsi-Server} übermittelt und die Farbe des Hakens wechselt im Anschluss wieder zu grün.

Booten Sie dann den Client. Er sollte jetzt per PXE über das Netz ein Linux-Image ziehen, das die Hardware des PCs scannt und dann den Rechner rebootet (wenn der Rechner nicht ansonsten schon eingerichtet war, kommt im Anschluss korrekterweise die Meldung, dass auf der Platte kein Betriebssystem installiert ist).

Das Ergebnis des Hardware-Scans hat der PC zum {opsi-Server} übermittelt. Es ist unter dem Reiter "Hardware-Informationen" einzusehen.

NOTE: Sollte nach dem Laden des bootimages der Bildschirm schwarz bleiben oder die Netzwerkkarte nicht (korrekt) funktionieren, so muss für diese konkrete Hardware evtl. die Startparameter des bootimages angepasst werden. +
Dies können Sie im '{opsi-configed}' im Tab 'Hostparameter' am Eintrag 'opsi-linux-bootimage.append' tun. Details hierzu finden Sie im opsi-manual im Kapitel 'Netboot Produkte'.


[[opsi-getting-started-firststeps-osinstall-create-client]]
== Anlegen eines neuen opsi-Clients

Zur Verwaltung von Rechnern müssen diese dem {opsi-Server} bekannt sein.
Dieses Kapitel beschreibt unterschiedliche Möglichkeiten einen Client in opsi für eine spätere Verwaltung anzulegen.

Clients werden dem {opsi-Server} ebenfalls bekannt gemacht, wenn auf bestehenden Computern der <<opsi-getting-started-firststeps-software-deployment-client-integration,opsi-client-agent>> installiert wird.


[[opsi-getting-started-firststeps-osinstall-create-client-configed]]
=== Anlegen eines neuen opsi-Clients über die grafische Management-Oberfläche

Den Client können Sie mit der grafischen Oberfläche {opsi-configed} zum {opsi-Server} hinzufügen.

Wählen Sie den Menü-Punkt 'OpsiClient / Neuen opsi-Client erstellen' und geben Sie ein:

* Client-Name
* DNS Domäne (falls abweichend von der Vorgabe)
* Beschreibung
* IP-Adresse (wird benötigt, falls kein DNS zur Namensauflösung für diesen Client verwendet werden kann)
* MAC-Adresse (wird benötigt, falls der {opsi-Server} DHCP-Server ist oder PXE boot mit dem Client durchgeführt werden soll).

Nach Eingabeabschluss wird der Client dem {opsi-Server} bekanntgemacht und gleichzeitig, falls der {opsi-Server} DHCP Server ist, in der DHCP-Konfiguration als PXE-Client angelegt.

Die Liste der eingerichteten opsi-Clients kann jederzeit im {opsi-configed} Modus „Client-Konfiguration“ unter dem Reiter Client-Auswahl eingesehen werden.


[[opsi-getting-started-firststeps-osinstall-create-client-commandline]]
=== Anlegen eines neuen opsi-Clients über die Kommandozeile

Ein Client kann auf der Kommandozeile per `opsi-admin` erzeugt werden.

Die Syntax ist die folgende:
[source,prompt]
----
opsi-admin -d method host_createOpsiClient <client-id> [opsiHostKey] [description] [notes] [hardwareAddress] [ipAddress] [inventoryNumber] [oneTimePassword] [created] [lastSeen]
----

Fehlende Werte verwenden in der Regel einen Standardwert - die meisten Felder sind dann leer.


Der folgende Befehl wird den Client `testclient.domain.local` mit einem zufälligen Host Schlüssel,
der Beschreibung `Testclient`, keinen Notizen, der MAC-Addresse `00:0c:29:12:34:56` und der IP-Adresse `192.0.2.1` anlegen:

[source,prompt]
----
opsi-admin -d method host_createOpsiClient testclient.domain.local "null" "Testclient" "" 00:0c:29:12:34:56 192.0.2.1
----


[[opsi-getting-started-firststeps-osinstall-create-client-bootcd]]
=== Anlegen eines neuen opsi-Clients mit Hilfe der opsi-client-bootcd

Auf der Downloadseite von uib finden Sie unter link:https://download.uib.de/opsi4.1/boot-cd/[] verschiedene ISO-Abbilder der 'opsi-client-boot-cd'.
Laden Sie sich das Neueste herunter und brennen es auf eine CD.

Starten Sie den Rechner von der CD.
Sie sollten dann folgendes Bild sehen:

.Startbild opsi-client-boot-cd
image::opsi-client-boot-cd.png["Screenshot: Startbild opsi-client-boot-cd",width=400]

Wählen Sie 'Opsi starten'. Nach einer Weile wird folgender Bildschirm erscheinen. Wenn Ihr DHCP-Server IP-Adressen an unbekannte Rechner vergibt ist die Maske schon weitgehend ausgefüllt. Ansonsten müssen Sie es von Hand tun. In der Regel müssen Sie mindestens den Hostnamen vergeben.

.bootimage/boot-cd Konfigurationsmakse
image::boot-cd-config.png["Screenshot: bootimage/boot-cd Konfigurationsmaske",width=400]

Wählen Sie dann 'ok'.

.bootimage/boot-cd Auswahl Erstellungsmethode
image::boot-cd-select.png["Screenshot: bootimage/boot-cd Auswahl Erstellungsmethode",width=200]

Wählen Sie dann 'Admin account'. Sie erklären damit, dass der Client sich selbst beim {opsi-server} anmelden und erstellen soll. Dieser Vorgang muss natürlich autorisiert werden.

.bootimage/boot-cd Authentifizierungsmaske
image::boot-cd-authent.png["Screenshot: bootimage/boot-cd Authentifizierungsmaske",width=400]

Sie erhalten daher eine Loginmaske, bei der Sie sich als ein Mitglied der Gruppe {opsi-admin-group} authentifizieren müssen. Wenn dies Erfolgreich war, so teilt der Client dem Server seine Daten mit und der Client wird auf der Serverseite automatisch erstellt. Als nächstes fragt der Client die Liste der verfügbaren netboot Produkte ab und stellt Sie Ihnen zur Auswahl zur Verfügung.

.bootimage/boot-cd netboot Produktauswahl
image::boot-cd-product.png["Screenshot: bootimage/boot-cd netboot Produktauswahl",width=200]

Sie können jetzt direkt das zu installierende Betriebssystem (oder z.B. <<opsi-getting-started-firststeps-osinstall-tests-hwinvent,hwinvent>>) auswählen.


[[opsi-getting-started-firststeps-osinstall]]
== Installation eines neuen Windows PC über opsi (OS-Installation)

Nachfolgend wird beschrieben, wie ein bisher nicht mit einem Betriebssystem ausgestatter Computer per opsi ein Windows-Betriebssystem installiert bekommt.

Als Client-PC eignen sich reale oder virtuelle Rechner mit mindestens 2048 MB RAM, die über eine Netzwerkkarte mit Netzwerkboot-Unterstützung verfügen:
D.h., sie unterstützen das PXE-Protokoll zum Laden von Boot-Systemen via Netzwerk.
Der Netzwerkboot ist ggf. im Bios-Menü zu aktivieren bzw. an die erste Stelle der Bootoptionen zu rücken.

Virtuelle Hardware wird in der Regel gut von den Windows-Standardtreibern unterstützt, wenn Sie später eine Testinstallation von Windows durchführen.
Zur Installation von Windows auf neueren realen Rechnern müssen Sie möglicherweise vorab zusätzliche Treiber integrieren.
Für einen ersten Tests können Sie eine link:http://download.uib.de/vmware_pxeclient.zip[VMware-Appliance] verwenden, die einen _leeren_ Rechner abbildet und in _VMware Workstation Player_ laufen kann.

NOTE: Einige für die Bereitstellung von Windows mit opsi nützliche Werkzeuge werden über das Paket 'opsi-windows-support' installiert.


[[opsi-getting-started-firststeps-osinstall-fill-base-packages]]
=== Betriebssysteminstallation: Vervollständigen der Basispakete für Windows

In den zum Download empfohlenen Paketen sind lediglich Basispakete (Framework) enthalten. Diese dienen zur Installation der Windows-Betriebssysteme, müssen jedoch noch vervollständigt werden, da sie nicht die Dateien zur Installation des Betriebssystems selbst enthalten.

Zur automatischen Windows-Betriebssysteminstallation müssen Sie Ihre vorhandenen Original-Windows-Installationsdateien kopieren (und ggf und den Windows-Lizenzschlüssel auf dem Server ablegen).


[[opsi-getting-started-firststeps-osinstall-fill-base-packages-nt6]]
=== NT6 Familie: ab Win7 / 2008R2

Um diese Betriebssysteme installieren zu können, wird ein sogenanntes WinPE als 'Live-System' genutzt. Sie können es mit Hilfe eines opsi - Paketes erstellen (+opsi-winpe+), oder von Hand, wenn Sie möchten.
Grundsätzlich ist die Windows-Version des PE unabhängig von der zu installierenden Windows-Version. Wichtig ist vor allem die Verfügbarkeit von Festplatten- und Netzwerkkarten - Treibern an dieser Stelle.
Microsoft empfiehlt für 32-Bit Installationen ein 32-Bit PE, bzw. für 64-Bit ein 64-Bit PE.

'"Um eine 64-Bit-Version von Windows zu installieren, müssen Sie eine 64-Bit-Version von Windows PE verwenden. Um eine 32-Bit-Version von Windows zu installieren, müssen Sie eine 32-Bit-Version von Windows PE verwenden."' +
http://technet.microsoft.com/de-de/library/cc766093.aspx

In jedem Fall benötigen Sie ein "Assessment and Deployment Kit" (ADK, Win8.1 bzw 10), bzw dessen Vorgänger "Windows Automated Installation Kit" (Windows AIK; bis Windows 7), welches Sie auf ein unterstütztes Windows Betriebssystem (bevorzugt 64 Bit) installieren.: +

* link:https://docs.microsoft.com/en-us/windows-hardware/get-started/adk-install[Windows 10 / 8.1 ADK]

Installieren Sie das Windows PE Add-On für ADK (nach Möglichkeit auf einer 64Bit- Maschine) in den vorgeschlagenen Pfad unter `Program Files (x86)`. Wählen Sie nur die "Windows-Vorinstallationsumgebung (Windows PE)" aus; Abhängigkeiten werden automatisch ausgewählt. +

* link:http://www.microsoft.com/downloads/details.aspx?familyid=696DD665-9F76-4177-A811-39C26D3B3B34&displaylang=de[WAIK Windows 7]

Sie können das ISO brennen oder mounten und dann installieren.


[[opsi-getting-started-firststeps-osinstall-fill-base-packages-nt6-pe]]
==== Erstellen eines PE

Die einfachste Methode setzt voraus, dass Sie bereits einen Windows-Computer haben, auf dem sowohl der opsi-client-agent installiert ist, als auch das Windows ADK (Win8.1, Win10).
Der manuelle Weg wird anschließend unter <<opsi-getting-started-firststeps-osinstall-fill-base-packages-nt6-pe-manual>> beschrieben.

[[opsi-getting-started-firststeps-osinstall-fill-base-packages-nt6-pe-opsi]]
===== Automatisiertes Erstellen eines PE mit opsi

* Setzen Sie das Localboot-Produkt `opsi-winpe` für diesen Client auf `once`, wählen Sie ggf. in den Produkt-Properties rechts unten `x86` statt `x64` aus, und speichern Sie (Rechtsklick > Speichern)
* (sofern das opsi-Produkt `opsi-winpe` nicht vorhanden ist, installieren Sie es auf dem opsi - Server mittels `opsi-package-updater -v install opsi-winpe`)
* veranlassen Sie ein Installations - Event für diesen Client (zB Rechtsklick > _on-demand_, oder Reboot)
* Nach erfolgreichem Lauf dieser Aktion verschieben oder kopieren Sie den Inhalt des entstandenen Verzeichnisses  auf dem Client `C:\winpe_<ARCH>\media\` in das bereits existente Verzeichnis des zu installierenden Betriebssystems `\\opsiserver\opsi_depot_rw\<Betriebssystem>\winpe\`
* Führen Sie nun zuletzt folgenden Kommandozeilen - Befehl  auf dem neuen opsi-Server aus. Fertig.
[source,prompt]
----
opsi-set-rights
----


[[opsi-getting-started-firststeps-osinstall-fill-base-packages-nt6-pe-manual]]
===== Manuelles Erstellen eines PE für Windows 10 & Windows 8 (ADK)

Die Befehle für 32- und 64-Bit sind nahezu identisch, nur müssen die Einträge *<ARCH>* mit entweder *x86* , *amd64* oder *ia64* ersetzt werden.

Führen Sie Start => Programme => Windows Kits => Windows ADK => "Umgebung für Bereitstellungs- und Imageerstellungstools" aus; eine Eingabe-Aufforderung erscheint (in dieser sind in der Folge benötigte Umgebungsvariablen gesetzt)

* WinPE kopieren:
[source,prompt]
----
copype.cmd <ARCH> C:\winpe
----

* Image mounten/einhängen: +
[source,prompt]
----
dism /Mount-Wim /WimFile:C:\winpe\media\sources\boot.wim /index:1 /MountDir:c:\winpe\mount
----

* Startnet.cmd ersetzen:
[source,prompt]
----
echo c:\opsi\startnet.cmd > "C:\winpe\mount\Windows\System32\startnet.cmd"
----
(Hinweis: `c:\opsi\startnet.cmd` wird vom opsi-linuxbootimage in der `setup.py` erstellt nebst dem oben entfernten wpeinit-Aufruf).

* Image wieder aushängen:
[source,prompt]
----
dism /Unmount-Wim /MountDir:c:\winpe\mount /Commit
----

* Den Inhalt von `C:\winpe\ISO` nach `/var/lib/opsi/depot/<productid>/winpe` kopieren. +
Rechte anpassen (z.B.):
[source,prompt]
----
opsi-setup --set-rights /var/lib/opsi/depot/<productid>/winpe
----


===== Manuelles Erstellen eines PE für Windows 7 (WAIK)

Die Befehle für 32- und 64-Bit sind nahezu identisch, nur müssen die Einträge *<ARCH>* mit entweder *x86* , *amd64* oder *ia64* ersetzt werden.

Alles als Administrator aus der Eingabeaufforderung mit erweiterten Rechten ausführen (Start => Programme => Zubehör =>mit rechter Maustaste auf "Eingabeaufforderung" => Ausführen als ... => Administrator)

* WinPE kopieren:
[source,prompt]
----
"%ProgramFiles%\Windows AIK\Tools\PETools\copype.cmd" <ARCH> C:\winpe
----

* Image mounten/einhängen: +
[source,prompt]
----
"%ProgramFiles%\Windows AIK\Tools\<ARCH>\imagex.exe" /mountrw "C:\winpe\winpe.wim" 1 "C:\winpe\mount"
----

* Startnet.cmd ersetzen:
[source,prompt]
----
echo c:\opsi\startnet.cmd > "C:\winpe\mount\Windows\System32\startnet.cmd"
----
(Hinweis: `c:\opsi\startnet.cmd` wird vom opsi-linuxbootimage in der `setup.py` erstellt nebst dem oben entfernten wpeinit-Aufruf).

* Image wieder aushängen:
[source,prompt]
----
"%ProgramFiles%\Windows AIK\Tools\<ARCH>\imagex.exe" /commit /unmount "C:\winpe\mount"
----

* Verschieben des fertigen WinPE (von dort werden mehrere Files auf den Server verschoben).
[source,prompt]
----
move "C:\winpe\winpe.wim" "C:\winpe\ISO\sources\boot.wim"
----

* Den Inhalt von `C:\winpe\media`  nach `/var/lib/opsi/depot/<productid>/winpe` kopieren. +
Rechte anpassen (z.B.):
[source,prompt]
----
opsi-setup --set-rights /var/lib/opsi/depot/<productid>/winpe
----

[[opsi-getting-started-firststeps-osinstall-fill-base-packages-nt6-extendpe]]
==== Erweiterung eines PE

Manchmal ist es sehr nützlich, das Windows PE zu erweitern. Besonders bei Dell-Hardware gibt es spezielle Netzwerk- und Storage-Treiber, die speziell für den PE-Einsatz empfohlen werden. Folgende Anleitung beschreibt, wie man ein PE mit Treibern erweitern kann. Diese Anleitung funktioniert nur mit Windows 7. (Windows Vista beinhaltet nicht das benötige dism - Deployment Image Servicing and Management.)  Weiterhin setzt diese Anleitung vorraus, dass die Schritte im vorigen Kapitel zum erstellen des PE ausgeführt wurden.

NOTE: Windows Automated Installation Kit wird für folgende Schritte nicht benötigt.

Herunterladen von Dell-PE-Treibersammlung. Bitte beachten, dass für Windows 7 die WINPE 3.0 Treiber benötigt werden. Die heruntergeladene CAB-Datei muss nun lokal ausgepackt werden. Dies kann man mit 7zip oder aber mit dem Kommandozeilentool expand erledigen. Für die Übersichtlichkeit wird empfohlen ein Verzeichnis wie zum Beispiel dell-driver auf C: an zu legen und die CAB-Datei dort aus zu packen.

* Nun wird zunächst das Image untersucht. Als Administrator die Eingabeaufforderung starten (Start => Programme => Zubehör =>mit rechter Maustaste auf "Eingabeaufforderung" => Ausführen als ... => Administrator) und folgenden Befehl eingeben:
[source,prompt]
----
dism /Get-WimInfo /WimFile:C:\winpe\ISO\sources\boot.wim
----

Aus der Ausgabe des Befehls braucht man für den nächsten Schritt den Index. Da in der Regel ein winpe aus einem einzigen Image besteht, sollte in der Regel der Index 1 immer funktioneren.

* Mit folgendem Befehl wird das Image gemountet:
[source,prompt]
----
dism /Mount-Wim /WimFile:C:\winpe\ISO\sources\boot.wim /index:1 /MountDir:c:\winpe\mount
----

* Nun wird das PE mit den dafür ausgepackten Treibern erweitert:
[source,prompt]
----
dism /Image:C:\winpe\mount  /Add-Driver /Driver:c:\dell-driver\winpe\x64 /Recurse
----

Für 32-Bit muss das `x64` durch `x86` ersetzt werden. Die Driver-CAB von Dell beinhaltet die Treiber für beide Architekturen.

NOTE: Wenn man nur einen Treiber integrieren möchte, kann man die Option `/Recurse` weglassen und statt ein Verzeichniss direkt die inf-Datei des Treibers angeben. Weiterhin ist es möglich mit dem Parameter `/ForceUnsigned` auch nicht signierte Treiber in ein PE zu integrieren.

* Zum Schluss wird das Image wieder ausgehängt und die Änderungen übernommen:
[source,prompt]
----
dism /Unmount-Wim /MountDir:c:\winpe\mount /Commit
----

* Das Verzeichnis `C:\winpe\ISO` als Verzeichnis `winpe` nach `/var/lib/opsi/depot/win7/` bzw. `/var/lib/opsi/depot/win2008` kopieren. +
Rechte anpassen (z.B.):
[source,prompt]
----
opsi-set-rights /var/lib/opsi/depot/win7/winpe
----


[[opsi-getting-started-firststeps-osinstall-fill-base-packages-nt6-unattend]]
==== unattend.xml

Die Steuerdatei für die unattended Installation ist die `unattend.xml`, welche unter `/var/lib/opsi/depot/win7/custom` zu finden ist.
Mögliche Modifikationen an dieser Datei sollten in diesem Verzeichnis und nicht im opsi Verzeichnis gemacht werden.

Die von uns mitgelieferte `unattend.xml` enthält Verweise auf die Netboot-Produkteigenschaften, welche unter anderem für die Aktivierung des Administrator Accounts mit dem Passwort 'nt123' sorgen.

Dokumente zur Unattend.xml finden sich nach Installation des WAIK in
`c:\Program Files\Windows\Waik\docs\chms`

[[opsi-getting-started-firststeps-osinstall-fill-base-packages-nt6-drivers]]
==== Treiber-Integration

Die Treiber-Integration verläuft analog {client-os}: Die Treiber werden unter `/var/lib/opsi/depot/<product-id>/drivers/drivers` abgelegt.
Danach wird im Ordner `/var/lib/opsi/depot/<product-id>/` das Script `./create_driver_links.py` aufgerufen.

Zu beachten ist, dass nur signierte Treiber verwendet werden können.
Bei der Verwendung von Treiber-Paketen wie z.B. von driverpacks.net ist darauf zu achten, dass Sie die Pakete für {client-os} verwenden.

[[opsi-getting-started-firststeps-osinstall-fill-base-packages-nt6-installfiles]]
==== Bereitstellung der Installationsmedien

Kopieren der Installations-DVD nach +
`/var/lib/opsi/depot/<productid>/installfiles`
und passen Sie Rechte/Eigentümer an:

[source,prompt]
----
opsi-set-rights /var/lib/opsi/depot/<productid>/installfiles
----

[[opsi-getting-started-firststeps-osinstall-fill-base-packages-nt6-logfiles]]
==== Log-Dateien der unattended-Installation

* `c:\Windows\Panther\setupact.log`: +
Log bis Ende Setup-Phase 4 (läuft unter WinPE)

* `c:\Windows\Panther\setupact.err`: +
Fehler-Log bis Ende Setup-Phase 4 (läuft unter WinPE)

* `c:\Windows\Panther\UnattendGC\setupact.log`: +
Log ab Specialize-Phase

* `c:\Windows\Panther\UnattendGC\setupact.err`: +
Fehler-Log ab Specialize-Phase

* `c:\Windows\System32\Winevt\Logs\*`

* `c:\Windows\ntbtlog.txt` (nur nach aktivierter Startprotokollierung)

[[opsi-getting-started-firststeps-osinstall-productkey]]
=== Windows-Produktschlüssel

Wenn Sie über das Modul opsi-Lizenzmanagement verfügen, können Sie die Windows Lizenzschlüssel über das Lizenzmanagement Modul verwalten. Lesen Sie dazu das Lizenzmanagement Handbuch bzw. das entsprechende Kapitel im opsi-Handbuch.

Haben Sie kein Lizenzmanagement oder wollen dieses nicht verwenden, gehen Sie wie folgt vor.

Wenn Sie bereits opsi-Clients eingerichtet haben, können Sie im opsi-Konfigurationseditor einen Windows-Produktschlüssel per Client eintragen:

* einen Client auswählen
* zum Tab Netboot-Produkte wechseln
* dort zB das Produkt {opsi-client-os} auswählen
* rechts in der Schalter-Liste in die Property-Zeile productkey gehen
* in das Value-Feld den Schlüssel eintragen
* das Feld verlassen, die Änderungen speichern.

Oder Sie arbeiten auf der Kommandozeile. Mit Angabe eines opsiservers: '<opsiserver.domain.local>' werden gemeinsame Werte für alle Clients am Depot abgefragt/gesetzt:

Die vorgegebenen Werte der Produkt-Properties erfahren Sie mit
(passen Sie gegebenfalls das angegebene Produkt an und tauschen Sie '<opsiserver.domain.local>' mit der FQDN Ihres opsiservers aus):
[source,prompt]
----
opsi-admin -d method productPropertyState_getObjects [] '{"productId":"win10-x64","objectId":"opsiserver.domain.local"}'
----

Um die Vorgabewerte abzuändern können Sie wie folgt vorgehen: Lesen Sie die Daten aus und schreiben Sie das Ergebnis in eine Datei. Diese kann nun verändert und das Ergebnis zurückgeschrieben werden.

Auslesen und wegschreiben (passen Sie ggf. das angegebene Produkt an und tauschen Sie '<opsiserver.domain.local>' mit der FQDN Ihres opsiservers aus):
[source,prompt]
----
opsi-admin -d method productPropertyState_getObjects [] '{"productId":"win10-x64","objectId":"opsiserver.domain.local"}' > /tmp/property_config.json
----

Editieren Sie die entstandene Datei `/tmp/property_config.json` und ändern dabei die Einträge für '"values"' der gewünschten Properties. Die veränderte Datei lesen Sie wieder ein mit dem Befehl:

[source,prompt]
----
opsi-admin -d method productPropertyState_updateObjects < /tmp/property_config.json
----

Kontrollieren Sie das Ergebnis mit einem Aufruf von (passen Sie ggf. das angegebene Produkt an und modifizieren Sie '<opsiserver.domain.local>' mit der FQDN Ihres opsiservers):
[source,prompt]
----
opsi-admin -d method productPropertyState_getObjects [] '{"productId":"win10-x64","objectId":"opsiserver.domain.local"}'
----


[[opsi-getting-started-firststeps-osinstall-start]]
=== Start der Windows-Installation

Zum Starten einer Windows-Installation wählen Sie nun im {opsi-configed} den betreffenden Client aus, setzen unter dem Karteireiter 'Netboot-Produkte' für die gewünschten Betriebssystem (z.B. {opsi-client-os}) die Aktion auf 'setup' und klicken auf den roten Haken (der wieder grün wird).

Der Client sollte jetzt beim Booten ein Linux Bootimage übers Netz ziehen, in dem Sie nochmal die PC-Neu-Installation bestätigen müssen. Dann sollte alles automatisch weiter laufen, bis schließlich die Logon-Aufforderung des installierten Windows auf dem Bildschirm steht.

NOTE: Sollte nach dem Laden des Bootimages der Bildschirm schwarz bleiben oder die Netzwerkkarte nicht (korrekt) funktionieren, so muss für diese konkrete Hardware evtl. die Startparameter des Bootimages angepasst werden. +
Dies können Sie im '{opsi-configed}' im Tab 'Hostparameter' am Eintrag 'opsi-linux-bootimage.append' tun. Details hierzu finden Sie im opsi-manual im Kapitel 'Netboot Produkte'.

CAUTION: Vorsicht bei Clients mit einer über 2TB großen Festplatte. In einem nicht UEFI-System beträgt die maximale Partitionsgröße 2 Terabyte. Sofern eine größere Partition angelegt werden soll schlägt die Installation fehl. Dies ist technisch durch die standard Partitionstabelle bedingt. Sie müssen die Festplatte in zwei Partitionen aufteilen. Dies können Sie über die Product-Properties steuern. Oder Sie erwerben das UEFI-Modul, wodurch diese technische Limietierung entfällt.

[[opsi-getting-started-firststeps-osinstall-structure]]
=== Aufbau der Produkte zur unattended Installation

Diese Kapitel betrifft die Windows-Netboot-Produkte.

[[opsi-getting-started-firststeps-osinstall-structure-dirs]]
==== Übersicht des Verzeichnisbaums

[source,configfile]
----
<productid>-
           |-i386/				NT5 only: Installations files
           |-installfiles/		        NT6 only: Installations files
           |-winpe/				NT6 only
           |-opsi/				Scripte und Templates by opsi.org
           |  |-$oem$/					NT5 only: $oem$ gemaess MS
           |  |-postinst.d/				Scripte nach OS-Install by opsi.org
           |  !-unattend.(txt/xml).template		Template by opsi.org
           |-custom/				Scripte und Templates by customer
           |  |-$oem$/					NT5 only: $oem$ gemaess MS by customer
           |  |-postinst.d/				Scripte nach OS-Install by customer
           |  !-unattend.(txt/xml)			unattend.txt by customer
           |-drivers/				drivers Verzeichnis
        user   |  |-drivers/			drivers Verzeichnis
           |  |-pciids/				Symlinkbaum zu Treibern
           |  |-vendors/			Symlinkbaum zu Treibern
           |  |-classes/			Symlinkbaum zu Treibern
           |  |-usbids/				Symlinkbaum zu Treibern
           |  |-hdaudioids/			Symlinkbaum zu Treibern
           |  |-pci.ids				PCI-IDs DB
           |  !-usb.ids				USB-IDs DB
           |-setup.py				Installationsscript
           |-<productid>_<version>.control	Meta Daten (nur zur Info)
           |-<productid>.files			Dateiliste (automatisch erstellt)
           |-create_driver_links.py		Script zur Treiberverwaltung
           |-show_drivers.py			Script zur Treiberverwaltung
           !-extract_driver_pack.py		Script zur Treiberverwaltung
----

[[opsi-getting-started-firststeps-osinstall-structure-files]]
==== Die Dateien

* `setup.py` +
Dies ist das Installationsskript, welches vom Bootimage ausgeführt wird.
* `<productid>_<version>.control` +
enthält die Metadaten des Produkts, so wie sie vom Paketierer bereitgestellt wurden. Die Datei liegt hier nur zu Informationszwecken, d.h. Änderungen an dieser Datei haben keinerlei Auswirkungen auf das System.

* `<productid>.files` +
Diese Datei wird automatisch erzeugt und sollte nicht verändert werden.

* `create_driver_links.py` +
`show_drivers.py` +
`extract_driver_pack.py` +
Dies sind Scripte zur Treiberintegration, die im Kapitel <<opsi-getting-started-firststeps-osinstall-driverintegration,Vereinfachte Treiberintegration in die automatische Windowsinstallation>>, näher erläutert werden.

[[opsi-getting-started-firststeps-osinstall-structure-i386]]
==== Verzeichnis installfiles / winpe

* `installfiles` +
Enthält den Inhalt der Installations-CD.

* `winpe` +
Enthält ein bootbares winpe Image.

[[opsi-getting-started-firststeps-osinstall-structure-opsicustom]]
==== Verzeichnisse opsi / custom

Diese beiden Verzeichnisse enthalten Scripte und Konfigurationsdateien zur Steuerung der Betriebssysteminstallation. Während der Installation wirken diese Verzeichnisse zusammen, indem die Dateien aus custom Vorrang haben.

Das Verzeichnis opsi enthält Dateien, die mit Updates jederzeit überspielt werden können. Hier sollten also keine Änderungen vorgenommen werden. Für Anpassungen können Sie Änderungen im Verzeichnis custom vornehmen, welches bei Updates nicht überspielt wird.

Das Unterverzeichnis `postinst.d` enthält Scripte, welche nach der eigentlichen Installation des Betriebssystems über die `postinst.cmd` gestartet werden, um z.B. den opsi-client-agent zu installieren. Die Scripte werden dabei in alphabetischer Reihenfolge abgearbeitet. Um die Reihenfolge zu verdeutlichen, fangen die Dateinamen mit einer zweistelligen Nummer an (`10_dhcp.cmd`). Wollen Sie hier Erweiterungen vornehmen, so können Sie im Verzeichnis custom/postinst.d Scripte mit Nummern zwischen den vollen 10ern ablegen (`13_myscript.cmd`). Die vollen 10er sind für die Pflege durch opsi.org/uib reserviert. Das Script `99_cleanup.cmd` ist das letzte und endet mit einem Reboot.

[[opsi-getting-started-firststeps-osinstall-structure-drivers]]
==== Verzeichnis drivers

Dieses Verzeichnis dient der Treiberintegration und ist im folgenden Kapitel beschrieben.

[[opsi-getting-started-firststeps-osinstall-driverintegration]]
=== Vereinfachte Treiberintegration in die automatische Windowsinstallation

Administriert man einen Pool von PCs, die Geräte besitzen, deren Treiber nicht in der Windows-Standardinstallation enthalten sind, so ist es meist sinnvoll, diese Treiber direkt in die Installation zu integrieren. Bei Netzwerkgeräten kann dies teilweise sogar unumgänglich sein, denn ein startendes Windows ohne Netzwerkkarte ist für den Administrator nicht ohne weiteres erreichbar.

Opsi unterstützt Sie durch eine Automatisierung der Treibereinbindung und vereinfacht so die Bereitstellung der Treiber. Dabei müssen die Treiber nur in dem korrekten Verzeichnis abgelegt werden. Durch den Aufruf eines Scripts werden dann die Treiberverzeichnisse durchsucht und ein Katalog erstellt, anhand dessen das Bootimage automatisch die richtigen Treiber erkennen und einbinden kann. Dabei können sowohl Standard-Treiber, USB-Treiber, HD-Audio-Treiber wie auch Treiber für Festplattencontroller (Textmode Treiber) abgelegt und automatisch eingebunden werden.

Damit die Treiber sofort bei der Windowsinstallation mit installiert werden, müssen Sie in einer bestimmten Form auf dem Server hinterlegt werden. Hierzu sind Treiberverzeichnisse geeignet, die eine '\*.inf'-Datei enthalten, die den Treiber für das Windows-Setupprogramm beschreibt. Irgendwelche in `setup.exe`, '*.zip' oder anders verpackten Treiber sind hier unbrauchbar. Mit dem Programm 'double driver' (http://www.boozet.org/dd.htm) können Sie von einem installierten Rechner die Treiber im geeigneten Format extrahieren.

Es stehen mehrere Ebenen zur Bereitstellung von Treibern zur Verfügung:

* Allgemeine Treiber Pakete

* Treiber die zu Ihrer Hardware gehören aber nicht speziell zu geordnet sind

* Treiber die manuell Rechnern zu geordnet sind

* Treiber die über die Felder <vendor>/<model> der Inventarisierung automatisch den Rechnern zu geordnet werden.

Wie diese unterschiedlichen Ebenen verwendet werden können ist im folgenden beschrieben:

[[opsi-getting-started-firststeps-osinstall-driverintegration-generaldrivers]]
==== Allgemeine Treiber Pakete

Wenn die Hardwareausstattung sehr heterogen ist, kann es sinnvoll sein mit allgemeinen Treiberpaketen zu arbeiten. +
Allgemeine Treiber legen Sie ab unter `./drivers/drivers`. +
Solche allg. Treiber Pakete finden Sie http://driverpacks.net/ . +
Laden Sie die gewünschten Treiber Pakete in ein temporäres Verzeichnis herunter und entpacken die Treiberpakete mit:
[source,prompt]
----
./extract_driver_pack.py <pfad zu dem temporären Verzeichnis mit den komprimierten driverpacks>
----
Hiermit werden die Treiber entpackt und in das Verzeichnis `./drivers/drivers/` abgelegt. +
Nachteil dieser Pakete ist, das sich hier auch Treiber finden welche zwar von der Beschreibung zu Ihrer Hardware passen aber nicht unbedingt mit Ihrer Hardware funktionieren. +
Treiber welche im Verzeichnis `./drivers/drivers/` liegen, werden anhand der PCI-Kennungen (bzw. USB- oder HD_Audio-Kennung) in der Beschreibungsdatei des Treibers als zur Hardware passend erkannt und in das Windows Setup mit eingebunden.

[[opsi-getting-started-firststeps-osinstall-driverintegration-preferred]]
==== Treiber die zu Ihrer Hardware gehören aber nicht speziell zu geordnet sind

Haben Sie nur wenige unterschiedliche Hardware zu unterstützen, so können Sie die Treiber bei den Herstellern suchen. +
Zusätzliche bzw. geprüfte Treiber gehören in jeweils eigene Verzeichnisse (Name und Tiefe der Verzeichnisstruktur egal) unterhalb des Verzeichnisses +
`./drivers/drivers/preferred`. +
Treiber welche im Verzeichnis `./drivers/drivers/preferred` liegen,
werden gegenüber den Treibern in `./drivers/drivers/` bevorzugt anhand der PCI-Kennungen (bzw. USB- oder HD_Audio-Kennung) in der Beschreibungsdatei des Treibers als zur Hardware passend erkannt und in das Windows Setup mit eingebunden. +
Finden sich z.B. zu eine PCI-ID in unterschiedlichen Treiber unter `preferred`, so kann dies zu Problemen bei der Treiber Zuordnung führen. In diesem Fall ist eine direkte Zuordnung der Treiber zu dem Client notwendig.

[[opsi-getting-started-firststeps-osinstall-driverintegration-additional]]
==== Treiber die manuell Rechnern zu geordnet sind

Zusätzliche Treiber, die unabhängig von ihrer Zuordnung bzw. Erkennung über die PCI- oder USB-IDs installiert werden sollen, gehören in jeweils eigene Verzeichnisse (Name und Tiefe der Verzeichnisstruktur egal) unterhalb des Verzeichnisses `./drivers/drivers/additional`. Über das Produkt-Property 'additional_drivers' können Sie einen oder mehrere Pfade von Treiberverzeichnissen innerhalb von `./drivers/drivers/additional` einem Client zu ordnen. Im Produkt-Property 'additional_drivers' angegebene Verzeichnisse werden rekursiv durchsucht und alle enthaltenen Treiber eingebunden. Dabei wird auch symbolischen Links gefolgt. Dies können Sie nutzen, um für bestimmte Rechner-Typen ein Verzeichnis zu erstellen (z.B. dell-optiplex-815).

Wird in den über 'additional_drivers' angegebenen Treiberverzeichnissen ein Treiber für ein vorhandenes PCI-Gerät (oder HD-Audio, USB) gefunden, so wird für dieses Gerät kein weiterer Treiber aus `drivers/preferred/` oder `drivers/` mehr eingebunden ('additional_drivers' ist sozusagen 'super-preferred'). Damit hat 'additional_drivers' die Funktion Treiber hinzuzufügen, welche über die normale Treibererkennung nicht gefunden würden.

[[opsi-getting-started-firststeps-osinstall-driverintegration-byaudit]]
==== Treiber die über die Felder <vendor>/<model> der Inventarisierung automatisch den Rechnern zu geordnet werden.

Der im vorigen Abschnitt beschriebene Mechanismus der direkten Zuordnung von Treibern zu Geräten, kann seit dem 2 Teil des Service Release opsi 4.0.2 automatisiert werden. Dazu wird in dem Verzeichnis `./drivers/drivers/additional/byAudit` nach einem Verzeichnisnamen gesucht der dem bei der Hardwareinventarisierung gefundenen 'Vendor' entspricht. In diesem 'Vendor' Verzeichnis wird nun nach einem Verzeichnisnamen gesucht, das dem bei der Hardwareinventarisierung gefundenen 'Model' entspricht. Wird ein solches Verzeichnis gefunden, so wird dieses Verzeichnis genauso behandelt, als wäre es über das Produkt-Property 'additional_drivers' manuell zugewiesen.

Dabei können seit opsi 4.0.5 die Treiber für einen {opsi-client} über den {opsi-configed} im Reiter Hardwareinventarisiering bereitgestellt werden (vgl.:opsi-Handbuch Automatisierte Treiberintegration).

Die Abarbeitung im {opsi-linux-bootimage} erfolgt in der Reihenfolge

* `<vendor>/<model> (<sku>)`
* ohne Fund greift der Fallback auf `<vendor>/<model>`
* ohne Fund greift der Fallback auf die Hauptplatine `<vendor>/<motherboard-model>`.

Einige Hersteller verwenden Modellbezeichnungen, die für diese Methode sehr ungünstig sind, da man einige Sonderzeichen wie / nicht in Datei- oder Verzeichnisnamen verwenden darf. Ein Beispiel dafür wäre als Modelbezeichnung: "5000/6000/7000". Ein Verzeichnis mit dieser Bezeichnung ist wegen den Sonderzeichen nicht gestattet. Seit der dritten Service Release opsi 4.0.3 werden deshalb folgende Sonderzeichen: < > ? " : | \ / * intern durch ein _ ersetzt. Mit dieser Änderung kann man oben genanntes schlechtes Beispiel als: "5000_6000_7000" anlegen und das Verzeichnis wird automatisch zu gewiesen, obwohl die Information in der Hardwareinventarisierung nicht der Verzeichnisstruktur enstprechen.

[[opsi-getting-started-firststeps-osinstall-driverintegration-structure]]
==== Struktur des Treiber Verzeichnisses und Ablage der Treiber:

[source,configfile]
----
/var/
  !-lib/
     !-opsi/depot/
        !-<productid>/
           !-drivers
              |-classes/		(Links auf Treiber über Geräteklassen)
              |-hdaudioids/		(Links auf HD-Audio Treiber)
              |-pciids/			(Links auf Treiber über PCI-Kennung)
              |-pci.ids			(PCI Datenbank)
              |-usbids/			(Links auf Treiber über USB-Kennung)
              |-usb.ids			(USB Datenbank)
              |-vendors/		(Links auf Treiber über Hersteller)
              !-drivers			(Platz für allg. Treiber Packs)
                 |-additional/		(Für manuell zugeordnete Treiber)
                    |-byAudit/		Modell spezifische Treiber welche
                       |-<vendor>		über die Hardwareinventarisierung
                          |-<model>		zugeordnet werden
                 |-buildin/		(Daten aus dem i386 Baum)
                 |-preferred/		(geprüfte Treiber)
                 |-exclude/		(ausgeschlossene Treiber)
                 !-mydriverpacks/	(Beispiel Treiber Pack)
----

[[opsi-getting-started-firststeps-osinstall-driverintegration-processing]]
==== Abarbeitung der unterschiedlichen Ebenen der Treiberintegration

Als oberste Priorität werden alle Treiber eingebunden, welche über das Property 'additional_drivers' bzw. die über die Inventarisierungsdaten in `./drivers/drivers/additional/byAudit` gefunden werden. Im Rahmen der Einbindung von Treibern wird geprüft für welche der Hardware eines Geräts (anhand der PCI-,USB-,HDAudio-Kennungen) hierdurch ein Treiber bereit gestellt wurde. Nur für Geräte für die auf diese Weise noch kein Treiber bereitgestellt wurde wird über die nachfolgenden Methoden ein Treiber gesucht.

Für Geräte denen nicht über 'additional_drivers' (bzw. 'byAudit') ein Treiber zu geordnet wurde wird anhand der PCI Kennung (bzw. USB-, HDAudio-Kennung) ein passender Treiber gesucht und eingebunden.

'Einbindung' von Treiber bedeutet dabei:

* Der Treiber wird auf die lokale Festplatte nach `c:\drv\<num>` kopiert.

* Dem Windows Setup wird in der unattended Datei mitgeteilt, in den Verzeichnissen unterhalb von `c:\drv\` nach passenden Treibern zu suchen.

[[opsi-getting-started-firststeps-osinstall-driverintegration-drivercheck]]
==== Treiber hinzufügen und prüfen

Nach jedem Hinzufügen eines Treibers oder jeden anderen Änderung im `./drivers/drivers` Verzeichnis (oder darunter) rufen Sie im Stammverzeichnis des netboot Produktes Verzeichnis folgenden Befehl auf, um die Rechte korrekt zu setzen:
[source,prompt]
----
opsi-set-rights ./drivers
----

Danach rufen Sie das Script `./create_driver_links.py` auf. Dieses durchsucht die Verzeichnisse unterhalb von './drivers/drivers' und erzeugt eine Reihe von Links anhand deren die Zuordnung der Treiber zu bestimmter Hardware (PCI-IDs, USB-IDs, HD-Audio-IDs) zu erkennen ist. Die Treiber aus dem preferred Verzeichnis werden von dem Script bevorzugt verwendet.

Das `setup.py` Script des Bootimages untersucht die Hardware des zu installierenden Computers und identifiziert die notwendigen Treiber. Diese werden dann auf die Festplatte kopiert und die unattend.xml entsprechend gepatcht. Das Script `create_driver_links.py` durchsucht auch bei NT5 Produkten einmalig den 'i386' Baum und extrahiert die Inf-Dateien der von Windows mitgelieferten Treiber nach 'windows_builtin'. Sollten Sie am i386-Baum eine Änderung vornehmen (z.B. durch das Einspielen eines Servicepacks) so löschen Sie dieses Verzeichnis und führen `create_driver_links.py` erneut aus. Bei NT6 Produkten werden die Treiber welche sich im WinPE finden als 'windows_builtin' erkannt.

Liegt zu einem Client eine Hardware-Inventarisierung vor, so kann über den Befehl:
[source,prompt]
----
./show_drivers.py <clientname>
----
ausgegeben werden, welche Treiber das Bootimage via PCI-IDs, USB-IDs, HD-Audio-IDs und 'additional_drivers' (bzw. 'byAudit') zur Installation auswählen würde und zu welcher Hardware noch kein Treiber bereit steht.

Kontrollieren Sie die Ausgabe von `show_drivers.py` um zu prüfen ob die gewünschten Treiber eingebunden werden.

Es kann vorkommen, das Treiberverzeichnisse von Herstellern Treiber für unterschiedliche Betriebssystemversionen ( z.B. {client-os}) oder Konfigurationen (SATA / SATA-Raid) enthalten. Das `create_driver_links.py` script kann das nicht unterscheiden. Wenn Sie die Vermutung haben, das ein verlinkter Treiber falsch ist, so verschieben Sie diesen Treiber in das Verzeichnis `drivers/exclude` und führen `create_driver_links.py` erneut aus. Treiber die in
`drivers/exclude` liegen werden bei der Treiberintegration nicht berücksichtigt.

Beispiel einer `show_drivers.py` Ausgabe für einen Client:

[source,prompt]
----
./show_drivers.py pcdummy

PCI-Devices
   [(Standardsystemgeräte), PCI Standard-PCI-zu-PCI-Brücke]
      No driver - device directory  /var/lib/opsi/depot/<productid>/drivers/pciids/1022/9602 not found
   [ATI Technologies Inc., Rage Fury Pro (Microsoft Corporation)]
      Using build-in windows driver
   [(Standard-IDE-ATA/ATAPI-Controller), Standard-Zweikanal-PCI-IDE-Controller]
      /var/lib/opsi/depot/<productid>/drivers/drivers/D/M/N/123
   [Realtek Semiconductor Corp., Realtek RTL8168C(P)/8111C(P) PCI-E Gigabit Ethernet NIC]
      /var/lib/opsi/depot/<productid>/drivers/drivers/preferred/realtek_gigabit_net_8111_8168b
   [IEEE 1394 OHCI-konformer Hostcontroller-Hersteller, OHCI-konformer IEEE 1394-Hostcontroller]
      No driver - device directory '/var/lib/opsi/depot/<productid>/drivers/pciids/197B/2380' not found
   [Advanced Micro Devices, Inc., AMD AHCI Compatible RAID Controller]
      /var/lib/opsi/depot/<productid>/drivers/drivers/preferred/ati_raid_sb7xx
   [(Standard-USB-Hostcontroller), Standard OpenHCD USB-Hostcontroller]
      No driver - device directory '/var/lib/opsi/depot/<productid>/drivers/pciids/1002/4397' not found
   [ATI Technologies Inc, ATI SMBus]
      /var/lib/opsi/depot/<productid>/drivers/drivers/preferred/ati_smbus

USB-Devices
   [(Standard-USB-Hostcontroller), USB-Verbundgerät]
      /var/lib/opsi/depot/<productid>/drivers/drivers/preferred/brother_844x_pGerb
   [Microsoft, USB-Druckerunterstützung]
      /var/lib/opsi/depot/<productid>/drivers/drivers/preferred/brother_844x_pGerb

Additional drivers
   [ati_hdaudio_azalia]
     /var/lib/opsi/depot/<productid>/drivers/drivers/additional/ati_hdaudio_azalia
----

Beispiel für einen Client mit 'additional_drivers':
[source,prompt]
----
 ./show_drivers.py e5800
Manually selected drivers (additional)
   [hp_e5800]
      [/var/lib/opsi/depot/<productid>/drivers/drivers/additional/hp_e5800/sp52852/Vista64/HDXHPAI3.inf]
      [/var/lib/opsi/depot/<productid>/drivers/drivers/additional/hp_e5800/sp52852/Vista64/HDX861A.inf]
      [/var/lib/opsi/depot/<productid>/drivers/drivers/additional/hp_e5800/sp52852/Vista64/HDXHPAI1.inf]
      [/var/lib/opsi/depot/<productid>/drivers/drivers/additional/hp_e5800/sp52852/Vista64/HDXCPC.inf]
      [/var/lib/opsi/depot/<productid>/drivers/drivers/additional/hp_e5800/sp52852/Vista64/HDXHPAI2.inf]
      [/var/lib/opsi/depot/<productid>/drivers/drivers/additional/hp_e5800/sp50134/autorun.inf]
      [/var/lib/opsi/depot/<productid>/drivers/drivers/additional/hp_e5800/sp50134/ibxHDMI/IntcDAud.inf]
      [/var/lib/opsi/depot/<productid>/drivers/drivers/additional/hp_e5800/sp50134/HDMI/IntcHdmi.inf]
      [/var/lib/opsi/depot/<productid>/drivers/drivers/additional/hp_e5800/sp50134/Graphics/kit24890.inf]
      [/var/lib/opsi/depot/<productid>/drivers/drivers/additional/hp_e5800/sp50134/IIPS/Impcd.inf]
      [/var/lib/opsi/depot/<productid>/drivers/drivers/additional/hp_e5800/sp54284/Realtek 64bit/hp64win7.inf]

PCI-Devices
   [8086:27C8]  Intel : Intel(R) N10/ICH7 Family USB Universal Host Controller - 27C8
      /var/lib/opsi/depot/<productid>/drivers/drivers/preferred/R293337/WIN7
   [8086:27DA]  Intel : Intel(R) N10/ICH7 Family SMBus Controller - 27DA
      /var/lib/opsi/depot/<productid>/drivers/drivers/preferred/R293337/WIN7
   [8086:27C9]  Intel : Intel(R) N10/ICH7 Family USB Universal Host Controller - 27C9
      /var/lib/opsi/depot/<productid>/drivers/drivers/preferred/R293337/WIN7
   [8086:27DF]  Intel : Intel(R) ICH7 Family Ultra ATA Storage Controllers - 27DF
      /var/lib/opsi/depot/<productid>/drivers/drivers/preferred/R293337/WIN7
   [8086:27CA]  Intel : Intel(R) N10/ICH7 Family USB Universal Host Controller - 27CA
      /var/lib/opsi/depot/<productid>/drivers/drivers/preferred/R293337/WIN7
   [8086:2E30]  Intel : Intel(R) 4 Series Chipset Processor to I/O Controller - 2E30
      /var/lib/opsi/depot/<productid>/drivers/drivers/not_preferred/x64/C/Intel/1
   [8086:27CB]  Intel : Intel(R) N10/ICH7 Family USB Universal Host Controller - 27CB
      /var/lib/opsi/depot/<productid>/drivers/drivers/preferred/R293337/WIN7
   [8086:2E32]  Intel Corporation : Intel(R) G41 Express Chipset
      Manually selected [hp_e5800] /var/lib/opsi/depot/<productid>/drivers/drivers/additional/hp_e5800/sp50134/Graphics
   [8086:27CC]  Intel : Intel(R) N10/ICH7 Family USB2 Enhanced Host Controller - 27CC
      /var/lib/opsi/depot/<productid>/drivers/drivers/preferred/R293337/WIN7
   [8086:244E]  Intel : Intel(R) 82801 PCI-Brücke - 244E
      Using build-in windows driver
      This driver will not be integrated, because same device already integrated in: '/var/lib/opsi/depot/<productid>n/drivers/drivers/not_preferred/x64/C/Intel/1/dmi_pci.inf'
   [8086:27D0]  Intel : Intel(R) N10/ICH7 Family PCI Express Root Port - 27D0
      /var/lib/opsi/depot/<productid>/drivers/drivers/preferred/R293337/WIN7
   [8086:27B8]  Intel : Intel(R) ICH7 Family LPC Interface Controller - 27B8
      /var/lib/opsi/depot/<productid>/drivers/drivers/preferred/R293337/WIN7
   [8086:27D2]  Intel : Intel(R) N10/ICH7 Family PCI Express Root Port - 27D2
      /var/lib/opsi/depot/<productid>/drivers/drivers/preferred/R293337/WIN7
   [8086:27C0]  Intel : Intel(R) N10/ICH7 Family Serial ATA Storage Controller - 27C0
      /var/lib/opsi/depot/<productid>/drivers/drivers/preferred/R293337/WIN7
   [8086:27D8]  Microsoft : High Definition Audio-Controller
      No driver - device directory '/var/lib/opsi/depot/<productid>/drivers/pciids/8086/27D8' not found
   [10EC:8136]  Realtek : Realtek RTL8102E/RTL8103E-Familie-PCI-E-Fast-Ethernet-NIC (NDIS 6.20)
      Manually selected [hp_e5800] /var/lib/opsi/depot/<productid>/drivers/drivers/additional/hp_e5800/sp54284/Realtek 64bit

USB-Devices
   [0461:0010]  (Standardsystemgeräte) : USB-Eingabegerät
      No driver - vendor directory '/var/lib/opsi/depot/<productid>/drivers/usbids/0461' not found
   [0461:4D20]  (Standardsystemgeräte) : USB-Eingabegerät
      No driver - vendor directory '/var/lib/opsi/depot/<productid>/drivers/usbids/0461' not found
   [058F:6366]  Kompatibles USB-Speichergerät : USB-Massenspeichergerät
      No driver - vendor directory '/var/lib/opsi/depot/<productid>/drivers/usbids/058F' not found
   [0461:0010]  (Standard-USB-Hostcontroller) : USB-Verbundgerät
      No driver - vendor directory '/var/lib/opsi/depot/<productid>/drivers/usbids/0461' not found

HD-Audio-Devices
   [10EC:0662]  Realtek High Definition Audio
      Manually selected [hp_e5800] /var/lib/opsi/depot/<productid>/drivers/drivers/additional/hp_e5800/sp52852/Vista64
----

Beispiel für einen Client mit 'byAudit':
[source,prompt]
----
 ./show_drivers.py pctry5detlef
Manually selected drivers (additional)
   [/var/lib/opsi/depot/<productid>/drivers/drivers/additional/byAudit/nvidia/awrdacpi]
      [/var/lib/opsi/depot/<productid>/drivers/drivers/additional/byAudit/nvidia/awrdacpi/pctry5detlef/Display/Radeon X300-X550-X1050 Series Secondary (Microsoft Corporation - WDDM)/atiilhag.inf]
      [/var/lib/opsi/depot/<productid>/drivers/drivers/additional/byAudit/nvidia/awrdacpi/pctry5detlef/Display/Radeon X300-X550-X1050 Series (Microsoft Corporation - WDDM)/atiilhag.inf]
      [/var/lib/opsi/depot/<productid>/drivers/drivers/additional/byAudit/nvidia/awrdacpi/pctry5detlef/MEDIA/Realtek AC'97 Audio/oem21.inf]

PCI-Devices
   [1002:5B70]  ATI Technologies Inc. : Radeon X300/X550/X1050 Series Secondary (Microsoft Corporation - WDDM)
      Manually selected [/var/lib/opsi/depot/<productid>/drivers/drivers/additional/byAudit/nvidia/awrdacpi] /var/lib/opsi/depot/<productid>/drivers/drivers/additional/byAudit/nvidia/awrdacpi/pctry5detlef/Display/Radeon X300-X550-X1050 Series Secondary (Microsoft Corporation - WDDM)
      Multiple selected [/var/lib/opsi/depot/<productid>/drivers/drivers/additional/byAudit/nvidia/awrdacpi] /var/lib/opsi/depot/<productid>/drivers/drivers/additional/byAudit/nvidia/awrdacpi/pctry5detlef/Display/Radeon X300-X550-X1050 Series (Microsoft Corporation - WDDM)
   [10DE:0053]  (Standard-IDE-ATA/ATAPI-Controller) : Standard-Zweikanal-PCI-IDE-Controller
      No driver - device directory '/var/lib/opsi/depot/<productid>/drivers/pciids/10DE/0053' not found
   [10DE:005D]  (Standardsystemgeräte) : PCI Standard-PCI-zu-PCI-Brücke
      No driver - device directory '/var/lib/opsi/depot/<productid>/drivers/pciids/10DE/005D' not found
   [1022:1100]  AMD : AMD HyperTransport(tm)-Konfiguration
      Using build-in windows driver
   [10DE:0054]  (Standard-IDE-ATA/ATAPI-Controller) : Standard-Zweikanal-PCI-IDE-Controller
      /var/lib/opsi/depot/<productid>/drivers/drivers/preferred/fsc__esprimo_p625/FTS_NVIDIASATAAHCIDRIVERVISTA64V103042MCP78__1026963/NVIDIA_SATA_AHCI_DRIVER_Vista64_V10.3.0.42_MCP78 (textmode capable)
   [1022:1101]  AMD : AMD-Adresszuordnungskonfiguration
      Using build-in windows driver
   [10DE:0055]  (Standard-IDE-ATA/ATAPI-Controller) : Standard-Zweikanal-PCI-IDE-Controller
      /var/lib/opsi/depot/<productid>/drivers/drivers/preferred/fsc__esprimo_p625/FTS_NVIDIASATAAHCIDRIVERVISTA64V103042MCP78__1026963/NVIDIA_SATA_AHCI_DRIVER_Vista64_V10.3.0.42_MCP78 (textmode capable)
   [1022:1102]  AMD : AMD DRAM und HyperTransport(tm)-Nachverfolgungsmoduskonfiguration
      Using build-in windows driver
   [10DE:0057]  NVIDIA : NVIDIA nForce-Netzwerkcontroller
      Using build-in windows driver
   [1022:1103]  AMD : Sonstige AMD-Konfiguration
      Using build-in windows driver
   [10DE:0059]  Realtek : Realtek AC'97 Audio
      Manually selected [/var/lib/opsi/depot/<productid>/drivers/drivers/additional/byAudit/nvidia/awrdacpi] /var/lib/opsi/depot/<productid>/drivers/drivers/additional/byAudit/nvidia/awrdacpi/pctry5detlef/MEDIA/Realtek AC'97 Audio
   [10DE:005E]  NVIDIA : NVIDIA nForce4 HyperTransport-Brücke
      /var/lib/opsi/depot/<productid>/drivers/drivers/preferred/ga-ma78-pcbon4/chipset_win7-64/SMBUS
   [104C:8025]  Texas Instruments : OHCI-konformer Texas Instruments 1394-Hostcontroller
      No driver - device directory '/var/lib/opsi/depot/<productid>/drivers/pciids/104C/8025' not found
   [10DE:005A]  (Standard-USB-Hostcontroller) : Standard OpenHCD USB-Hostcontroller
      No driver - device directory '/var/lib/opsi/depot/<productid>/drivers/pciids/10DE/005A' not found
   [10DE:0050]  (StandardsystemgerÃ¤te) : PCI Standard-ISA-BrÃ¼cke
      No driver - device directory '/var/lib/opsi/depot/<productid>/drivers/pciids/10DE/0050' not found
   [10DE:005B]  (Standard-USB-Hostcontroller) : Standard PCI-zu-USB erweiterter Hostcontroller
      No driver - device directory '/var/lib/opsi/depot/<productid>/drivers/pciids/10DE/005B' not found
   [1002:5B60]  ATI Technologies Inc. : Radeon X300/X550/X1050 Series (Microsoft Corporation - WDDM)
      Manually selected [/var/lib/opsi/depot/<productid>/drivers/drivers/additional/byAudit/nvidia/awrdacpi] /var/lib/opsi/depot/<productid>/drivers/drivers/additional/byAudit/nvidia/awrdacpi/pctry5detlef/Display/Radeon X300-X550-X1050 Series Secondary (Microsoft Corporation - WDDM)
      Multiple selected [/var/lib/opsi/depot/<productid>/drivers/drivers/additional/byAudit/nvidia/awrdacpi] /var/lib/opsi/depot/<productid>/drivers/drivers/additional/byAudit/nvidia/awrdacpi/pctry5detlef/Display/Radeon X300-X550-X1050 Series (Microsoft Corporation - WDDM)
   [10DE:0052]  NVIDIA : NVIDIA nForce PCI-Systemverwaltung
      Using build-in windows driver
   [10DE:005C]  (StandardsystemgerÃ¤te) : PCI Standard-PCI-zu-PCI-Brücke
      No driver - device directory '/var/lib/opsi/depot/<productid>/drivers/pciids/10DE/005C' not found

USB-Devices
   [1241:1111]  (StandardsystemgerÃ¤te) : USB-Eingabegerät
      No driver - vendor directory '/var/lib/opsi/depot/<productid>/drivers/usbids/1241' not found

HD-Audio-Devices
   No devices installed
----

TIPPS::
* Treiberverzeichnisname `NDIS1` sind Vista-Treiber ; `NDIS2` sind Win7-Treiber

* Manche Chipsatztreiber enthalten Beschreibungsdateien, welche sehr viel Hardware aufführen ohne hierzu tatsächlich Treiber zu liefern. Ein Beispiel hierfür ist z.B. die `cougar.inf` oder `ibexahci.inf` von Intel. Wird ein solches 'Pseudo-Treiber' Verzeichnis per 'additional_drivers' (bzw. 'byAudit') zu geordnet, so führt dies dazu, das die hier aufgeführte Hardware von der weiteren Suche nach Treibern im 'preferred' Verzeichnis ausgeschlossen wird.

* SATA-Treiber und SATA-RAID Treiber beziehen sich auf die selbe PCI-Kennung. Ein SATA-RAID Treiber wird aber mit einem Einzelplatten System nicht funktionieren.

* Kontrollieren Sie die Ausgabe von `./show_drivers.py` genau !


include::opsi-packaging-tutorial-windows.adoc[]


[[opsi-getting-started-more-info]]
== Weitere Informationen

Das opsi-Handbuch (http://download.uib.de/opsi_stable/doc/opsi-handbuch-stable-de.pdf) enthält eine Fülle von weiteren Informationen, die für den produktiven Betrieb wichtig sind.

Wenn Sie dort nicht fündig werden oder Hilfe benötigen, wenden Sie sich an +
https://forum.opsi.org

Für produktive Installationen empfehlen wir professionelle Unterstützung durch uib im Rahmen eines Pflege- und Supportvertrages: +
http://uib.de/de/support-schulung/support/
