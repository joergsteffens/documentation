
[[opsi-softwintegration-tutorial-create-and-test-script]]
==== Testen und verbessern eines {opsi-script} Skriptes

Zum Testen und Verbessern eines Scriptes / Produktes gibt es zwei verschiedene Varianten:

* Testen des erstellten Scriptes 'Standalone' also ohne es auf dem opsi-server zu installieren und es von dort auf den Client auszurollen

* 'Integrierte' Tests des kompletten Produktes mit Installation auf dem Server und Ausrollen auf einem Client

In beiden Fällen gehen wir hier davon aus, das Sie ein Projekt mit dem `opsi-setup-detector` erstellt haben.

[[opsi-softwintegration-tutorial-create-and-test-script-standalone]]
===== 'Standalone' Tests

Starten Sie die Anwendung {opsi-script-gui}: per Doppelklick. 

* Windows: Die Datei `winst32.exe` per Doppelklick. +
(Beim Starten des Programms auf einem Windows 7 / 10 Client muss "ausführen als Administrator" über die rechte Maustaste verwendet werden.) Wenn der `opsi-client-agent` bereits auf Ihrem Rechner installiert ist, finden Sie diese unter `C:\Program files (x86)\opsi.org\opsi-client-agent\opsi-winst\winst32.exe`
Wenn nicht, kopieren Sie sich das Verzeichnis `opsi-winst` vom share `\\<opsiserver\opsi_depot`, aus dem Verzeichnis `opsi-winst\files.`

* Linux: Starten sie Datei `/usr/bin/opsi-script-gui`

* MacOS: Starten sie die Anwendung `/Applications/opsi-script-gui`

Sie sehen dann folgendes Fenster:

.{opsi-script-gui} im interaktiven Modus
image::winst-interaktiv.png["Screenshot: {opsi-script-gui} im interaktiven Modus",400]

* Über 'Select Script' können Sie das Skript auswählen, dass Sie ausführen möchten.

* Mit 'Start' können Sie das Script starten. Dabei wird das Script auf diesem Rechner ausgeführt.


* Öffnen Sie nun mit dem `opsi-logviewer` die Log-Datei an, um nachzuvollziehen, wie der {opsi-script} das Skript interpretiert. +
Achten Sie dabei darauf, das Sie hier mit dem Schieberegler rechts unten den angezeigten Loglevel einstellen können.

* Öffenen Sie das Script `setup.opsiscript` in einem Editor und führen Sie gewünschte Änderungen durch (Speichern nicht vergessen). Dazu gibt es mehrere Möglichkeiten:

** Öffnen Sie das Projekt im `{opsi-package-builder}` und öffnen von dort den Editor.

** Im Prinzip können Sie auch jeden anderen beliebigen Editor verwenden. +
Wir empfehlen den Editor 'jEdit' mit {opsi-script} Syntax-Highlighting, wie Sie ihn in der Grundausstattung der opsi-Produkte finden.



.jEdit mit einem opsi script
image::jedit-with-winst-script.png["jEdit with a opsi script",400]



* Sie können nun das Skript im Editor anpassen und speichern (Sie können den Editor geöffnet lassen). +
Wechseln Sie zum {opsi-script}-Fenster und starten Sie das Skript erneut über den Knopf 'Start' (das Skript muss nicht neu ausgewählt werden). +
Schauen Sie sich das auf Basis Ihrer Änderungen im Skript veränderte Log über `opsi-logviewer` an. (`Neu laden` über Kontext Menü oder Button in der Symbolleiste nicht vergessen).

* Auf diese Art und Weise, also über die Wiederholung der Punkte: +
 - Anpassung des Skriptes und speichern +
 - Skript ausführen +
 - Log überprüfen +
können Sie nach und nach Ihre Skripte so anpassen, dass sie das tun, was Sie wünschen.

Hinweise zur Lösung von Detail-Problemen finden Sie im nächsten Kapitel.
Im übernächsten Kapitel wird erklärt, wie Sie aus den so erstellten Skripten ein opsi-Produkt erstellen, das Sie auf dem {opsi-server} installieren können.

[[opsi-softwintegration-tutorial-create-and-test-script-integrated]]
===== 'Integrierte' Tests

Bei den 'integrierten Test' wird immer gleich das ganze Projekt per opsi auf einem Testclient ausgeführt. Gehen Sie dazu wie folgt vor:

* Öffnen Sie das Script `setup.opsiscript` in einem Editor und führen Sie gewünschte Änderungen durch (Speichern nicht vergessen). Dazu gibt es mehrere Möglichkeiten:

** Öffnen Sie das Projekt im `{opsi-package-builder}' und öffnen von dort den Editor.

** Im Prinzip können Sie auch jeden anderen beliebigen Editor verwenden. +
Wir empfehlen den Editor 'jEdit' mit {opsi-script} Syntax-Highlighting, wie Sie ihn in der Grundausstattung der opsi-Produkte finden.

* Produkt Packen

** Variante 1: Öffnen Sie das Projekt im `{opsi-package-builder}` und starten Sie das Packen über den Button `Packen`.

** Variante 2: Melden Sie sich per Terminal (z.B. Putty) auf dem opsi-server an und wechseln Sie in das Projektverzeichnis auf der Workbench. Packen Sie das Produkt per Befehl `opsi-makepackage`.

* Produkt auf dem opsi-server installieren.

** Variante 1: Starten Sie das Installieren im `{opsi-package-builder}` über den Button `Installieren`.

** Variante 2: Starten Sie das Installieren im Terminal im Projektverzeichnis mit dem Befehl `opsi-package-manager -i <myproctid_version.opsi>`. Dabei ist <myproctid_version.opsi> der Dateiname der im vorherigen Schritt beim packen ausgegeben wurde.

* Produkt über `opsi-configed` auswählen und starten

. Im Tab `Clients` den Testclient auswählen

. Im Tab `Produktkonfiguration` das Produkt auswählen. Sollte das Produkt nicht sichtbar sein (was nach dem ersten Installieren normal ist) einmal über das Menü 'Datei / Alle Daten neu laden' bzw. den Button ganz links in der Symbolleiste die Daten neu laden 

. Für das gewählte Produkt die Aktionsanforderung `setup` setzen und speichern.

. Den Client starten oder bei laufenden Client per Kontextmenü `on_demand` starten.

. Abwarten bis das Produkt auf dem Client durchgelaufen ist.

- Im Tab 'Logfiles / instlog' die Log-Datei inspizieren, um nachzuvollziehen, wie der {opsi-script} das Skript interpretiert. +
Achten Sie dabei darauf, das Sie hier mit dem Schieberegler rechts unten den angezeigten Loglevel einstellen können.

* Auf diese Art und Weise, also über die Wiederholung der Punkte: +
 - Anpassung des Skriptes und speichern +
 - Produkt packen +
 - Produkt auf dem Server installieren +
 - Produkt auf dem Client ausführen +
 - Log überprüfen +
können Sie nach und nach Ihre Skripte so anpassen, dass sie das tun, was Sie wünschen.



[[opsi-softwintegration-create-opsi-package-makeproductfile]]
==== Packen mit opsi-makepackage

Danach können Sie das Produkt packen. Gehen Sie dazu in das Stammverzeichnis des Produkts und rufen Sie 'opsi-makepackage' auf. Es wird nun das Produkt gepackt.

Es ist zu empfehlen die Pakete gleich mit einer zugehörigen md5-Prüfsummendatei zu erstellen.
Diese Datei wird unter anderem vom `opsi-package-updater` genutzt, um nach der Paketübertragung die Paketintegrität sicher zu stellen.
Eine solche Datei wird automatisch erstellt, aber für besondere Einsatzszenarien kann die Erstellung unterdrückt werden.

Bei der Übertragung von Paketen auf {opsi-depotserver} kann auf 'zsync' zurück gegriffen werden, um nur Unterschiede zwischen verschiedenen Paketen zu übertragen.
Damit dieses Verfahren verwendet werde kann, wird eine Datei besondere `.zsync`-Datei benötigt.
Eine solche Datei wird automatisch erstellt, aber für besondere Einsatzszenarien kann die Erstellung unterdrückt werden.

Wenn es beim Erstellen großer Pakete zu Platzproblemen im temporären Verzeichnis `/tmp` kommt, ist es möglich mittels `--temp-directory` ein abweichendes temporäres Verzeichnis anzugeben.

Wenn schon ein Paket dieser Version existiert, so zeigt `opsi-makepackage` eine Rückfrage:

[source,prompt]
----
Package file '/var/lib/opsi/workbench/mytest/mytest_3.14-1.opsi' already exists.
Press <O> to overwrite, <C> to abort or <N> to specify a new version:
----

Mit `o` wählen Sie überschreiben, mit `c` brechen Sie den Vorgang ab und mit `n` können Sie wählen, dass Sie nach einer neuen Product- bzw. Package-Version gefragt werden.

Das gepackte Paket können Sie mit `opsi-package-manager --install <paketdatei>` auf dem Server installieren.



Mehr Details zum `opsi-makepackage` finden Sie im opsi-manual: +
https://download.uib.de/opsi4.1/documentation/html/opsi-manual-v4.1/opsi-manual-v4.1.html#opsi-manual-configuration-tools


[[opsi-softwintegration-create-opsi-package-manager]]
==== Installieren mit opsi-package-manager

Um das gepackte Produkt zu installieren gibt es den Befehl `opsi-package-manager` . Gehen Sie dazu in das Stammverzeichnis des Produkts und rufen Sie folgenden Befehl auf.

[source,prompt]
----
opsi-package-manager -i <myproductid_version.opsi> 
----

Mehr Details zum `opsi-package-manager` finden Sie im opsi-manual: +
https://download.uib.de/opsi4.1/documentation/html/opsi-manual-v4.1/opsi-manual-v4.1.html#opsi-manual-configuration-tools

[[opsi-softwintegration-example-control]]
==== Beispiel einer 'control' Datei

[source,configfile]
----
[Package]
version: 1
depends:

[Product]
type: localboot
id: mytest
name: My Test
description: A test product
advice:
version: 3.14
priority: 10
licenseRequired: False
productClasses:
setupScript: setup.ins
uninstallScript:
updateScript:
alwaysScript:
onceScript:
customScript:
userLoginScript:

[ProductDependency]
action: setup
requiredProduct: javavm
requiredStatus: installed

[ProductProperty]
type: unicode
name: mytextprop
multivalue: False
editable: True
description: hint
values: ["off", "on"]
default: ["off"]

[ProductProperty]
type: bool
name: myboolprop
description: yes or no
default: False

[Changelog]
mytest (3.14-1) testing; urgency=low

  * Initial package

 -- jane doe <j.doe@opsi.org>  Mi, 14 Jul 2010 12:47:53 +0000
----
