////
; Copyright (c) uib gmbh (www.uib.de)
; This documentation is owned by uib
; and published under the german creative commons by-sa license
; see:
; https://creativecommons.org/licenses/by-sa/3.0/de/
; https://creativecommons.org/licenses/by-sa/3.0/de/legalcode
; english:
; https://creativecommons.org/licenses/by-sa/3.0/
; https://creativecommons.org/licenses/by-sa/3.0/legalcode
;
; credits: http://www.opsi.org/credits/
////

:Author:    uib gmbh
:Email:     info@uib.de
:Date:      20.01.2015
:Revision:  4.0.6
:toclevels: 6


include::../common/opsi_terms.asciidoc[]


[[opsi-manual-configuration-tools]]
=== opsi-Kommandozeilen-Werkzeuge und Prozesse


[[opsi-manual-configuration-tools-opsi-setup]]
==== Werkzeug: 'opsi-setup'

Das Programm 'opsi-setup' ist das "Schweizer Taschenmesser" zur Einrichtung von opsi.

So greifen zum Beispiel die Pakete zur Installation von opsi auf dem Server auf dieses Skript zurück, um opsi korrekt einzurichten. Da dieses Skript nun auch extern aufrufbar ist, lassen sich damit diverse Wartungsarbeiten und Korrekturen durchführen:


* Registrierung eines opsi-servers als Depotserver
* Verzeichnisrechte korrigieren
* die Backends initialisieren
* Backends upgraden (von 3.4 nach 4.0)
* '{MySQL-Backend}' erstmalig konfigurieren
* Default-Konfigurationen anpassen
* Backends bereinigen
* Samba-Konfiguration anpassen
* DHCP-Konfiguration anpassen

Hier die Hilfe-Anzeige von `opsi-setup`

[source,prompt]
----
opsi-setup --help

Usage: opsi-setup [options]

Options:
   -h, --help  show this help
   -l          log-level 0..9

   --log-file <path>          path to log file
   --ip-address <ip>          force to this ip address (do not lookup by name)
   --register-depot           register depot at config server
   --set-rights [path]        set default rights on opsi files (in [path] only)
   --init-current-config      init current backend configuration
   --update-mysql             update mysql backend
   --update-ldap              update ldap backend
   --update-file              update file backend
   --configure-mysql          configure mysql backend
   --edit-config-defaults     edit global config defaults
   --cleanup-backend          cleanup backend
   --auto-configure-samba     patch smb.conf
   --auto-configure-dhcpd     patch dhcpd.conf
----

Die Funktionen und Parameter im Einzelnen:

* `--ip-address <ip>` +
Diese Option dient dazu, eine IP-Addresse für den '{opsi-server}' vorzugeben und damit die Namensauflösung zu umgehen.

* `--register-depot` +
Diese Option dient dazu, einen '{opsi-server}' an einem anderen '{opsi-server}'
('{opsi-configserver}') als Depotserver anzumelden. Details hierzu vgl. <<opsi-manual-multidepot-installation>>.


* `--set-rights [path]` +
Setzt bzw. korrigiert die Dateizugriffsrechte in den wesentlichen opsi-Verzeichnissen:
+
** `/tftpboot/linux`
** `/home/opsiproducts`
** `/var/log/opsi`
** `/var/lib/opsi`
** `/var/lib/opsi/depot`
** `/etc/opsi`
+
Als Parameter kann auch ein Verzeichnis übergeben werden.
Dann werden unterhalb dieses Verzeichnisses die Rechte aller opsi-relevanten
Verzeichnisse und Dateien gesetzt, +
z.B.: +
`opsi-setup --set-rights /var/lib/opsi/depot/winxppro/drivers`

* `--init-current-config` +
Initialisiert die eingestellte Backendkonfiguration. Sollte nach jeder Änderung an der +
`/etc/opsi/backendManager/dispatch.conf` +
aufgerufen werden.

* Die Befehle +
`--update-mysql` +
`--update-file` +
dienen zum Upgrade des jeweiligen Backends (z.B. von opsi 3.4 auf opsi 4). +
Details siehe 'releasenotes-upgrade-Handbuch'.


* `--configure-mysql` +
Dient zur erstmaligen Initialisierung des '{MySQL-Backend}'. +
Details vgl. <<opsi-manual-backends-mysql-initializing>>.

* `--edit-config-defaults` +
Zum Editieren der Defaultwerte der Config wie im '{opsi-configed}' in der Serverkonfiguration angezeigt.
+
.Eingabemaske: `opsi-setup --edit-config-defaults`
image::opsi-setup_editconfigdefaults.png["Eingabemaske: opsi-setup --edit-config-defaults", width=400]
+
z.B.:
+
clientconfig.depot.id :: Der Name des Default-Depotservers.
+
clientconfig.depot.drive :: Der Laufwerksbuchstabe, auf welchem der Share mit den Installationsdaten verbunden wird. Hier kann ein Laufwerksbuchstabe fest gewählt werden oder über *dynamic* die automatische Auswahl ausgewählt werden. Bei dieser Variante wird versucht selbstständig einen freien Laufwerksbuchstaben zu finden.
+
license-management.use :: Bestimmt, ob Netboot-Produkte Lizenzkeys aus dem Lizenzmanagement oder aus den Properties holen.
+
product_sort_algorithm :: Bestimmt, nach welchem Algorithmus die Installationsreihenfolge ermittelt wird.

* `--cleanup-backend` +
Überprüft die aktuellen Backends auf Integrität und verwirft obsolete oder unreferenzierte Einträge. +
Entfernt werden dabei bspw. Produkte ohne Referenz (nicht auf Client / Depot installiert), Gruppen ohne Parent sowie ConfigStates ohne zugehörige Config. +

NOTE: Es ist gängige, gute Praxis vor dem Aufräumen des Backends ein Backup durch 'opsi-backup' zu erstellen.

* `--auto-configure-samba` +
Erzeugt in der Samba-Konfigurationsdatei `/etc/samba/smb.conf` die von opsi benötigten shares.

* `--auto-configure-dhcpd` +
Erzeugt in der DHCP-Konfigurationsdatei `/etc/dhcp3/dhcpd.conf` die von opsi benötigten Eintragungen. +
Nur verwenden, wenn der DHCP-Server auf dem opsi Server laufen soll. +
Details hierzu im DHCP-Kapitel des 'opsi-getting-started' Handbuchs.


[[opsi-manual-configuration-tools-opsi-package-manager]]
==== Werkzeug 'opsi-package-manager': opsi-Pakete (de-) installieren

Der 'opsi-package-manager' dient zur (De-) Installation von {opsi-product-packages}n auf einem {opsi-server}.

Beim Aufruf von 'opsi-package-manager' zur Installation
muss das zu installierende Paket für den Systemuser 'opsiconfd' lesbar sein.
Es wird daher dringend empfohlen, {opsi-product-packages} aus `/home/opsiproducts`
bzw. einem Unterverzeichnis hiervon zu installieren.

Die Logdatei des 'opsi-package-manager' ist '/var/log/opsi/package.log'

Paket installieren (ohne Fragen neu installieren):

[source, prompt]
----
opsi-package-manager -i softprod_1.0-5.opsi'
----

Paket installieren (mit Fragen nach Properties):

[source, prompt]
----
opsi-package-manager -p ask -i softprod_1.0-5.opsi
----

Paket installieren (und für alle auf Setup stellen, bei denen es installiert ist):

[source, prompt]
----
opsi-package-manager -S -i softprod_1.0-5.opsi
----

Paket deinstallieren:

[source, prompt]
----
opsi-package-manager -r softprod
----

Paket extrahieren und umbenennen:

[source, prompt]
----
opsi-package-manager -x opsi-template_<version>.opsi --new-product-id myprod
----

Es ist möglich ein Paket mit einer abweichenden 'Product ID' zu installieren.
Das ist besonders dann hilfreich, wenn vorher ein Windows-Netboot-Produkt aus
einem bestehenden Paket abgeleitet wurde und dieses Paket in der Zwischenzeit
aktualisiert wurde.

[source, prompt]
----
opsi-package-manager --install win7-x64_1.2.3.opsi --new-product-id win7-x64-custom
----

NOTE: Bitte beachten Sie, dass `opsi-product-updater` derartig installierte Produkte nicht automatisch aktualisiert.


Eine Übersicht über alle Optionen liefert die Option `--help`.

Zu beachten:

* Die Optionen `-d` bzw. `--depots` sind für den Betrieb mehrerer Depotserver gedacht.

* Bei der Verwendung von -d wird das zu installierende Paket
zunächst nach `/var/lib/opsi/repository` kopiert.
Dort muss ausreichend Platz zur Verfügung stehen. +
Siehe hierzu auch: opsi-server mit mehreren Depots <<opsi-manual-multidepot>>

* Falls es beim Installieren neuer Pakete zu Platzproblemen im temporären Verzeichnis kommt, kann mit der Option `--temp-dir` ein abweichender Ort angegeben werden.


[source, prompt]
----
# opsi-package-manager --help

Usage: opsi-package-manager [options] <command>

Manage opsi packages

Commands:
  -i, --install      <opsi-package> ...      install opsi packages
  -u, --upload       <opsi-package> ...      upload opsi packages to repositories
  -l, --list         <regex>                 list opsi packages matching regex
  -D, --differences  <regex>                 show depot differences of opsi packages matching regex
  -r, --remove       <opsi-product-id> ...   uninstall opsi packages
  -x, --extract      <opsi-package> ...      extract opsi packages to local directory
  -V, --version                              show program's version info and exit
  -h, --help                                 show this help message and exit

Options:
  -v, --verbose                           increase verbosity (can be used multiple times)
  -q, --quiet                             do not display any messages
  --log-file         <log-file>           path to debug log file
  --log-file-level   <log-file-level>     log file level (default 4)
  -d, --depots       <depots>             comma separated list of depot ids to process
                     all = all known depots
  -p, --properties   <mode>               mode for default product property values
                                 ask     = display dialog
                                 package = use defaults from package
                                 keep    = keep depot defaults (default)
  --purge-client-properties               remove product property states of the installed product(s)
  -f, --force                             force install/uninstall (use with extreme caution)
  -U, --update                            set action "update" on hosts where installation status is "installed"
  -S, --setup                             set action "setup" on hosts where installation status is "installed"
  -o, --overwrite                         overwrite existing package on upload even if size matches
  -n, --no-delta                          full package transfers on uploads (do not use librsync)
  -k, --keep-files                        do not delete client data dir on uninstall
  -t, --temp-dir     <path>               tempory directory for package install
  --max-transfers    <num>                maximum number of simultaneous uploads
                                             0 = unlimited (default)
  --max-bandwidth    <kbps>               maximum transfer rate for each transfer (in kilobytes per second)
                                             0 = unlimited (default)
  --new-product-id   <product-id>         Set a new product id when extracting opsi package or
                                          set a specific product ID during installation.
----

[[opsi-manual-configuration-tools-opsi-productupdater]]
==== Werkzeug: 'opsi-product-updater'

Das Kommandozeilen Werkzeug `opsi-product-updater` dient dazu, komfortabel
opsi-Produkte aus einem Repository zu laden und auf dem Server zu installieren.
Daneben kann es auch per cronjob zeitgesteuert aufgerufen werden
und so zur automatischen Synchronisation von opsi-Servern bzw. für automatische
Updates verwendet werden.

[source, prompt]
----
# opsi-product-updater --help

Usage: opsi-product-updater [options]
Options:
    -h    Show this help text
    -v    Increase verbosity (can be used multiple times)
    -V    Show version information and exit
    -c    Location of config file
    -i    Install all downloadable packages from configured repositories (ignores excludes)
    -p    List of productIds that will be processed: opsi-winst,opsi-client-agent
----

Die wesentlichen Features sind 'konfigurierbare Repositories' und 'konfigurierbare Aktionen'
(die Konfigurationseinstellungen werden in der `/etc/opsi/opsi-product-updater.conf` vorgenommen).

[[opsi-manual-configuration-tools-opsi-productupdater-repositories]]
===== Konfigurierbare Repositories

Repositories sind die Quellen, von denen sich der {opsi-server} die Pakete holt.

Grundsätzlich gibt es zwei Arten von Repositories, 'Internet-Repositories' und 'opsi-Server':

*Internet-Repositories*

Das wichtigste Beispiel ist das uib-Repository mit der URL http://download.uib.de

Internet-Repositories sind gekennzeichnet durch die Parameter

- 'baseURL' (z.B. http://download.uib.de)

-  'dirs' (Eine Liste von Verzeichnissen z.B. opsi4.0/produkte/essential)

-  sowie bei Bedarf 'username' und 'password' für Passwort-geschützte Repositories (z.B. für Abo-Kunden)

Bei Bedarf ist auch ein Proxy einzustellen.

*opsi-server*

Ein Repository hat den Typ 'opsi-server', wenn in der `/etc/opsi/opsi-product-updater.conf`
in der Sektion des Repositorys ein Eintrag zum Punkt

- 'opsiDepotId'

vorgenommen wird.

In der Regel ist bei einem '{opsi-depotserver}' an diese Steller der zentrale '{configserver}' einzutragen.
Damit zieht der Depotserver seine Pakete per Aufruf des 'opsi-product-updater'
bzw. automatisiert per Cronjob vom zentralen Server.

[[opsi-manual-configuration-tools-opsi-productupdater-actions]]
===== Konfigurierbare Aktionen

Für jedes Repository kann eingestellt werden:

* 'autoupdate': Aktuellere Versionen installierter Pakete werden geholt und installiert.

* 'autoinstall': Auch bis jetzt nicht installierte Pakete werden geholt und installiert

* 'autosetup': Die geholten und installierten Pakete werden für alle Clients,
auf denen dieses Produkt installiert ist, auf 'setup' gesetzt.

* 'onlyDownload': Neue Pakete werden nur heruntergeladen, es finden aber keine weiteren Aktionen damit statt. +
Ein beliebger Anwendungsfall ist diese Option in Verbindung mit aktivierten Benachrichtigungen zu verwenden, so dass nach dem Download eine Mail versendet wird und die Installation zu einem späteren Zeitpunkt manuell durch einen Administrator erfolgt.

Zusätzlich ist es möglich, die Aktualisierung
der Pakete auf den Clients über einen konfigurierbaren Wake-On-Lan-Mechanismus
anzustoßen.
In Verbindung mit dem {opsi-product} 'shutdownwanted'
kann dafür gesorgt werden,
dass die Clients nacheinander geweckt, die Software verteilt
und die Clients danach wieder heruntergefahren werden.
Hierdurch kann man seine Clients zum Beispiel
außerhalb der Geschäftszeiten mit Updates und Software versorgen
und die Anwender können am nächsten Morgen direkt mit der Arbeit beginnen.


[[opsi-manual-configuration-tools-opsi-admin]]
==== Werkzeuge: opsi-admin / 'opsi config interface'


[[opsi-manual-configuration-tools-opsi-admin-overview]]
===== Übersicht

Seit opsi 3.0 enthält eine serverseitige Bibliothek die zentralen Zugriffsfunktionen
auf die opsi-Datenhaltung. Nach außen bietet sie eine API an, mit der ihre Funktionen
genutzt werden können. Der 'opsiconfd' stellt die komplette API als Webservice zur Verfügung.

Über den Aufruf von https://<opsi-server>:4447/interface
kann über ein grafisches Frontend in elementare Form auf diesen Webservice zugegriffen werden.
Dazu müssen Sie sich als Mitglied der Gruppe 'opsiadmin' authentifizieren.


.'opsiconfd': Web-Interface
image::opsi-webinterface2.png["opsiconfd: Web-Interface", width=400]


Auf der Kommandozeile kann mit dem Befehl `opsi-admin` auf die API zugegriffen werden.
Dabei bietet 'opsi-admin' einen interaktiven Modus und einen nicht-interaktiven z.B. zum Einsatz in Skripten.

Der Aufruf von `opsi-admin --help` zeigt eine kleine Hilfe zu den Optionen:

[source,prompt]
----
# opsi-admin --help

Verwendung: opsi-admin [options] [command] [args...]
Optionen:
  -h, --help           Diesen Hilfetext anzeigen
  -V, --version        Versionsnummer ausgeben und beenden
  -u, --username       Benutzername (standard: momentaner Benutzer)
  -p, --password       Passwort (standard: Passwort interaktiv abfragen)
  -a, --address        URL des opsiconfd (standard: https://localhost:4447/rpc)
  -d, --direct         opsiconfd umgehen
      --no-depot       Depotserver-Backend nicht verwenden
  -l, --loglevel       Log-Level (standard: 3)
                       0=nichts, 1=essenziell, 2=kritisch, 3=Fehler, 4=Warnungen
                       5=Hinweise, 6=Informationen, 7=debug, 8=debug2, 9=vertraulich
  -f, --log-file       Pfad zur Log-Datei
  -i, --interactive    Im interaktiven Modus starten
  -c, --colorize       Farbige Ausgabe
  -S, --simple-output  Einfache Ausgabe (nur für Skalare und Listen)
  -s, --shell-output   Shell-Ausgabe
  -r, --raw-output     Rohdaten-Ausgabe
----

'opsi-admin' kann auf einen opsi-Webservice zugreifen oder direkt auf der Datenhaltung arbeiten.
Für die Arbeit über den Webservice müssen neben der URL auch 'username' und 'password' angegeben werden.
Dies wird man in Skripten üblicherweise nicht tun wollen.
Stattdessen bietet sich hier der direkte Datenzugriff über Aufruf `opsi-admin -d` an.

Im interaktiven Modus (Start mit `opsi-admin -i` bzw. `opsi-admin -d -i -c`, kurz  `opsi-admin -dic`)
erhalten Sie Eingabe-Unterstützung durch die Tabtaste. Betätigen der Tabtaste
führt auf eine Auswahl der der möglichen Fortsetzungen der Eingabe
bzw. die Angabe des Datentyps der nächsten erwarteten Eingabe.
In der Liste der möglichen Eingaben können Sie mit Bild-auf und Bild-ab blättern.

Die Optionen `-s` und `-S` erzeugen eine Form der Ausgabe welche sich leichter in Skripten weiterverarbeiten lässt.

Außer den Methodenaufrufen (eingeleitet mit `method`), welche direkt die API widerspiegeln, gibt
es Aufrufe (eingeleitet mit `task`),
die intern auf eine Kombination von Methodenaufrufen zur Erledigung
einer bestimmten Aufgabe abgebildet werden.

[[opsi-manual-configuration-tools-opsi-admin-typical-usage]]
===== Typische Verwendung


[[opsi-manual-configuration-tools-opsi-admin-typical-usage-setup]]
.Ein Produkt für alle Clients auf setup stellen, welche dieses Produkt installiert haben:

[source,prompt]
----
opsi-admin -d task setupWhereInstalled "softprod"
----


[[opsi-manual-configuration-tools-opsi-admin-typical-usage-clientlist]]
.Liste aller Clients

[source,prompt]
----
opsi-admin -d method host_getIdents
----


[[opsi-manual-configuration-tools-opsi-admin-typical-usage-delete-client]]
.Client löschen

[source,prompt]
----
opsi-admin -d method host_delete <clientname>
----

z.B.:

[source,prompt]
----
opsi-admin -d method host_delete "pxevm.uib.local"
----


[[opsi-manual-configuration-tools-opsi-admin-typical-usage-create-client]]
.Client anlegen

[source,prompt]
----
opsi-admin -d method host_createOpsiClient <full qualified clientname>
----

z.B.:

[source,prompt]
----
opsi-admin -d method host_createOpsiClient "pxevm.uib.local"
----


[[opsi-manual-configuration-tools-opsi-admin-typical-usage-setProductActionRequest]]
.Action Request setzen

[source,prompt]
----
opsi-admin -d method setProductActionRequest <productId> <clientId> <actionRequest>
----

z.B.:

[source,prompt]
----
opsi-admin -d method setProductActionRequest win7 pxevm.uib.local setup
----


[[opsi-manual-configuration-tools-opsi-admin-typical-usage-setHostDescription]]
.Beschreibungen den Clients zuordnen

[source,prompt]
----
opsi-admin -d method setHostDescription "dpvm02.uib.local" "Client unter VMware"
----

[[opsi-manual-configuration-tools-opsi-admin-typical-usage-list-host-ids]]
.IDs aller Clients auflisten

Hierzu wird die Option `-S` verwendet, um zu erreichen, dass jeder Client in einer eigenen Zeile ausgeben wird. Durch die Eingrenzung auf den Typ `OpsiClient` wird verhindert, dass opsi-Server mit ausgegeben werden.

Diese Ausgabe eignet sich zur Weiterverwendung in anderen Aufrufen.

[source,prompt]
----
opsi-admin -dS method host_getIdents '' '{"type": "OpsiClient"}'
----

[[opsi-manual-configuration-tools-opsi-admin-typical-list-installed-products]]
.Auflisten der auf Clients installierten Produkte

[source,prompt]
----
opsi-admin -d method productOnClient_getObjects '["productVersion", "packageVersion", "installationStatus"]' '{"installationStatus": "installed"}'
----

[[opsi-manual-configuration-tools-opsi-admin-typical-setPcpatchPassword]]
.Pcpatch-Passwort setzen

[source,prompt]
----
opsi-admin -d task setPcpatchPassword
----

Setzt das Passwort von pcpatch für Unix, samba und opsi.


[[opsi-manual-configuration-tools-serverprocesses]]
==== Serverprozesse: opsiconfd und opsipxeconfd

Der 'opsipxeconfd' dient zur Bereitstellung von 'named pipes' im `tftpboot`-Bereich,
welche den Bootvorgang eines PCs über das PXE-Protokoll steuern.

Die zugehörige Konfigurationsdatei ist `/etc/opsi/opsipxeconfd.conf`, die Logdatei
`/var/log/opsi/opsipxeconfd.log`.

Der 'opsiconfd' dient zur Bereitstellung der {opsi-server}-API als JSON-Webservice
und nimmt noch eine Reihe weiterer Aufgaben wahr.

Dieser Dienst ist damit der zentrale opsi-Dienst.
Über ihn wird z.B. sämtliche Kommunikation zwischen den Clients und dem Server abgewickelt.

Von daher ist die Möglichkeit, diesen Prozess und seine Last zu überwachen, ein wichtiges Werkzeug.

[[opsi-manual-configuration-tools-serverprocesses-info]]
===== 'opsiconfd'-Überwachung: opsiconfd info

Unter der Webadresse https://<opsi-server>:4447/info erhalten Sie grafisch
aufbereitete Informationen über den Lastverlauf des 'opsiconfd' der
letzten Stunde, des letzten Tages, des letzten Monats und des letzten Jahrs sowie weitere tabellarische Informationen.

.opsiconfd info: 'opsiconfd'-Werte der letzten Stunde
image::opsiconfd-info-hour.png["opsiconfd info: opsiconfd-Werte der letzten Stunde", width="120mm"]

.opsiconfd info: 'opsiconfd'-Werte des letzten Tages
image::opsiconfd-info-day.png["opsiconfd info: opsiconfd-Werte des letzten Tages", width="120mm"]

[[opsi-manual-configuration-tools-serverprocess-tftpd]]
==== Serverprozess: opsi-atftpd

Der opsi-atftpd ist ein standard atftpd, welche um Fähigkeit erweitert wurde mit 'named pipes' umzugehen.

Per default wird der opsi-atftpd so installiert, daß er nicht ständig läuft sondern nur bei Bedarf durch den `inetd` Prozess gestartet wird.

Um den opsi-atftpd als Daemon laufen zu lassen und ihn nicht über den `inetd` zu starten, müssen Sie folgende Änderungen vornehmen:

* In der `/etc/inetd.conf` die Zeile zum Protokoll 'tftp' auskommentieren. Danach den inetd reloaden. Der Befehl hierzu ist abhängig vom verwendet Linux:

** Ubuntu / Debian: `service openbsd-inetd reload`

** openSUSE / SLES / RedHat / CentOS: `service xinetd reload`

* In der `/etc/default/atfpd` die Zeile `USE_INETD=true` ändern auf `USE_INETD=false`. Danach den opsi-atftpd als Deamon starten mit `service opsi-atftpd restart`



